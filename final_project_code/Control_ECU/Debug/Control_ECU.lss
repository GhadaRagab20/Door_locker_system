
Control_ECU.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00002236  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000001c  00800060  00002236  000022ca  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000003  0080007c  0080007c  000022e6  2**0
                  ALLOC
  3 .stab         00002214  00000000  00000000  000022e8  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      000014ca  00000000  00000000  000044fc  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000140  00000000  00000000  000059c6  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 00000170  00000000  00000000  00005b06  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00001c49  00000000  00000000  00005c76  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00000eeb  00000000  00000000  000078bf  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00000dad  00000000  00000000  000087aa  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000160  00000000  00000000  00009558  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    0000028d  00000000  00000000  000096b8  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    000007ce  00000000  00000000  00009945  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  0000a113  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 64 0a 	jmp	0x14c8	; 0x14c8 <__vector_6>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d4 e0       	ldi	r29, 0x04	; 4
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	10 e0       	ldi	r17, 0x00	; 0
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e6 e3       	ldi	r30, 0x36	; 54
      68:	f2 e2       	ldi	r31, 0x22	; 34
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	ac 37       	cpi	r26, 0x7C	; 124
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	10 e0       	ldi	r17, 0x00	; 0
      78:	ac e7       	ldi	r26, 0x7C	; 124
      7a:	b0 e0       	ldi	r27, 0x00	; 0
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	af 37       	cpi	r26, 0x7F	; 127
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 b8 0d 	call	0x1b70	; 0x1b70 <main>
      8a:	0c 94 19 11 	jmp	0x2232	; 0x2232 <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 49 03 	call	0x692	; 0x692 <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 e2 10 	jmp	0x21c4	; 0x21c4 <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	a0 e6       	ldi	r26, 0x60	; 96
     128:	b0 e0       	ldi	r27, 0x00	; 0
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 fe 10 	jmp	0x21fc	; 0x21fc <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 ee 10 	jmp	0x21dc	; 0x21dc <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 0a 11 	jmp	0x2214	; 0x2214 <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 ee 10 	jmp	0x21dc	; 0x21dc <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 0a 11 	jmp	0x2214	; 0x2214 <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 e2 10 	jmp	0x21c4	; 0x21c4 <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__stack+0x3f>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__stack+0x55>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__stack+0x2d>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__stack+0x3f>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__stack+0x35>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__stack+0x3b>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__stack+0x55>
     494:	80 e6       	ldi	r24, 0x60	; 96
     496:	90 e0       	ldi	r25, 0x00	; 0
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__stack+0x1c7>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__stack+0x51>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__stack+0x1c7>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__stack+0x67>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__stack+0x1c7>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__stack+0xd3>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__stack+0xc7>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__stack+0xef>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__stack+0x109>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__stack+0x8f>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__stack+0x14d>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__stack+0x141>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__stack+0x11f>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__stack+0x16b>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__stack+0x153>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__stack+0x1ad>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__stack+0x1ad>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__stack+0x1ad>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__stack+0x1b7>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 fe 10 	jmp	0x21fc	; 0x21fc <__epilogue_restores__>

00000632 <__gtsf2>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 ee 10 	jmp	0x21dc	; 0x21dc <__prologue_saves__+0x18>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	89 e0       	ldi	r24, 0x09	; 9
     650:	e8 2e       	mov	r14, r24
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     672:	89 85       	ldd	r24, Y+9	; 0x09
     674:	82 30       	cpi	r24, 0x02	; 2
     676:	40 f0       	brcs	.+16     	; 0x688 <__gtsf2+0x56>
     678:	89 89       	ldd	r24, Y+17	; 0x11
     67a:	82 30       	cpi	r24, 0x02	; 2
     67c:	28 f0       	brcs	.+10     	; 0x688 <__gtsf2+0x56>
     67e:	c7 01       	movw	r24, r14
     680:	b8 01       	movw	r22, r16
     682:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     686:	01 c0       	rjmp	.+2      	; 0x68a <__gtsf2+0x58>
     688:	8f ef       	ldi	r24, 0xFF	; 255
     68a:	68 96       	adiw	r28, 0x18	; 24
     68c:	e6 e0       	ldi	r30, 0x06	; 6
     68e:	0c 94 0a 11 	jmp	0x2214	; 0x2214 <__epilogue_restores__+0x18>

00000692 <__gesf2>:
     692:	a8 e1       	ldi	r26, 0x18	; 24
     694:	b0 e0       	ldi	r27, 0x00	; 0
     696:	ef e4       	ldi	r30, 0x4F	; 79
     698:	f3 e0       	ldi	r31, 0x03	; 3
     69a:	0c 94 ee 10 	jmp	0x21dc	; 0x21dc <__prologue_saves__+0x18>
     69e:	69 83       	std	Y+1, r22	; 0x01
     6a0:	7a 83       	std	Y+2, r23	; 0x02
     6a2:	8b 83       	std	Y+3, r24	; 0x03
     6a4:	9c 83       	std	Y+4, r25	; 0x04
     6a6:	2d 83       	std	Y+5, r18	; 0x05
     6a8:	3e 83       	std	Y+6, r19	; 0x06
     6aa:	4f 83       	std	Y+7, r20	; 0x07
     6ac:	58 87       	std	Y+8, r21	; 0x08
     6ae:	89 e0       	ldi	r24, 0x09	; 9
     6b0:	e8 2e       	mov	r14, r24
     6b2:	f1 2c       	mov	r15, r1
     6b4:	ec 0e       	add	r14, r28
     6b6:	fd 1e       	adc	r15, r29
     6b8:	ce 01       	movw	r24, r28
     6ba:	01 96       	adiw	r24, 0x01	; 1
     6bc:	b7 01       	movw	r22, r14
     6be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6c2:	8e 01       	movw	r16, r28
     6c4:	0f 5e       	subi	r16, 0xEF	; 239
     6c6:	1f 4f       	sbci	r17, 0xFF	; 255
     6c8:	ce 01       	movw	r24, r28
     6ca:	05 96       	adiw	r24, 0x05	; 5
     6cc:	b8 01       	movw	r22, r16
     6ce:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6d2:	89 85       	ldd	r24, Y+9	; 0x09
     6d4:	82 30       	cpi	r24, 0x02	; 2
     6d6:	40 f0       	brcs	.+16     	; 0x6e8 <__gesf2+0x56>
     6d8:	89 89       	ldd	r24, Y+17	; 0x11
     6da:	82 30       	cpi	r24, 0x02	; 2
     6dc:	28 f0       	brcs	.+10     	; 0x6e8 <__gesf2+0x56>
     6de:	c7 01       	movw	r24, r14
     6e0:	b8 01       	movw	r22, r16
     6e2:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     6e6:	01 c0       	rjmp	.+2      	; 0x6ea <__gesf2+0x58>
     6e8:	8f ef       	ldi	r24, 0xFF	; 255
     6ea:	68 96       	adiw	r28, 0x18	; 24
     6ec:	e6 e0       	ldi	r30, 0x06	; 6
     6ee:	0c 94 0a 11 	jmp	0x2214	; 0x2214 <__epilogue_restores__+0x18>

000006f2 <__ltsf2>:
     6f2:	a8 e1       	ldi	r26, 0x18	; 24
     6f4:	b0 e0       	ldi	r27, 0x00	; 0
     6f6:	ef e7       	ldi	r30, 0x7F	; 127
     6f8:	f3 e0       	ldi	r31, 0x03	; 3
     6fa:	0c 94 ee 10 	jmp	0x21dc	; 0x21dc <__prologue_saves__+0x18>
     6fe:	69 83       	std	Y+1, r22	; 0x01
     700:	7a 83       	std	Y+2, r23	; 0x02
     702:	8b 83       	std	Y+3, r24	; 0x03
     704:	9c 83       	std	Y+4, r25	; 0x04
     706:	2d 83       	std	Y+5, r18	; 0x05
     708:	3e 83       	std	Y+6, r19	; 0x06
     70a:	4f 83       	std	Y+7, r20	; 0x07
     70c:	58 87       	std	Y+8, r21	; 0x08
     70e:	89 e0       	ldi	r24, 0x09	; 9
     710:	e8 2e       	mov	r14, r24
     712:	f1 2c       	mov	r15, r1
     714:	ec 0e       	add	r14, r28
     716:	fd 1e       	adc	r15, r29
     718:	ce 01       	movw	r24, r28
     71a:	01 96       	adiw	r24, 0x01	; 1
     71c:	b7 01       	movw	r22, r14
     71e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     722:	8e 01       	movw	r16, r28
     724:	0f 5e       	subi	r16, 0xEF	; 239
     726:	1f 4f       	sbci	r17, 0xFF	; 255
     728:	ce 01       	movw	r24, r28
     72a:	05 96       	adiw	r24, 0x05	; 5
     72c:	b8 01       	movw	r22, r16
     72e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     732:	89 85       	ldd	r24, Y+9	; 0x09
     734:	82 30       	cpi	r24, 0x02	; 2
     736:	40 f0       	brcs	.+16     	; 0x748 <__ltsf2+0x56>
     738:	89 89       	ldd	r24, Y+17	; 0x11
     73a:	82 30       	cpi	r24, 0x02	; 2
     73c:	28 f0       	brcs	.+10     	; 0x748 <__ltsf2+0x56>
     73e:	c7 01       	movw	r24, r14
     740:	b8 01       	movw	r22, r16
     742:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     746:	01 c0       	rjmp	.+2      	; 0x74a <__ltsf2+0x58>
     748:	81 e0       	ldi	r24, 0x01	; 1
     74a:	68 96       	adiw	r28, 0x18	; 24
     74c:	e6 e0       	ldi	r30, 0x06	; 6
     74e:	0c 94 0a 11 	jmp	0x2214	; 0x2214 <__epilogue_restores__+0x18>

00000752 <__fixsfsi>:
     752:	ac e0       	ldi	r26, 0x0C	; 12
     754:	b0 e0       	ldi	r27, 0x00	; 0
     756:	ef ea       	ldi	r30, 0xAF	; 175
     758:	f3 e0       	ldi	r31, 0x03	; 3
     75a:	0c 94 f2 10 	jmp	0x21e4	; 0x21e4 <__prologue_saves__+0x20>
     75e:	69 83       	std	Y+1, r22	; 0x01
     760:	7a 83       	std	Y+2, r23	; 0x02
     762:	8b 83       	std	Y+3, r24	; 0x03
     764:	9c 83       	std	Y+4, r25	; 0x04
     766:	ce 01       	movw	r24, r28
     768:	01 96       	adiw	r24, 0x01	; 1
     76a:	be 01       	movw	r22, r28
     76c:	6b 5f       	subi	r22, 0xFB	; 251
     76e:	7f 4f       	sbci	r23, 0xFF	; 255
     770:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     774:	8d 81       	ldd	r24, Y+5	; 0x05
     776:	82 30       	cpi	r24, 0x02	; 2
     778:	61 f1       	breq	.+88     	; 0x7d2 <__fixsfsi+0x80>
     77a:	82 30       	cpi	r24, 0x02	; 2
     77c:	50 f1       	brcs	.+84     	; 0x7d2 <__fixsfsi+0x80>
     77e:	84 30       	cpi	r24, 0x04	; 4
     780:	21 f4       	brne	.+8      	; 0x78a <__fixsfsi+0x38>
     782:	8e 81       	ldd	r24, Y+6	; 0x06
     784:	88 23       	and	r24, r24
     786:	51 f1       	breq	.+84     	; 0x7dc <__fixsfsi+0x8a>
     788:	2e c0       	rjmp	.+92     	; 0x7e6 <__fixsfsi+0x94>
     78a:	2f 81       	ldd	r18, Y+7	; 0x07
     78c:	38 85       	ldd	r19, Y+8	; 0x08
     78e:	37 fd       	sbrc	r19, 7
     790:	20 c0       	rjmp	.+64     	; 0x7d2 <__fixsfsi+0x80>
     792:	6e 81       	ldd	r22, Y+6	; 0x06
     794:	2f 31       	cpi	r18, 0x1F	; 31
     796:	31 05       	cpc	r19, r1
     798:	1c f0       	brlt	.+6      	; 0x7a0 <__fixsfsi+0x4e>
     79a:	66 23       	and	r22, r22
     79c:	f9 f0       	breq	.+62     	; 0x7dc <__fixsfsi+0x8a>
     79e:	23 c0       	rjmp	.+70     	; 0x7e6 <__fixsfsi+0x94>
     7a0:	8e e1       	ldi	r24, 0x1E	; 30
     7a2:	90 e0       	ldi	r25, 0x00	; 0
     7a4:	82 1b       	sub	r24, r18
     7a6:	93 0b       	sbc	r25, r19
     7a8:	29 85       	ldd	r18, Y+9	; 0x09
     7aa:	3a 85       	ldd	r19, Y+10	; 0x0a
     7ac:	4b 85       	ldd	r20, Y+11	; 0x0b
     7ae:	5c 85       	ldd	r21, Y+12	; 0x0c
     7b0:	04 c0       	rjmp	.+8      	; 0x7ba <__fixsfsi+0x68>
     7b2:	56 95       	lsr	r21
     7b4:	47 95       	ror	r20
     7b6:	37 95       	ror	r19
     7b8:	27 95       	ror	r18
     7ba:	8a 95       	dec	r24
     7bc:	d2 f7       	brpl	.-12     	; 0x7b2 <__fixsfsi+0x60>
     7be:	66 23       	and	r22, r22
     7c0:	b1 f0       	breq	.+44     	; 0x7ee <__fixsfsi+0x9c>
     7c2:	50 95       	com	r21
     7c4:	40 95       	com	r20
     7c6:	30 95       	com	r19
     7c8:	21 95       	neg	r18
     7ca:	3f 4f       	sbci	r19, 0xFF	; 255
     7cc:	4f 4f       	sbci	r20, 0xFF	; 255
     7ce:	5f 4f       	sbci	r21, 0xFF	; 255
     7d0:	0e c0       	rjmp	.+28     	; 0x7ee <__fixsfsi+0x9c>
     7d2:	20 e0       	ldi	r18, 0x00	; 0
     7d4:	30 e0       	ldi	r19, 0x00	; 0
     7d6:	40 e0       	ldi	r20, 0x00	; 0
     7d8:	50 e0       	ldi	r21, 0x00	; 0
     7da:	09 c0       	rjmp	.+18     	; 0x7ee <__fixsfsi+0x9c>
     7dc:	2f ef       	ldi	r18, 0xFF	; 255
     7de:	3f ef       	ldi	r19, 0xFF	; 255
     7e0:	4f ef       	ldi	r20, 0xFF	; 255
     7e2:	5f e7       	ldi	r21, 0x7F	; 127
     7e4:	04 c0       	rjmp	.+8      	; 0x7ee <__fixsfsi+0x9c>
     7e6:	20 e0       	ldi	r18, 0x00	; 0
     7e8:	30 e0       	ldi	r19, 0x00	; 0
     7ea:	40 e0       	ldi	r20, 0x00	; 0
     7ec:	50 e8       	ldi	r21, 0x80	; 128
     7ee:	b9 01       	movw	r22, r18
     7f0:	ca 01       	movw	r24, r20
     7f2:	2c 96       	adiw	r28, 0x0c	; 12
     7f4:	e2 e0       	ldi	r30, 0x02	; 2
     7f6:	0c 94 0e 11 	jmp	0x221c	; 0x221c <__epilogue_restores__+0x20>

000007fa <__pack_f>:
     7fa:	df 92       	push	r13
     7fc:	ef 92       	push	r14
     7fe:	ff 92       	push	r15
     800:	0f 93       	push	r16
     802:	1f 93       	push	r17
     804:	fc 01       	movw	r30, r24
     806:	e4 80       	ldd	r14, Z+4	; 0x04
     808:	f5 80       	ldd	r15, Z+5	; 0x05
     80a:	06 81       	ldd	r16, Z+6	; 0x06
     80c:	17 81       	ldd	r17, Z+7	; 0x07
     80e:	d1 80       	ldd	r13, Z+1	; 0x01
     810:	80 81       	ld	r24, Z
     812:	82 30       	cpi	r24, 0x02	; 2
     814:	48 f4       	brcc	.+18     	; 0x828 <__pack_f+0x2e>
     816:	80 e0       	ldi	r24, 0x00	; 0
     818:	90 e0       	ldi	r25, 0x00	; 0
     81a:	a0 e1       	ldi	r26, 0x10	; 16
     81c:	b0 e0       	ldi	r27, 0x00	; 0
     81e:	e8 2a       	or	r14, r24
     820:	f9 2a       	or	r15, r25
     822:	0a 2b       	or	r16, r26
     824:	1b 2b       	or	r17, r27
     826:	a5 c0       	rjmp	.+330    	; 0x972 <__pack_f+0x178>
     828:	84 30       	cpi	r24, 0x04	; 4
     82a:	09 f4       	brne	.+2      	; 0x82e <__pack_f+0x34>
     82c:	9f c0       	rjmp	.+318    	; 0x96c <__pack_f+0x172>
     82e:	82 30       	cpi	r24, 0x02	; 2
     830:	21 f4       	brne	.+8      	; 0x83a <__pack_f+0x40>
     832:	ee 24       	eor	r14, r14
     834:	ff 24       	eor	r15, r15
     836:	87 01       	movw	r16, r14
     838:	05 c0       	rjmp	.+10     	; 0x844 <__pack_f+0x4a>
     83a:	e1 14       	cp	r14, r1
     83c:	f1 04       	cpc	r15, r1
     83e:	01 05       	cpc	r16, r1
     840:	11 05       	cpc	r17, r1
     842:	19 f4       	brne	.+6      	; 0x84a <__pack_f+0x50>
     844:	e0 e0       	ldi	r30, 0x00	; 0
     846:	f0 e0       	ldi	r31, 0x00	; 0
     848:	96 c0       	rjmp	.+300    	; 0x976 <__pack_f+0x17c>
     84a:	62 81       	ldd	r22, Z+2	; 0x02
     84c:	73 81       	ldd	r23, Z+3	; 0x03
     84e:	9f ef       	ldi	r25, 0xFF	; 255
     850:	62 38       	cpi	r22, 0x82	; 130
     852:	79 07       	cpc	r23, r25
     854:	0c f0       	brlt	.+2      	; 0x858 <__pack_f+0x5e>
     856:	5b c0       	rjmp	.+182    	; 0x90e <__pack_f+0x114>
     858:	22 e8       	ldi	r18, 0x82	; 130
     85a:	3f ef       	ldi	r19, 0xFF	; 255
     85c:	26 1b       	sub	r18, r22
     85e:	37 0b       	sbc	r19, r23
     860:	2a 31       	cpi	r18, 0x1A	; 26
     862:	31 05       	cpc	r19, r1
     864:	2c f0       	brlt	.+10     	; 0x870 <__pack_f+0x76>
     866:	20 e0       	ldi	r18, 0x00	; 0
     868:	30 e0       	ldi	r19, 0x00	; 0
     86a:	40 e0       	ldi	r20, 0x00	; 0
     86c:	50 e0       	ldi	r21, 0x00	; 0
     86e:	2a c0       	rjmp	.+84     	; 0x8c4 <__pack_f+0xca>
     870:	b8 01       	movw	r22, r16
     872:	a7 01       	movw	r20, r14
     874:	02 2e       	mov	r0, r18
     876:	04 c0       	rjmp	.+8      	; 0x880 <__pack_f+0x86>
     878:	76 95       	lsr	r23
     87a:	67 95       	ror	r22
     87c:	57 95       	ror	r21
     87e:	47 95       	ror	r20
     880:	0a 94       	dec	r0
     882:	d2 f7       	brpl	.-12     	; 0x878 <__pack_f+0x7e>
     884:	81 e0       	ldi	r24, 0x01	; 1
     886:	90 e0       	ldi	r25, 0x00	; 0
     888:	a0 e0       	ldi	r26, 0x00	; 0
     88a:	b0 e0       	ldi	r27, 0x00	; 0
     88c:	04 c0       	rjmp	.+8      	; 0x896 <__pack_f+0x9c>
     88e:	88 0f       	add	r24, r24
     890:	99 1f       	adc	r25, r25
     892:	aa 1f       	adc	r26, r26
     894:	bb 1f       	adc	r27, r27
     896:	2a 95       	dec	r18
     898:	d2 f7       	brpl	.-12     	; 0x88e <__pack_f+0x94>
     89a:	01 97       	sbiw	r24, 0x01	; 1
     89c:	a1 09       	sbc	r26, r1
     89e:	b1 09       	sbc	r27, r1
     8a0:	8e 21       	and	r24, r14
     8a2:	9f 21       	and	r25, r15
     8a4:	a0 23       	and	r26, r16
     8a6:	b1 23       	and	r27, r17
     8a8:	00 97       	sbiw	r24, 0x00	; 0
     8aa:	a1 05       	cpc	r26, r1
     8ac:	b1 05       	cpc	r27, r1
     8ae:	21 f0       	breq	.+8      	; 0x8b8 <__pack_f+0xbe>
     8b0:	81 e0       	ldi	r24, 0x01	; 1
     8b2:	90 e0       	ldi	r25, 0x00	; 0
     8b4:	a0 e0       	ldi	r26, 0x00	; 0
     8b6:	b0 e0       	ldi	r27, 0x00	; 0
     8b8:	9a 01       	movw	r18, r20
     8ba:	ab 01       	movw	r20, r22
     8bc:	28 2b       	or	r18, r24
     8be:	39 2b       	or	r19, r25
     8c0:	4a 2b       	or	r20, r26
     8c2:	5b 2b       	or	r21, r27
     8c4:	da 01       	movw	r26, r20
     8c6:	c9 01       	movw	r24, r18
     8c8:	8f 77       	andi	r24, 0x7F	; 127
     8ca:	90 70       	andi	r25, 0x00	; 0
     8cc:	a0 70       	andi	r26, 0x00	; 0
     8ce:	b0 70       	andi	r27, 0x00	; 0
     8d0:	80 34       	cpi	r24, 0x40	; 64
     8d2:	91 05       	cpc	r25, r1
     8d4:	a1 05       	cpc	r26, r1
     8d6:	b1 05       	cpc	r27, r1
     8d8:	39 f4       	brne	.+14     	; 0x8e8 <__pack_f+0xee>
     8da:	27 ff       	sbrs	r18, 7
     8dc:	09 c0       	rjmp	.+18     	; 0x8f0 <__pack_f+0xf6>
     8de:	20 5c       	subi	r18, 0xC0	; 192
     8e0:	3f 4f       	sbci	r19, 0xFF	; 255
     8e2:	4f 4f       	sbci	r20, 0xFF	; 255
     8e4:	5f 4f       	sbci	r21, 0xFF	; 255
     8e6:	04 c0       	rjmp	.+8      	; 0x8f0 <__pack_f+0xf6>
     8e8:	21 5c       	subi	r18, 0xC1	; 193
     8ea:	3f 4f       	sbci	r19, 0xFF	; 255
     8ec:	4f 4f       	sbci	r20, 0xFF	; 255
     8ee:	5f 4f       	sbci	r21, 0xFF	; 255
     8f0:	e0 e0       	ldi	r30, 0x00	; 0
     8f2:	f0 e0       	ldi	r31, 0x00	; 0
     8f4:	20 30       	cpi	r18, 0x00	; 0
     8f6:	a0 e0       	ldi	r26, 0x00	; 0
     8f8:	3a 07       	cpc	r19, r26
     8fa:	a0 e0       	ldi	r26, 0x00	; 0
     8fc:	4a 07       	cpc	r20, r26
     8fe:	a0 e4       	ldi	r26, 0x40	; 64
     900:	5a 07       	cpc	r21, r26
     902:	10 f0       	brcs	.+4      	; 0x908 <__pack_f+0x10e>
     904:	e1 e0       	ldi	r30, 0x01	; 1
     906:	f0 e0       	ldi	r31, 0x00	; 0
     908:	79 01       	movw	r14, r18
     90a:	8a 01       	movw	r16, r20
     90c:	27 c0       	rjmp	.+78     	; 0x95c <__pack_f+0x162>
     90e:	60 38       	cpi	r22, 0x80	; 128
     910:	71 05       	cpc	r23, r1
     912:	64 f5       	brge	.+88     	; 0x96c <__pack_f+0x172>
     914:	fb 01       	movw	r30, r22
     916:	e1 58       	subi	r30, 0x81	; 129
     918:	ff 4f       	sbci	r31, 0xFF	; 255
     91a:	d8 01       	movw	r26, r16
     91c:	c7 01       	movw	r24, r14
     91e:	8f 77       	andi	r24, 0x7F	; 127
     920:	90 70       	andi	r25, 0x00	; 0
     922:	a0 70       	andi	r26, 0x00	; 0
     924:	b0 70       	andi	r27, 0x00	; 0
     926:	80 34       	cpi	r24, 0x40	; 64
     928:	91 05       	cpc	r25, r1
     92a:	a1 05       	cpc	r26, r1
     92c:	b1 05       	cpc	r27, r1
     92e:	39 f4       	brne	.+14     	; 0x93e <__pack_f+0x144>
     930:	e7 fe       	sbrs	r14, 7
     932:	0d c0       	rjmp	.+26     	; 0x94e <__pack_f+0x154>
     934:	80 e4       	ldi	r24, 0x40	; 64
     936:	90 e0       	ldi	r25, 0x00	; 0
     938:	a0 e0       	ldi	r26, 0x00	; 0
     93a:	b0 e0       	ldi	r27, 0x00	; 0
     93c:	04 c0       	rjmp	.+8      	; 0x946 <__pack_f+0x14c>
     93e:	8f e3       	ldi	r24, 0x3F	; 63
     940:	90 e0       	ldi	r25, 0x00	; 0
     942:	a0 e0       	ldi	r26, 0x00	; 0
     944:	b0 e0       	ldi	r27, 0x00	; 0
     946:	e8 0e       	add	r14, r24
     948:	f9 1e       	adc	r15, r25
     94a:	0a 1f       	adc	r16, r26
     94c:	1b 1f       	adc	r17, r27
     94e:	17 ff       	sbrs	r17, 7
     950:	05 c0       	rjmp	.+10     	; 0x95c <__pack_f+0x162>
     952:	16 95       	lsr	r17
     954:	07 95       	ror	r16
     956:	f7 94       	ror	r15
     958:	e7 94       	ror	r14
     95a:	31 96       	adiw	r30, 0x01	; 1
     95c:	87 e0       	ldi	r24, 0x07	; 7
     95e:	16 95       	lsr	r17
     960:	07 95       	ror	r16
     962:	f7 94       	ror	r15
     964:	e7 94       	ror	r14
     966:	8a 95       	dec	r24
     968:	d1 f7       	brne	.-12     	; 0x95e <__pack_f+0x164>
     96a:	05 c0       	rjmp	.+10     	; 0x976 <__pack_f+0x17c>
     96c:	ee 24       	eor	r14, r14
     96e:	ff 24       	eor	r15, r15
     970:	87 01       	movw	r16, r14
     972:	ef ef       	ldi	r30, 0xFF	; 255
     974:	f0 e0       	ldi	r31, 0x00	; 0
     976:	6e 2f       	mov	r22, r30
     978:	67 95       	ror	r22
     97a:	66 27       	eor	r22, r22
     97c:	67 95       	ror	r22
     97e:	90 2f       	mov	r25, r16
     980:	9f 77       	andi	r25, 0x7F	; 127
     982:	d7 94       	ror	r13
     984:	dd 24       	eor	r13, r13
     986:	d7 94       	ror	r13
     988:	8e 2f       	mov	r24, r30
     98a:	86 95       	lsr	r24
     98c:	49 2f       	mov	r20, r25
     98e:	46 2b       	or	r20, r22
     990:	58 2f       	mov	r21, r24
     992:	5d 29       	or	r21, r13
     994:	b7 01       	movw	r22, r14
     996:	ca 01       	movw	r24, r20
     998:	1f 91       	pop	r17
     99a:	0f 91       	pop	r16
     99c:	ff 90       	pop	r15
     99e:	ef 90       	pop	r14
     9a0:	df 90       	pop	r13
     9a2:	08 95       	ret

000009a4 <__unpack_f>:
     9a4:	fc 01       	movw	r30, r24
     9a6:	db 01       	movw	r26, r22
     9a8:	40 81       	ld	r20, Z
     9aa:	51 81       	ldd	r21, Z+1	; 0x01
     9ac:	22 81       	ldd	r18, Z+2	; 0x02
     9ae:	62 2f       	mov	r22, r18
     9b0:	6f 77       	andi	r22, 0x7F	; 127
     9b2:	70 e0       	ldi	r23, 0x00	; 0
     9b4:	22 1f       	adc	r18, r18
     9b6:	22 27       	eor	r18, r18
     9b8:	22 1f       	adc	r18, r18
     9ba:	93 81       	ldd	r25, Z+3	; 0x03
     9bc:	89 2f       	mov	r24, r25
     9be:	88 0f       	add	r24, r24
     9c0:	82 2b       	or	r24, r18
     9c2:	28 2f       	mov	r18, r24
     9c4:	30 e0       	ldi	r19, 0x00	; 0
     9c6:	99 1f       	adc	r25, r25
     9c8:	99 27       	eor	r25, r25
     9ca:	99 1f       	adc	r25, r25
     9cc:	11 96       	adiw	r26, 0x01	; 1
     9ce:	9c 93       	st	X, r25
     9d0:	11 97       	sbiw	r26, 0x01	; 1
     9d2:	21 15       	cp	r18, r1
     9d4:	31 05       	cpc	r19, r1
     9d6:	a9 f5       	brne	.+106    	; 0xa42 <__unpack_f+0x9e>
     9d8:	41 15       	cp	r20, r1
     9da:	51 05       	cpc	r21, r1
     9dc:	61 05       	cpc	r22, r1
     9de:	71 05       	cpc	r23, r1
     9e0:	11 f4       	brne	.+4      	; 0x9e6 <__unpack_f+0x42>
     9e2:	82 e0       	ldi	r24, 0x02	; 2
     9e4:	37 c0       	rjmp	.+110    	; 0xa54 <__unpack_f+0xb0>
     9e6:	82 e8       	ldi	r24, 0x82	; 130
     9e8:	9f ef       	ldi	r25, 0xFF	; 255
     9ea:	13 96       	adiw	r26, 0x03	; 3
     9ec:	9c 93       	st	X, r25
     9ee:	8e 93       	st	-X, r24
     9f0:	12 97       	sbiw	r26, 0x02	; 2
     9f2:	9a 01       	movw	r18, r20
     9f4:	ab 01       	movw	r20, r22
     9f6:	67 e0       	ldi	r22, 0x07	; 7
     9f8:	22 0f       	add	r18, r18
     9fa:	33 1f       	adc	r19, r19
     9fc:	44 1f       	adc	r20, r20
     9fe:	55 1f       	adc	r21, r21
     a00:	6a 95       	dec	r22
     a02:	d1 f7       	brne	.-12     	; 0x9f8 <__unpack_f+0x54>
     a04:	83 e0       	ldi	r24, 0x03	; 3
     a06:	8c 93       	st	X, r24
     a08:	0d c0       	rjmp	.+26     	; 0xa24 <__unpack_f+0x80>
     a0a:	22 0f       	add	r18, r18
     a0c:	33 1f       	adc	r19, r19
     a0e:	44 1f       	adc	r20, r20
     a10:	55 1f       	adc	r21, r21
     a12:	12 96       	adiw	r26, 0x02	; 2
     a14:	8d 91       	ld	r24, X+
     a16:	9c 91       	ld	r25, X
     a18:	13 97       	sbiw	r26, 0x03	; 3
     a1a:	01 97       	sbiw	r24, 0x01	; 1
     a1c:	13 96       	adiw	r26, 0x03	; 3
     a1e:	9c 93       	st	X, r25
     a20:	8e 93       	st	-X, r24
     a22:	12 97       	sbiw	r26, 0x02	; 2
     a24:	20 30       	cpi	r18, 0x00	; 0
     a26:	80 e0       	ldi	r24, 0x00	; 0
     a28:	38 07       	cpc	r19, r24
     a2a:	80 e0       	ldi	r24, 0x00	; 0
     a2c:	48 07       	cpc	r20, r24
     a2e:	80 e4       	ldi	r24, 0x40	; 64
     a30:	58 07       	cpc	r21, r24
     a32:	58 f3       	brcs	.-42     	; 0xa0a <__unpack_f+0x66>
     a34:	14 96       	adiw	r26, 0x04	; 4
     a36:	2d 93       	st	X+, r18
     a38:	3d 93       	st	X+, r19
     a3a:	4d 93       	st	X+, r20
     a3c:	5c 93       	st	X, r21
     a3e:	17 97       	sbiw	r26, 0x07	; 7
     a40:	08 95       	ret
     a42:	2f 3f       	cpi	r18, 0xFF	; 255
     a44:	31 05       	cpc	r19, r1
     a46:	79 f4       	brne	.+30     	; 0xa66 <__unpack_f+0xc2>
     a48:	41 15       	cp	r20, r1
     a4a:	51 05       	cpc	r21, r1
     a4c:	61 05       	cpc	r22, r1
     a4e:	71 05       	cpc	r23, r1
     a50:	19 f4       	brne	.+6      	; 0xa58 <__unpack_f+0xb4>
     a52:	84 e0       	ldi	r24, 0x04	; 4
     a54:	8c 93       	st	X, r24
     a56:	08 95       	ret
     a58:	64 ff       	sbrs	r22, 4
     a5a:	03 c0       	rjmp	.+6      	; 0xa62 <__unpack_f+0xbe>
     a5c:	81 e0       	ldi	r24, 0x01	; 1
     a5e:	8c 93       	st	X, r24
     a60:	12 c0       	rjmp	.+36     	; 0xa86 <__unpack_f+0xe2>
     a62:	1c 92       	st	X, r1
     a64:	10 c0       	rjmp	.+32     	; 0xa86 <__unpack_f+0xe2>
     a66:	2f 57       	subi	r18, 0x7F	; 127
     a68:	30 40       	sbci	r19, 0x00	; 0
     a6a:	13 96       	adiw	r26, 0x03	; 3
     a6c:	3c 93       	st	X, r19
     a6e:	2e 93       	st	-X, r18
     a70:	12 97       	sbiw	r26, 0x02	; 2
     a72:	83 e0       	ldi	r24, 0x03	; 3
     a74:	8c 93       	st	X, r24
     a76:	87 e0       	ldi	r24, 0x07	; 7
     a78:	44 0f       	add	r20, r20
     a7a:	55 1f       	adc	r21, r21
     a7c:	66 1f       	adc	r22, r22
     a7e:	77 1f       	adc	r23, r23
     a80:	8a 95       	dec	r24
     a82:	d1 f7       	brne	.-12     	; 0xa78 <__unpack_f+0xd4>
     a84:	70 64       	ori	r23, 0x40	; 64
     a86:	14 96       	adiw	r26, 0x04	; 4
     a88:	4d 93       	st	X+, r20
     a8a:	5d 93       	st	X+, r21
     a8c:	6d 93       	st	X+, r22
     a8e:	7c 93       	st	X, r23
     a90:	17 97       	sbiw	r26, 0x07	; 7
     a92:	08 95       	ret

00000a94 <__fpcmp_parts_f>:
     a94:	1f 93       	push	r17
     a96:	dc 01       	movw	r26, r24
     a98:	fb 01       	movw	r30, r22
     a9a:	9c 91       	ld	r25, X
     a9c:	92 30       	cpi	r25, 0x02	; 2
     a9e:	08 f4       	brcc	.+2      	; 0xaa2 <__fpcmp_parts_f+0xe>
     aa0:	47 c0       	rjmp	.+142    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aa2:	80 81       	ld	r24, Z
     aa4:	82 30       	cpi	r24, 0x02	; 2
     aa6:	08 f4       	brcc	.+2      	; 0xaaa <__fpcmp_parts_f+0x16>
     aa8:	43 c0       	rjmp	.+134    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aaa:	94 30       	cpi	r25, 0x04	; 4
     aac:	51 f4       	brne	.+20     	; 0xac2 <__fpcmp_parts_f+0x2e>
     aae:	11 96       	adiw	r26, 0x01	; 1
     ab0:	1c 91       	ld	r17, X
     ab2:	84 30       	cpi	r24, 0x04	; 4
     ab4:	99 f5       	brne	.+102    	; 0xb1c <__fpcmp_parts_f+0x88>
     ab6:	81 81       	ldd	r24, Z+1	; 0x01
     ab8:	68 2f       	mov	r22, r24
     aba:	70 e0       	ldi	r23, 0x00	; 0
     abc:	61 1b       	sub	r22, r17
     abe:	71 09       	sbc	r23, r1
     ac0:	3f c0       	rjmp	.+126    	; 0xb40 <__fpcmp_parts_f+0xac>
     ac2:	84 30       	cpi	r24, 0x04	; 4
     ac4:	21 f0       	breq	.+8      	; 0xace <__fpcmp_parts_f+0x3a>
     ac6:	92 30       	cpi	r25, 0x02	; 2
     ac8:	31 f4       	brne	.+12     	; 0xad6 <__fpcmp_parts_f+0x42>
     aca:	82 30       	cpi	r24, 0x02	; 2
     acc:	b9 f1       	breq	.+110    	; 0xb3c <__fpcmp_parts_f+0xa8>
     ace:	81 81       	ldd	r24, Z+1	; 0x01
     ad0:	88 23       	and	r24, r24
     ad2:	89 f1       	breq	.+98     	; 0xb36 <__fpcmp_parts_f+0xa2>
     ad4:	2d c0       	rjmp	.+90     	; 0xb30 <__fpcmp_parts_f+0x9c>
     ad6:	11 96       	adiw	r26, 0x01	; 1
     ad8:	1c 91       	ld	r17, X
     ada:	11 97       	sbiw	r26, 0x01	; 1
     adc:	82 30       	cpi	r24, 0x02	; 2
     ade:	f1 f0       	breq	.+60     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae0:	81 81       	ldd	r24, Z+1	; 0x01
     ae2:	18 17       	cp	r17, r24
     ae4:	d9 f4       	brne	.+54     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae6:	12 96       	adiw	r26, 0x02	; 2
     ae8:	2d 91       	ld	r18, X+
     aea:	3c 91       	ld	r19, X
     aec:	13 97       	sbiw	r26, 0x03	; 3
     aee:	82 81       	ldd	r24, Z+2	; 0x02
     af0:	93 81       	ldd	r25, Z+3	; 0x03
     af2:	82 17       	cp	r24, r18
     af4:	93 07       	cpc	r25, r19
     af6:	94 f0       	brlt	.+36     	; 0xb1c <__fpcmp_parts_f+0x88>
     af8:	28 17       	cp	r18, r24
     afa:	39 07       	cpc	r19, r25
     afc:	bc f0       	brlt	.+46     	; 0xb2c <__fpcmp_parts_f+0x98>
     afe:	14 96       	adiw	r26, 0x04	; 4
     b00:	8d 91       	ld	r24, X+
     b02:	9d 91       	ld	r25, X+
     b04:	0d 90       	ld	r0, X+
     b06:	bc 91       	ld	r27, X
     b08:	a0 2d       	mov	r26, r0
     b0a:	24 81       	ldd	r18, Z+4	; 0x04
     b0c:	35 81       	ldd	r19, Z+5	; 0x05
     b0e:	46 81       	ldd	r20, Z+6	; 0x06
     b10:	57 81       	ldd	r21, Z+7	; 0x07
     b12:	28 17       	cp	r18, r24
     b14:	39 07       	cpc	r19, r25
     b16:	4a 07       	cpc	r20, r26
     b18:	5b 07       	cpc	r21, r27
     b1a:	18 f4       	brcc	.+6      	; 0xb22 <__fpcmp_parts_f+0x8e>
     b1c:	11 23       	and	r17, r17
     b1e:	41 f0       	breq	.+16     	; 0xb30 <__fpcmp_parts_f+0x9c>
     b20:	0a c0       	rjmp	.+20     	; 0xb36 <__fpcmp_parts_f+0xa2>
     b22:	82 17       	cp	r24, r18
     b24:	93 07       	cpc	r25, r19
     b26:	a4 07       	cpc	r26, r20
     b28:	b5 07       	cpc	r27, r21
     b2a:	40 f4       	brcc	.+16     	; 0xb3c <__fpcmp_parts_f+0xa8>
     b2c:	11 23       	and	r17, r17
     b2e:	19 f0       	breq	.+6      	; 0xb36 <__fpcmp_parts_f+0xa2>
     b30:	61 e0       	ldi	r22, 0x01	; 1
     b32:	70 e0       	ldi	r23, 0x00	; 0
     b34:	05 c0       	rjmp	.+10     	; 0xb40 <__fpcmp_parts_f+0xac>
     b36:	6f ef       	ldi	r22, 0xFF	; 255
     b38:	7f ef       	ldi	r23, 0xFF	; 255
     b3a:	02 c0       	rjmp	.+4      	; 0xb40 <__fpcmp_parts_f+0xac>
     b3c:	60 e0       	ldi	r22, 0x00	; 0
     b3e:	70 e0       	ldi	r23, 0x00	; 0
     b40:	cb 01       	movw	r24, r22
     b42:	1f 91       	pop	r17
     b44:	08 95       	ret

00000b46 <GPIO_Set_pin_output>:
#include "gpio.h"

uint8 GPIO_Set_pin_output(uint8 a_port,uint8 a_pin) {
     b46:	df 93       	push	r29
     b48:	cf 93       	push	r28
     b4a:	00 d0       	rcall	.+0      	; 0xb4c <GPIO_Set_pin_output+0x6>
     b4c:	00 d0       	rcall	.+0      	; 0xb4e <GPIO_Set_pin_output+0x8>
     b4e:	0f 92       	push	r0
     b50:	cd b7       	in	r28, 0x3d	; 61
     b52:	de b7       	in	r29, 0x3e	; 62
     b54:	89 83       	std	Y+1, r24	; 0x01
     b56:	6a 83       	std	Y+2, r22	; 0x02
	switch(a_port){
     b58:	89 81       	ldd	r24, Y+1	; 0x01
     b5a:	28 2f       	mov	r18, r24
     b5c:	30 e0       	ldi	r19, 0x00	; 0
     b5e:	3d 83       	std	Y+5, r19	; 0x05
     b60:	2c 83       	std	Y+4, r18	; 0x04
     b62:	8c 81       	ldd	r24, Y+4	; 0x04
     b64:	9d 81       	ldd	r25, Y+5	; 0x05
     b66:	82 30       	cpi	r24, 0x02	; 2
     b68:	91 05       	cpc	r25, r1
     b6a:	09 f4       	brne	.+2      	; 0xb6e <GPIO_Set_pin_output+0x28>
     b6c:	3f c0       	rjmp	.+126    	; 0xbec <GPIO_Set_pin_output+0xa6>
     b6e:	2c 81       	ldd	r18, Y+4	; 0x04
     b70:	3d 81       	ldd	r19, Y+5	; 0x05
     b72:	23 30       	cpi	r18, 0x03	; 3
     b74:	31 05       	cpc	r19, r1
     b76:	34 f4       	brge	.+12     	; 0xb84 <GPIO_Set_pin_output+0x3e>
     b78:	8c 81       	ldd	r24, Y+4	; 0x04
     b7a:	9d 81       	ldd	r25, Y+5	; 0x05
     b7c:	81 30       	cpi	r24, 0x01	; 1
     b7e:	91 05       	cpc	r25, r1
     b80:	71 f0       	breq	.+28     	; 0xb9e <GPIO_Set_pin_output+0x58>
     b82:	a9 c0       	rjmp	.+338    	; 0xcd6 <GPIO_Set_pin_output+0x190>
     b84:	2c 81       	ldd	r18, Y+4	; 0x04
     b86:	3d 81       	ldd	r19, Y+5	; 0x05
     b88:	23 30       	cpi	r18, 0x03	; 3
     b8a:	31 05       	cpc	r19, r1
     b8c:	09 f4       	brne	.+2      	; 0xb90 <GPIO_Set_pin_output+0x4a>
     b8e:	55 c0       	rjmp	.+170    	; 0xc3a <GPIO_Set_pin_output+0xf4>
     b90:	8c 81       	ldd	r24, Y+4	; 0x04
     b92:	9d 81       	ldd	r25, Y+5	; 0x05
     b94:	84 30       	cpi	r24, 0x04	; 4
     b96:	91 05       	cpc	r25, r1
     b98:	09 f4       	brne	.+2      	; 0xb9c <GPIO_Set_pin_output+0x56>
     b9a:	76 c0       	rjmp	.+236    	; 0xc88 <GPIO_Set_pin_output+0x142>
     b9c:	9c c0       	rjmp	.+312    	; 0xcd6 <GPIO_Set_pin_output+0x190>
	case PortA:
		SET_BIT(DDRA,a_pin);
     b9e:	aa e3       	ldi	r26, 0x3A	; 58
     ba0:	b0 e0       	ldi	r27, 0x00	; 0
     ba2:	ea e3       	ldi	r30, 0x3A	; 58
     ba4:	f0 e0       	ldi	r31, 0x00	; 0
     ba6:	80 81       	ld	r24, Z
     ba8:	48 2f       	mov	r20, r24
     baa:	8a 81       	ldd	r24, Y+2	; 0x02
     bac:	28 2f       	mov	r18, r24
     bae:	30 e0       	ldi	r19, 0x00	; 0
     bb0:	81 e0       	ldi	r24, 0x01	; 1
     bb2:	90 e0       	ldi	r25, 0x00	; 0
     bb4:	02 c0       	rjmp	.+4      	; 0xbba <GPIO_Set_pin_output+0x74>
     bb6:	88 0f       	add	r24, r24
     bb8:	99 1f       	adc	r25, r25
     bba:	2a 95       	dec	r18
     bbc:	e2 f7       	brpl	.-8      	; 0xbb6 <GPIO_Set_pin_output+0x70>
     bbe:	84 2b       	or	r24, r20
     bc0:	8c 93       	st	X, r24
		CLEAR_BIT(PORTA,a_pin);
     bc2:	ab e3       	ldi	r26, 0x3B	; 59
     bc4:	b0 e0       	ldi	r27, 0x00	; 0
     bc6:	eb e3       	ldi	r30, 0x3B	; 59
     bc8:	f0 e0       	ldi	r31, 0x00	; 0
     bca:	80 81       	ld	r24, Z
     bcc:	48 2f       	mov	r20, r24
     bce:	8a 81       	ldd	r24, Y+2	; 0x02
     bd0:	28 2f       	mov	r18, r24
     bd2:	30 e0       	ldi	r19, 0x00	; 0
     bd4:	81 e0       	ldi	r24, 0x01	; 1
     bd6:	90 e0       	ldi	r25, 0x00	; 0
     bd8:	02 2e       	mov	r0, r18
     bda:	02 c0       	rjmp	.+4      	; 0xbe0 <GPIO_Set_pin_output+0x9a>
     bdc:	88 0f       	add	r24, r24
     bde:	99 1f       	adc	r25, r25
     be0:	0a 94       	dec	r0
     be2:	e2 f7       	brpl	.-8      	; 0xbdc <GPIO_Set_pin_output+0x96>
     be4:	80 95       	com	r24
     be6:	84 23       	and	r24, r20
     be8:	8c 93       	st	X, r24
     bea:	78 c0       	rjmp	.+240    	; 0xcdc <GPIO_Set_pin_output+0x196>
		break;
	case PortB:
			SET_BIT(DDRB,a_pin);
     bec:	a7 e3       	ldi	r26, 0x37	; 55
     bee:	b0 e0       	ldi	r27, 0x00	; 0
     bf0:	e7 e3       	ldi	r30, 0x37	; 55
     bf2:	f0 e0       	ldi	r31, 0x00	; 0
     bf4:	80 81       	ld	r24, Z
     bf6:	48 2f       	mov	r20, r24
     bf8:	8a 81       	ldd	r24, Y+2	; 0x02
     bfa:	28 2f       	mov	r18, r24
     bfc:	30 e0       	ldi	r19, 0x00	; 0
     bfe:	81 e0       	ldi	r24, 0x01	; 1
     c00:	90 e0       	ldi	r25, 0x00	; 0
     c02:	02 c0       	rjmp	.+4      	; 0xc08 <GPIO_Set_pin_output+0xc2>
     c04:	88 0f       	add	r24, r24
     c06:	99 1f       	adc	r25, r25
     c08:	2a 95       	dec	r18
     c0a:	e2 f7       	brpl	.-8      	; 0xc04 <GPIO_Set_pin_output+0xbe>
     c0c:	84 2b       	or	r24, r20
     c0e:	8c 93       	st	X, r24
			CLEAR_BIT(PORTB,a_pin);
     c10:	a8 e3       	ldi	r26, 0x38	; 56
     c12:	b0 e0       	ldi	r27, 0x00	; 0
     c14:	e8 e3       	ldi	r30, 0x38	; 56
     c16:	f0 e0       	ldi	r31, 0x00	; 0
     c18:	80 81       	ld	r24, Z
     c1a:	48 2f       	mov	r20, r24
     c1c:	8a 81       	ldd	r24, Y+2	; 0x02
     c1e:	28 2f       	mov	r18, r24
     c20:	30 e0       	ldi	r19, 0x00	; 0
     c22:	81 e0       	ldi	r24, 0x01	; 1
     c24:	90 e0       	ldi	r25, 0x00	; 0
     c26:	02 2e       	mov	r0, r18
     c28:	02 c0       	rjmp	.+4      	; 0xc2e <GPIO_Set_pin_output+0xe8>
     c2a:	88 0f       	add	r24, r24
     c2c:	99 1f       	adc	r25, r25
     c2e:	0a 94       	dec	r0
     c30:	e2 f7       	brpl	.-8      	; 0xc2a <GPIO_Set_pin_output+0xe4>
     c32:	80 95       	com	r24
     c34:	84 23       	and	r24, r20
     c36:	8c 93       	st	X, r24
     c38:	51 c0       	rjmp	.+162    	; 0xcdc <GPIO_Set_pin_output+0x196>
			break;
	case PortC:
			SET_BIT(DDRC,a_pin);
     c3a:	a4 e3       	ldi	r26, 0x34	; 52
     c3c:	b0 e0       	ldi	r27, 0x00	; 0
     c3e:	e4 e3       	ldi	r30, 0x34	; 52
     c40:	f0 e0       	ldi	r31, 0x00	; 0
     c42:	80 81       	ld	r24, Z
     c44:	48 2f       	mov	r20, r24
     c46:	8a 81       	ldd	r24, Y+2	; 0x02
     c48:	28 2f       	mov	r18, r24
     c4a:	30 e0       	ldi	r19, 0x00	; 0
     c4c:	81 e0       	ldi	r24, 0x01	; 1
     c4e:	90 e0       	ldi	r25, 0x00	; 0
     c50:	02 c0       	rjmp	.+4      	; 0xc56 <GPIO_Set_pin_output+0x110>
     c52:	88 0f       	add	r24, r24
     c54:	99 1f       	adc	r25, r25
     c56:	2a 95       	dec	r18
     c58:	e2 f7       	brpl	.-8      	; 0xc52 <GPIO_Set_pin_output+0x10c>
     c5a:	84 2b       	or	r24, r20
     c5c:	8c 93       	st	X, r24
			CLEAR_BIT(PORTC,a_pin);
     c5e:	a5 e3       	ldi	r26, 0x35	; 53
     c60:	b0 e0       	ldi	r27, 0x00	; 0
     c62:	e5 e3       	ldi	r30, 0x35	; 53
     c64:	f0 e0       	ldi	r31, 0x00	; 0
     c66:	80 81       	ld	r24, Z
     c68:	48 2f       	mov	r20, r24
     c6a:	8a 81       	ldd	r24, Y+2	; 0x02
     c6c:	28 2f       	mov	r18, r24
     c6e:	30 e0       	ldi	r19, 0x00	; 0
     c70:	81 e0       	ldi	r24, 0x01	; 1
     c72:	90 e0       	ldi	r25, 0x00	; 0
     c74:	02 2e       	mov	r0, r18
     c76:	02 c0       	rjmp	.+4      	; 0xc7c <GPIO_Set_pin_output+0x136>
     c78:	88 0f       	add	r24, r24
     c7a:	99 1f       	adc	r25, r25
     c7c:	0a 94       	dec	r0
     c7e:	e2 f7       	brpl	.-8      	; 0xc78 <GPIO_Set_pin_output+0x132>
     c80:	80 95       	com	r24
     c82:	84 23       	and	r24, r20
     c84:	8c 93       	st	X, r24
     c86:	2a c0       	rjmp	.+84     	; 0xcdc <GPIO_Set_pin_output+0x196>
			break;
	case PortD:
			SET_BIT(DDRD,a_pin);
     c88:	a1 e3       	ldi	r26, 0x31	; 49
     c8a:	b0 e0       	ldi	r27, 0x00	; 0
     c8c:	e1 e3       	ldi	r30, 0x31	; 49
     c8e:	f0 e0       	ldi	r31, 0x00	; 0
     c90:	80 81       	ld	r24, Z
     c92:	48 2f       	mov	r20, r24
     c94:	8a 81       	ldd	r24, Y+2	; 0x02
     c96:	28 2f       	mov	r18, r24
     c98:	30 e0       	ldi	r19, 0x00	; 0
     c9a:	81 e0       	ldi	r24, 0x01	; 1
     c9c:	90 e0       	ldi	r25, 0x00	; 0
     c9e:	02 c0       	rjmp	.+4      	; 0xca4 <GPIO_Set_pin_output+0x15e>
     ca0:	88 0f       	add	r24, r24
     ca2:	99 1f       	adc	r25, r25
     ca4:	2a 95       	dec	r18
     ca6:	e2 f7       	brpl	.-8      	; 0xca0 <GPIO_Set_pin_output+0x15a>
     ca8:	84 2b       	or	r24, r20
     caa:	8c 93       	st	X, r24
			CLEAR_BIT(PORTD,a_pin);
     cac:	a2 e3       	ldi	r26, 0x32	; 50
     cae:	b0 e0       	ldi	r27, 0x00	; 0
     cb0:	e2 e3       	ldi	r30, 0x32	; 50
     cb2:	f0 e0       	ldi	r31, 0x00	; 0
     cb4:	80 81       	ld	r24, Z
     cb6:	48 2f       	mov	r20, r24
     cb8:	8a 81       	ldd	r24, Y+2	; 0x02
     cba:	28 2f       	mov	r18, r24
     cbc:	30 e0       	ldi	r19, 0x00	; 0
     cbe:	81 e0       	ldi	r24, 0x01	; 1
     cc0:	90 e0       	ldi	r25, 0x00	; 0
     cc2:	02 2e       	mov	r0, r18
     cc4:	02 c0       	rjmp	.+4      	; 0xcca <GPIO_Set_pin_output+0x184>
     cc6:	88 0f       	add	r24, r24
     cc8:	99 1f       	adc	r25, r25
     cca:	0a 94       	dec	r0
     ccc:	e2 f7       	brpl	.-8      	; 0xcc6 <GPIO_Set_pin_output+0x180>
     cce:	80 95       	com	r24
     cd0:	84 23       	and	r24, r20
     cd2:	8c 93       	st	X, r24
     cd4:	03 c0       	rjmp	.+6      	; 0xcdc <GPIO_Set_pin_output+0x196>
			break;
	default:
		return E_NOT_OK;
     cd6:	91 e0       	ldi	r25, 0x01	; 1
     cd8:	9b 83       	std	Y+3, r25	; 0x03
     cda:	01 c0       	rjmp	.+2      	; 0xcde <GPIO_Set_pin_output+0x198>
	}
	return E_OK;
     cdc:	1b 82       	std	Y+3, r1	; 0x03
     cde:	8b 81       	ldd	r24, Y+3	; 0x03
}
     ce0:	0f 90       	pop	r0
     ce2:	0f 90       	pop	r0
     ce4:	0f 90       	pop	r0
     ce6:	0f 90       	pop	r0
     ce8:	0f 90       	pop	r0
     cea:	cf 91       	pop	r28
     cec:	df 91       	pop	r29
     cee:	08 95       	ret

00000cf0 <GPIO_Set_pin_input_float>:
uint8 GPIO_Set_pin_input_float(uint8 a_port,uint8 a_pin) {
     cf0:	df 93       	push	r29
     cf2:	cf 93       	push	r28
     cf4:	00 d0       	rcall	.+0      	; 0xcf6 <GPIO_Set_pin_input_float+0x6>
     cf6:	00 d0       	rcall	.+0      	; 0xcf8 <GPIO_Set_pin_input_float+0x8>
     cf8:	0f 92       	push	r0
     cfa:	cd b7       	in	r28, 0x3d	; 61
     cfc:	de b7       	in	r29, 0x3e	; 62
     cfe:	89 83       	std	Y+1, r24	; 0x01
     d00:	6a 83       	std	Y+2, r22	; 0x02
	switch(a_port){
     d02:	89 81       	ldd	r24, Y+1	; 0x01
     d04:	28 2f       	mov	r18, r24
     d06:	30 e0       	ldi	r19, 0x00	; 0
     d08:	3d 83       	std	Y+5, r19	; 0x05
     d0a:	2c 83       	std	Y+4, r18	; 0x04
     d0c:	8c 81       	ldd	r24, Y+4	; 0x04
     d0e:	9d 81       	ldd	r25, Y+5	; 0x05
     d10:	82 30       	cpi	r24, 0x02	; 2
     d12:	91 05       	cpc	r25, r1
     d14:	61 f1       	breq	.+88     	; 0xd6e <GPIO_Set_pin_input_float+0x7e>
     d16:	2c 81       	ldd	r18, Y+4	; 0x04
     d18:	3d 81       	ldd	r19, Y+5	; 0x05
     d1a:	23 30       	cpi	r18, 0x03	; 3
     d1c:	31 05       	cpc	r19, r1
     d1e:	34 f4       	brge	.+12     	; 0xd2c <GPIO_Set_pin_input_float+0x3c>
     d20:	8c 81       	ldd	r24, Y+4	; 0x04
     d22:	9d 81       	ldd	r25, Y+5	; 0x05
     d24:	81 30       	cpi	r24, 0x01	; 1
     d26:	91 05       	cpc	r25, r1
     d28:	69 f0       	breq	.+26     	; 0xd44 <GPIO_Set_pin_input_float+0x54>
     d2a:	60 c0       	rjmp	.+192    	; 0xdec <GPIO_Set_pin_input_float+0xfc>
     d2c:	2c 81       	ldd	r18, Y+4	; 0x04
     d2e:	3d 81       	ldd	r19, Y+5	; 0x05
     d30:	23 30       	cpi	r18, 0x03	; 3
     d32:	31 05       	cpc	r19, r1
     d34:	89 f1       	breq	.+98     	; 0xd98 <GPIO_Set_pin_input_float+0xa8>
     d36:	8c 81       	ldd	r24, Y+4	; 0x04
     d38:	9d 81       	ldd	r25, Y+5	; 0x05
     d3a:	84 30       	cpi	r24, 0x04	; 4
     d3c:	91 05       	cpc	r25, r1
     d3e:	09 f4       	brne	.+2      	; 0xd42 <GPIO_Set_pin_input_float+0x52>
     d40:	40 c0       	rjmp	.+128    	; 0xdc2 <GPIO_Set_pin_input_float+0xd2>
     d42:	54 c0       	rjmp	.+168    	; 0xdec <GPIO_Set_pin_input_float+0xfc>
		case PortA:
			CLEAR_BIT(DDRA,a_pin);
     d44:	aa e3       	ldi	r26, 0x3A	; 58
     d46:	b0 e0       	ldi	r27, 0x00	; 0
     d48:	ea e3       	ldi	r30, 0x3A	; 58
     d4a:	f0 e0       	ldi	r31, 0x00	; 0
     d4c:	80 81       	ld	r24, Z
     d4e:	48 2f       	mov	r20, r24
     d50:	8a 81       	ldd	r24, Y+2	; 0x02
     d52:	28 2f       	mov	r18, r24
     d54:	30 e0       	ldi	r19, 0x00	; 0
     d56:	81 e0       	ldi	r24, 0x01	; 1
     d58:	90 e0       	ldi	r25, 0x00	; 0
     d5a:	02 2e       	mov	r0, r18
     d5c:	02 c0       	rjmp	.+4      	; 0xd62 <GPIO_Set_pin_input_float+0x72>
     d5e:	88 0f       	add	r24, r24
     d60:	99 1f       	adc	r25, r25
     d62:	0a 94       	dec	r0
     d64:	e2 f7       	brpl	.-8      	; 0xd5e <GPIO_Set_pin_input_float+0x6e>
     d66:	80 95       	com	r24
     d68:	84 23       	and	r24, r20
     d6a:	8c 93       	st	X, r24
     d6c:	42 c0       	rjmp	.+132    	; 0xdf2 <GPIO_Set_pin_input_float+0x102>
			break;
		case PortB:
				CLEAR_BIT(DDRB,a_pin);
     d6e:	a7 e3       	ldi	r26, 0x37	; 55
     d70:	b0 e0       	ldi	r27, 0x00	; 0
     d72:	e7 e3       	ldi	r30, 0x37	; 55
     d74:	f0 e0       	ldi	r31, 0x00	; 0
     d76:	80 81       	ld	r24, Z
     d78:	48 2f       	mov	r20, r24
     d7a:	8a 81       	ldd	r24, Y+2	; 0x02
     d7c:	28 2f       	mov	r18, r24
     d7e:	30 e0       	ldi	r19, 0x00	; 0
     d80:	81 e0       	ldi	r24, 0x01	; 1
     d82:	90 e0       	ldi	r25, 0x00	; 0
     d84:	02 2e       	mov	r0, r18
     d86:	02 c0       	rjmp	.+4      	; 0xd8c <GPIO_Set_pin_input_float+0x9c>
     d88:	88 0f       	add	r24, r24
     d8a:	99 1f       	adc	r25, r25
     d8c:	0a 94       	dec	r0
     d8e:	e2 f7       	brpl	.-8      	; 0xd88 <GPIO_Set_pin_input_float+0x98>
     d90:	80 95       	com	r24
     d92:	84 23       	and	r24, r20
     d94:	8c 93       	st	X, r24
     d96:	2d c0       	rjmp	.+90     	; 0xdf2 <GPIO_Set_pin_input_float+0x102>
				break;
		case PortC:
				CLEAR_BIT(DDRC,a_pin);
     d98:	a4 e3       	ldi	r26, 0x34	; 52
     d9a:	b0 e0       	ldi	r27, 0x00	; 0
     d9c:	e4 e3       	ldi	r30, 0x34	; 52
     d9e:	f0 e0       	ldi	r31, 0x00	; 0
     da0:	80 81       	ld	r24, Z
     da2:	48 2f       	mov	r20, r24
     da4:	8a 81       	ldd	r24, Y+2	; 0x02
     da6:	28 2f       	mov	r18, r24
     da8:	30 e0       	ldi	r19, 0x00	; 0
     daa:	81 e0       	ldi	r24, 0x01	; 1
     dac:	90 e0       	ldi	r25, 0x00	; 0
     dae:	02 2e       	mov	r0, r18
     db0:	02 c0       	rjmp	.+4      	; 0xdb6 <GPIO_Set_pin_input_float+0xc6>
     db2:	88 0f       	add	r24, r24
     db4:	99 1f       	adc	r25, r25
     db6:	0a 94       	dec	r0
     db8:	e2 f7       	brpl	.-8      	; 0xdb2 <GPIO_Set_pin_input_float+0xc2>
     dba:	80 95       	com	r24
     dbc:	84 23       	and	r24, r20
     dbe:	8c 93       	st	X, r24
     dc0:	18 c0       	rjmp	.+48     	; 0xdf2 <GPIO_Set_pin_input_float+0x102>
				break;
		case PortD:
				CLEAR_BIT(DDRD,a_pin);
     dc2:	a1 e3       	ldi	r26, 0x31	; 49
     dc4:	b0 e0       	ldi	r27, 0x00	; 0
     dc6:	e1 e3       	ldi	r30, 0x31	; 49
     dc8:	f0 e0       	ldi	r31, 0x00	; 0
     dca:	80 81       	ld	r24, Z
     dcc:	48 2f       	mov	r20, r24
     dce:	8a 81       	ldd	r24, Y+2	; 0x02
     dd0:	28 2f       	mov	r18, r24
     dd2:	30 e0       	ldi	r19, 0x00	; 0
     dd4:	81 e0       	ldi	r24, 0x01	; 1
     dd6:	90 e0       	ldi	r25, 0x00	; 0
     dd8:	02 2e       	mov	r0, r18
     dda:	02 c0       	rjmp	.+4      	; 0xde0 <GPIO_Set_pin_input_float+0xf0>
     ddc:	88 0f       	add	r24, r24
     dde:	99 1f       	adc	r25, r25
     de0:	0a 94       	dec	r0
     de2:	e2 f7       	brpl	.-8      	; 0xddc <GPIO_Set_pin_input_float+0xec>
     de4:	80 95       	com	r24
     de6:	84 23       	and	r24, r20
     de8:	8c 93       	st	X, r24
     dea:	03 c0       	rjmp	.+6      	; 0xdf2 <GPIO_Set_pin_input_float+0x102>
				break;
		default:
			return E_NOT_OK;
     dec:	91 e0       	ldi	r25, 0x01	; 1
     dee:	9b 83       	std	Y+3, r25	; 0x03
     df0:	01 c0       	rjmp	.+2      	; 0xdf4 <GPIO_Set_pin_input_float+0x104>
		}
	return E_OK;
     df2:	1b 82       	std	Y+3, r1	; 0x03
     df4:	8b 81       	ldd	r24, Y+3	; 0x03
}
     df6:	0f 90       	pop	r0
     df8:	0f 90       	pop	r0
     dfa:	0f 90       	pop	r0
     dfc:	0f 90       	pop	r0
     dfe:	0f 90       	pop	r0
     e00:	cf 91       	pop	r28
     e02:	df 91       	pop	r29
     e04:	08 95       	ret

00000e06 <GPIO_Set_pin_input_pullup>:
uint8 GPIO_Set_pin_input_pullup(uint8 a_port,uint8 a_pin) {
     e06:	df 93       	push	r29
     e08:	cf 93       	push	r28
     e0a:	00 d0       	rcall	.+0      	; 0xe0c <GPIO_Set_pin_input_pullup+0x6>
     e0c:	00 d0       	rcall	.+0      	; 0xe0e <GPIO_Set_pin_input_pullup+0x8>
     e0e:	0f 92       	push	r0
     e10:	cd b7       	in	r28, 0x3d	; 61
     e12:	de b7       	in	r29, 0x3e	; 62
     e14:	89 83       	std	Y+1, r24	; 0x01
     e16:	6a 83       	std	Y+2, r22	; 0x02
	switch(a_port){
     e18:	89 81       	ldd	r24, Y+1	; 0x01
     e1a:	28 2f       	mov	r18, r24
     e1c:	30 e0       	ldi	r19, 0x00	; 0
     e1e:	3d 83       	std	Y+5, r19	; 0x05
     e20:	2c 83       	std	Y+4, r18	; 0x04
     e22:	8c 81       	ldd	r24, Y+4	; 0x04
     e24:	9d 81       	ldd	r25, Y+5	; 0x05
     e26:	82 30       	cpi	r24, 0x02	; 2
     e28:	91 05       	cpc	r25, r1
     e2a:	09 f4       	brne	.+2      	; 0xe2e <GPIO_Set_pin_input_pullup+0x28>
     e2c:	3f c0       	rjmp	.+126    	; 0xeac <GPIO_Set_pin_input_pullup+0xa6>
     e2e:	2c 81       	ldd	r18, Y+4	; 0x04
     e30:	3d 81       	ldd	r19, Y+5	; 0x05
     e32:	23 30       	cpi	r18, 0x03	; 3
     e34:	31 05       	cpc	r19, r1
     e36:	34 f4       	brge	.+12     	; 0xe44 <GPIO_Set_pin_input_pullup+0x3e>
     e38:	8c 81       	ldd	r24, Y+4	; 0x04
     e3a:	9d 81       	ldd	r25, Y+5	; 0x05
     e3c:	81 30       	cpi	r24, 0x01	; 1
     e3e:	91 05       	cpc	r25, r1
     e40:	71 f0       	breq	.+28     	; 0xe5e <GPIO_Set_pin_input_pullup+0x58>
     e42:	a9 c0       	rjmp	.+338    	; 0xf96 <GPIO_Set_pin_input_pullup+0x190>
     e44:	2c 81       	ldd	r18, Y+4	; 0x04
     e46:	3d 81       	ldd	r19, Y+5	; 0x05
     e48:	23 30       	cpi	r18, 0x03	; 3
     e4a:	31 05       	cpc	r19, r1
     e4c:	09 f4       	brne	.+2      	; 0xe50 <GPIO_Set_pin_input_pullup+0x4a>
     e4e:	55 c0       	rjmp	.+170    	; 0xefa <GPIO_Set_pin_input_pullup+0xf4>
     e50:	8c 81       	ldd	r24, Y+4	; 0x04
     e52:	9d 81       	ldd	r25, Y+5	; 0x05
     e54:	84 30       	cpi	r24, 0x04	; 4
     e56:	91 05       	cpc	r25, r1
     e58:	09 f4       	brne	.+2      	; 0xe5c <GPIO_Set_pin_input_pullup+0x56>
     e5a:	76 c0       	rjmp	.+236    	; 0xf48 <GPIO_Set_pin_input_pullup+0x142>
     e5c:	9c c0       	rjmp	.+312    	; 0xf96 <GPIO_Set_pin_input_pullup+0x190>
	case PortA:
		CLEAR_BIT(DDRA,a_pin);
     e5e:	aa e3       	ldi	r26, 0x3A	; 58
     e60:	b0 e0       	ldi	r27, 0x00	; 0
     e62:	ea e3       	ldi	r30, 0x3A	; 58
     e64:	f0 e0       	ldi	r31, 0x00	; 0
     e66:	80 81       	ld	r24, Z
     e68:	48 2f       	mov	r20, r24
     e6a:	8a 81       	ldd	r24, Y+2	; 0x02
     e6c:	28 2f       	mov	r18, r24
     e6e:	30 e0       	ldi	r19, 0x00	; 0
     e70:	81 e0       	ldi	r24, 0x01	; 1
     e72:	90 e0       	ldi	r25, 0x00	; 0
     e74:	02 c0       	rjmp	.+4      	; 0xe7a <GPIO_Set_pin_input_pullup+0x74>
     e76:	88 0f       	add	r24, r24
     e78:	99 1f       	adc	r25, r25
     e7a:	2a 95       	dec	r18
     e7c:	e2 f7       	brpl	.-8      	; 0xe76 <GPIO_Set_pin_input_pullup+0x70>
     e7e:	80 95       	com	r24
     e80:	84 23       	and	r24, r20
     e82:	8c 93       	st	X, r24
		SET_BIT(PORTA,a_pin);
     e84:	ab e3       	ldi	r26, 0x3B	; 59
     e86:	b0 e0       	ldi	r27, 0x00	; 0
     e88:	eb e3       	ldi	r30, 0x3B	; 59
     e8a:	f0 e0       	ldi	r31, 0x00	; 0
     e8c:	80 81       	ld	r24, Z
     e8e:	48 2f       	mov	r20, r24
     e90:	8a 81       	ldd	r24, Y+2	; 0x02
     e92:	28 2f       	mov	r18, r24
     e94:	30 e0       	ldi	r19, 0x00	; 0
     e96:	81 e0       	ldi	r24, 0x01	; 1
     e98:	90 e0       	ldi	r25, 0x00	; 0
     e9a:	02 2e       	mov	r0, r18
     e9c:	02 c0       	rjmp	.+4      	; 0xea2 <GPIO_Set_pin_input_pullup+0x9c>
     e9e:	88 0f       	add	r24, r24
     ea0:	99 1f       	adc	r25, r25
     ea2:	0a 94       	dec	r0
     ea4:	e2 f7       	brpl	.-8      	; 0xe9e <GPIO_Set_pin_input_pullup+0x98>
     ea6:	84 2b       	or	r24, r20
     ea8:	8c 93       	st	X, r24
     eaa:	78 c0       	rjmp	.+240    	; 0xf9c <GPIO_Set_pin_input_pullup+0x196>
		break;
	case PortB:
		CLEAR_BIT(DDRB,a_pin);
     eac:	a7 e3       	ldi	r26, 0x37	; 55
     eae:	b0 e0       	ldi	r27, 0x00	; 0
     eb0:	e7 e3       	ldi	r30, 0x37	; 55
     eb2:	f0 e0       	ldi	r31, 0x00	; 0
     eb4:	80 81       	ld	r24, Z
     eb6:	48 2f       	mov	r20, r24
     eb8:	8a 81       	ldd	r24, Y+2	; 0x02
     eba:	28 2f       	mov	r18, r24
     ebc:	30 e0       	ldi	r19, 0x00	; 0
     ebe:	81 e0       	ldi	r24, 0x01	; 1
     ec0:	90 e0       	ldi	r25, 0x00	; 0
     ec2:	02 c0       	rjmp	.+4      	; 0xec8 <GPIO_Set_pin_input_pullup+0xc2>
     ec4:	88 0f       	add	r24, r24
     ec6:	99 1f       	adc	r25, r25
     ec8:	2a 95       	dec	r18
     eca:	e2 f7       	brpl	.-8      	; 0xec4 <GPIO_Set_pin_input_pullup+0xbe>
     ecc:	80 95       	com	r24
     ece:	84 23       	and	r24, r20
     ed0:	8c 93       	st	X, r24
			SET_BIT(PORTB,a_pin);
     ed2:	a8 e3       	ldi	r26, 0x38	; 56
     ed4:	b0 e0       	ldi	r27, 0x00	; 0
     ed6:	e8 e3       	ldi	r30, 0x38	; 56
     ed8:	f0 e0       	ldi	r31, 0x00	; 0
     eda:	80 81       	ld	r24, Z
     edc:	48 2f       	mov	r20, r24
     ede:	8a 81       	ldd	r24, Y+2	; 0x02
     ee0:	28 2f       	mov	r18, r24
     ee2:	30 e0       	ldi	r19, 0x00	; 0
     ee4:	81 e0       	ldi	r24, 0x01	; 1
     ee6:	90 e0       	ldi	r25, 0x00	; 0
     ee8:	02 2e       	mov	r0, r18
     eea:	02 c0       	rjmp	.+4      	; 0xef0 <GPIO_Set_pin_input_pullup+0xea>
     eec:	88 0f       	add	r24, r24
     eee:	99 1f       	adc	r25, r25
     ef0:	0a 94       	dec	r0
     ef2:	e2 f7       	brpl	.-8      	; 0xeec <GPIO_Set_pin_input_pullup+0xe6>
     ef4:	84 2b       	or	r24, r20
     ef6:	8c 93       	st	X, r24
     ef8:	51 c0       	rjmp	.+162    	; 0xf9c <GPIO_Set_pin_input_pullup+0x196>
			break;
	case PortC:
		CLEAR_BIT(DDRC,a_pin);
     efa:	a4 e3       	ldi	r26, 0x34	; 52
     efc:	b0 e0       	ldi	r27, 0x00	; 0
     efe:	e4 e3       	ldi	r30, 0x34	; 52
     f00:	f0 e0       	ldi	r31, 0x00	; 0
     f02:	80 81       	ld	r24, Z
     f04:	48 2f       	mov	r20, r24
     f06:	8a 81       	ldd	r24, Y+2	; 0x02
     f08:	28 2f       	mov	r18, r24
     f0a:	30 e0       	ldi	r19, 0x00	; 0
     f0c:	81 e0       	ldi	r24, 0x01	; 1
     f0e:	90 e0       	ldi	r25, 0x00	; 0
     f10:	02 c0       	rjmp	.+4      	; 0xf16 <GPIO_Set_pin_input_pullup+0x110>
     f12:	88 0f       	add	r24, r24
     f14:	99 1f       	adc	r25, r25
     f16:	2a 95       	dec	r18
     f18:	e2 f7       	brpl	.-8      	; 0xf12 <GPIO_Set_pin_input_pullup+0x10c>
     f1a:	80 95       	com	r24
     f1c:	84 23       	and	r24, r20
     f1e:	8c 93       	st	X, r24
		SET_BIT(PORTC,a_pin);
     f20:	a5 e3       	ldi	r26, 0x35	; 53
     f22:	b0 e0       	ldi	r27, 0x00	; 0
     f24:	e5 e3       	ldi	r30, 0x35	; 53
     f26:	f0 e0       	ldi	r31, 0x00	; 0
     f28:	80 81       	ld	r24, Z
     f2a:	48 2f       	mov	r20, r24
     f2c:	8a 81       	ldd	r24, Y+2	; 0x02
     f2e:	28 2f       	mov	r18, r24
     f30:	30 e0       	ldi	r19, 0x00	; 0
     f32:	81 e0       	ldi	r24, 0x01	; 1
     f34:	90 e0       	ldi	r25, 0x00	; 0
     f36:	02 2e       	mov	r0, r18
     f38:	02 c0       	rjmp	.+4      	; 0xf3e <GPIO_Set_pin_input_pullup+0x138>
     f3a:	88 0f       	add	r24, r24
     f3c:	99 1f       	adc	r25, r25
     f3e:	0a 94       	dec	r0
     f40:	e2 f7       	brpl	.-8      	; 0xf3a <GPIO_Set_pin_input_pullup+0x134>
     f42:	84 2b       	or	r24, r20
     f44:	8c 93       	st	X, r24
     f46:	2a c0       	rjmp	.+84     	; 0xf9c <GPIO_Set_pin_input_pullup+0x196>
			break;
	case PortD:
		CLEAR_BIT(DDRD,a_pin);
     f48:	a1 e3       	ldi	r26, 0x31	; 49
     f4a:	b0 e0       	ldi	r27, 0x00	; 0
     f4c:	e1 e3       	ldi	r30, 0x31	; 49
     f4e:	f0 e0       	ldi	r31, 0x00	; 0
     f50:	80 81       	ld	r24, Z
     f52:	48 2f       	mov	r20, r24
     f54:	8a 81       	ldd	r24, Y+2	; 0x02
     f56:	28 2f       	mov	r18, r24
     f58:	30 e0       	ldi	r19, 0x00	; 0
     f5a:	81 e0       	ldi	r24, 0x01	; 1
     f5c:	90 e0       	ldi	r25, 0x00	; 0
     f5e:	02 c0       	rjmp	.+4      	; 0xf64 <GPIO_Set_pin_input_pullup+0x15e>
     f60:	88 0f       	add	r24, r24
     f62:	99 1f       	adc	r25, r25
     f64:	2a 95       	dec	r18
     f66:	e2 f7       	brpl	.-8      	; 0xf60 <GPIO_Set_pin_input_pullup+0x15a>
     f68:	80 95       	com	r24
     f6a:	84 23       	and	r24, r20
     f6c:	8c 93       	st	X, r24
		SET_BIT(PORTD,a_pin);
     f6e:	a2 e3       	ldi	r26, 0x32	; 50
     f70:	b0 e0       	ldi	r27, 0x00	; 0
     f72:	e2 e3       	ldi	r30, 0x32	; 50
     f74:	f0 e0       	ldi	r31, 0x00	; 0
     f76:	80 81       	ld	r24, Z
     f78:	48 2f       	mov	r20, r24
     f7a:	8a 81       	ldd	r24, Y+2	; 0x02
     f7c:	28 2f       	mov	r18, r24
     f7e:	30 e0       	ldi	r19, 0x00	; 0
     f80:	81 e0       	ldi	r24, 0x01	; 1
     f82:	90 e0       	ldi	r25, 0x00	; 0
     f84:	02 2e       	mov	r0, r18
     f86:	02 c0       	rjmp	.+4      	; 0xf8c <GPIO_Set_pin_input_pullup+0x186>
     f88:	88 0f       	add	r24, r24
     f8a:	99 1f       	adc	r25, r25
     f8c:	0a 94       	dec	r0
     f8e:	e2 f7       	brpl	.-8      	; 0xf88 <GPIO_Set_pin_input_pullup+0x182>
     f90:	84 2b       	or	r24, r20
     f92:	8c 93       	st	X, r24
     f94:	03 c0       	rjmp	.+6      	; 0xf9c <GPIO_Set_pin_input_pullup+0x196>
			break;
	default:
		return E_NOT_OK;
     f96:	91 e0       	ldi	r25, 0x01	; 1
     f98:	9b 83       	std	Y+3, r25	; 0x03
     f9a:	01 c0       	rjmp	.+2      	; 0xf9e <GPIO_Set_pin_input_pullup+0x198>
	}
	return E_OK;
     f9c:	1b 82       	std	Y+3, r1	; 0x03
     f9e:	8b 81       	ldd	r24, Y+3	; 0x03
}
     fa0:	0f 90       	pop	r0
     fa2:	0f 90       	pop	r0
     fa4:	0f 90       	pop	r0
     fa6:	0f 90       	pop	r0
     fa8:	0f 90       	pop	r0
     faa:	cf 91       	pop	r28
     fac:	df 91       	pop	r29
     fae:	08 95       	ret

00000fb0 <GPIO_get_pin_value>:
uint8 GPIO_get_pin_value(uint8 a_port,uint8 a_pin,uint8 * val_ptr){
     fb0:	df 93       	push	r29
     fb2:	cf 93       	push	r28
     fb4:	cd b7       	in	r28, 0x3d	; 61
     fb6:	de b7       	in	r29, 0x3e	; 62
     fb8:	27 97       	sbiw	r28, 0x07	; 7
     fba:	0f b6       	in	r0, 0x3f	; 63
     fbc:	f8 94       	cli
     fbe:	de bf       	out	0x3e, r29	; 62
     fc0:	0f be       	out	0x3f, r0	; 63
     fc2:	cd bf       	out	0x3d, r28	; 61
     fc4:	89 83       	std	Y+1, r24	; 0x01
     fc6:	6a 83       	std	Y+2, r22	; 0x02
     fc8:	5c 83       	std	Y+4, r21	; 0x04
     fca:	4b 83       	std	Y+3, r20	; 0x03
     if(val_ptr == NULL) return E_NOT_OK;
     fcc:	8b 81       	ldd	r24, Y+3	; 0x03
     fce:	9c 81       	ldd	r25, Y+4	; 0x04
     fd0:	00 97       	sbiw	r24, 0x00	; 0
     fd2:	19 f4       	brne	.+6      	; 0xfda <GPIO_get_pin_value+0x2a>
     fd4:	21 e0       	ldi	r18, 0x01	; 1
     fd6:	2f 83       	std	Y+7, r18	; 0x07
     fd8:	74 c0       	rjmp	.+232    	; 0x10c2 <GPIO_get_pin_value+0x112>
     switch(a_port){
     fda:	89 81       	ldd	r24, Y+1	; 0x01
     fdc:	28 2f       	mov	r18, r24
     fde:	30 e0       	ldi	r19, 0x00	; 0
     fe0:	3e 83       	std	Y+6, r19	; 0x06
     fe2:	2d 83       	std	Y+5, r18	; 0x05
     fe4:	8d 81       	ldd	r24, Y+5	; 0x05
     fe6:	9e 81       	ldd	r25, Y+6	; 0x06
     fe8:	82 30       	cpi	r24, 0x02	; 2
     fea:	91 05       	cpc	r25, r1
     fec:	51 f1       	breq	.+84     	; 0x1042 <GPIO_get_pin_value+0x92>
     fee:	2d 81       	ldd	r18, Y+5	; 0x05
     ff0:	3e 81       	ldd	r19, Y+6	; 0x06
     ff2:	23 30       	cpi	r18, 0x03	; 3
     ff4:	31 05       	cpc	r19, r1
     ff6:	34 f4       	brge	.+12     	; 0x1004 <GPIO_get_pin_value+0x54>
     ff8:	8d 81       	ldd	r24, Y+5	; 0x05
     ffa:	9e 81       	ldd	r25, Y+6	; 0x06
     ffc:	81 30       	cpi	r24, 0x01	; 1
     ffe:	91 05       	cpc	r25, r1
    1000:	61 f0       	breq	.+24     	; 0x101a <GPIO_get_pin_value+0x6a>
    1002:	5b c0       	rjmp	.+182    	; 0x10ba <GPIO_get_pin_value+0x10a>
    1004:	2d 81       	ldd	r18, Y+5	; 0x05
    1006:	3e 81       	ldd	r19, Y+6	; 0x06
    1008:	23 30       	cpi	r18, 0x03	; 3
    100a:	31 05       	cpc	r19, r1
    100c:	71 f1       	breq	.+92     	; 0x106a <GPIO_get_pin_value+0xba>
    100e:	8d 81       	ldd	r24, Y+5	; 0x05
    1010:	9e 81       	ldd	r25, Y+6	; 0x06
    1012:	84 30       	cpi	r24, 0x04	; 4
    1014:	91 05       	cpc	r25, r1
    1016:	e9 f1       	breq	.+122    	; 0x1092 <GPIO_get_pin_value+0xe2>
    1018:	50 c0       	rjmp	.+160    	; 0x10ba <GPIO_get_pin_value+0x10a>
     		case PortA:
     			* val_ptr=	( PINA & (1<<a_pin) );
    101a:	e9 e3       	ldi	r30, 0x39	; 57
    101c:	f0 e0       	ldi	r31, 0x00	; 0
    101e:	80 81       	ld	r24, Z
    1020:	48 2f       	mov	r20, r24
    1022:	8a 81       	ldd	r24, Y+2	; 0x02
    1024:	28 2f       	mov	r18, r24
    1026:	30 e0       	ldi	r19, 0x00	; 0
    1028:	81 e0       	ldi	r24, 0x01	; 1
    102a:	90 e0       	ldi	r25, 0x00	; 0
    102c:	02 2e       	mov	r0, r18
    102e:	02 c0       	rjmp	.+4      	; 0x1034 <GPIO_get_pin_value+0x84>
    1030:	88 0f       	add	r24, r24
    1032:	99 1f       	adc	r25, r25
    1034:	0a 94       	dec	r0
    1036:	e2 f7       	brpl	.-8      	; 0x1030 <GPIO_get_pin_value+0x80>
    1038:	84 23       	and	r24, r20
    103a:	eb 81       	ldd	r30, Y+3	; 0x03
    103c:	fc 81       	ldd	r31, Y+4	; 0x04
    103e:	80 83       	st	Z, r24
    1040:	3f c0       	rjmp	.+126    	; 0x10c0 <GPIO_get_pin_value+0x110>
     			break;
     		case PortB:
     			* val_ptr=	( PINB & (1<<a_pin) );
    1042:	e6 e3       	ldi	r30, 0x36	; 54
    1044:	f0 e0       	ldi	r31, 0x00	; 0
    1046:	80 81       	ld	r24, Z
    1048:	48 2f       	mov	r20, r24
    104a:	8a 81       	ldd	r24, Y+2	; 0x02
    104c:	28 2f       	mov	r18, r24
    104e:	30 e0       	ldi	r19, 0x00	; 0
    1050:	81 e0       	ldi	r24, 0x01	; 1
    1052:	90 e0       	ldi	r25, 0x00	; 0
    1054:	02 2e       	mov	r0, r18
    1056:	02 c0       	rjmp	.+4      	; 0x105c <GPIO_get_pin_value+0xac>
    1058:	88 0f       	add	r24, r24
    105a:	99 1f       	adc	r25, r25
    105c:	0a 94       	dec	r0
    105e:	e2 f7       	brpl	.-8      	; 0x1058 <GPIO_get_pin_value+0xa8>
    1060:	84 23       	and	r24, r20
    1062:	eb 81       	ldd	r30, Y+3	; 0x03
    1064:	fc 81       	ldd	r31, Y+4	; 0x04
    1066:	80 83       	st	Z, r24
    1068:	2b c0       	rjmp	.+86     	; 0x10c0 <GPIO_get_pin_value+0x110>
     				break;
     		case PortC:
     			* val_ptr=	( PINC & (1<<a_pin) );
    106a:	e3 e3       	ldi	r30, 0x33	; 51
    106c:	f0 e0       	ldi	r31, 0x00	; 0
    106e:	80 81       	ld	r24, Z
    1070:	48 2f       	mov	r20, r24
    1072:	8a 81       	ldd	r24, Y+2	; 0x02
    1074:	28 2f       	mov	r18, r24
    1076:	30 e0       	ldi	r19, 0x00	; 0
    1078:	81 e0       	ldi	r24, 0x01	; 1
    107a:	90 e0       	ldi	r25, 0x00	; 0
    107c:	02 2e       	mov	r0, r18
    107e:	02 c0       	rjmp	.+4      	; 0x1084 <GPIO_get_pin_value+0xd4>
    1080:	88 0f       	add	r24, r24
    1082:	99 1f       	adc	r25, r25
    1084:	0a 94       	dec	r0
    1086:	e2 f7       	brpl	.-8      	; 0x1080 <GPIO_get_pin_value+0xd0>
    1088:	84 23       	and	r24, r20
    108a:	eb 81       	ldd	r30, Y+3	; 0x03
    108c:	fc 81       	ldd	r31, Y+4	; 0x04
    108e:	80 83       	st	Z, r24
    1090:	17 c0       	rjmp	.+46     	; 0x10c0 <GPIO_get_pin_value+0x110>
     				break;
     		case PortD:
     			* val_ptr=	( PIND & (1<<a_pin) );
    1092:	e0 e3       	ldi	r30, 0x30	; 48
    1094:	f0 e0       	ldi	r31, 0x00	; 0
    1096:	80 81       	ld	r24, Z
    1098:	48 2f       	mov	r20, r24
    109a:	8a 81       	ldd	r24, Y+2	; 0x02
    109c:	28 2f       	mov	r18, r24
    109e:	30 e0       	ldi	r19, 0x00	; 0
    10a0:	81 e0       	ldi	r24, 0x01	; 1
    10a2:	90 e0       	ldi	r25, 0x00	; 0
    10a4:	02 2e       	mov	r0, r18
    10a6:	02 c0       	rjmp	.+4      	; 0x10ac <GPIO_get_pin_value+0xfc>
    10a8:	88 0f       	add	r24, r24
    10aa:	99 1f       	adc	r25, r25
    10ac:	0a 94       	dec	r0
    10ae:	e2 f7       	brpl	.-8      	; 0x10a8 <GPIO_get_pin_value+0xf8>
    10b0:	84 23       	and	r24, r20
    10b2:	eb 81       	ldd	r30, Y+3	; 0x03
    10b4:	fc 81       	ldd	r31, Y+4	; 0x04
    10b6:	80 83       	st	Z, r24
    10b8:	03 c0       	rjmp	.+6      	; 0x10c0 <GPIO_get_pin_value+0x110>
     				break;
     		default:
     			return E_NOT_OK;
    10ba:	91 e0       	ldi	r25, 0x01	; 1
    10bc:	9f 83       	std	Y+7, r25	; 0x07
    10be:	01 c0       	rjmp	.+2      	; 0x10c2 <GPIO_get_pin_value+0x112>
     		}

	return E_OK;
    10c0:	1f 82       	std	Y+7, r1	; 0x07
    10c2:	8f 81       	ldd	r24, Y+7	; 0x07
}
    10c4:	27 96       	adiw	r28, 0x07	; 7
    10c6:	0f b6       	in	r0, 0x3f	; 63
    10c8:	f8 94       	cli
    10ca:	de bf       	out	0x3e, r29	; 62
    10cc:	0f be       	out	0x3f, r0	; 63
    10ce:	cd bf       	out	0x3d, r28	; 61
    10d0:	cf 91       	pop	r28
    10d2:	df 91       	pop	r29
    10d4:	08 95       	ret

000010d6 <GPIO_set_pin_value>:
uint8 GPIO_set_pin_value(uint8 a_port,uint8 a_pin,uint8 val) {
    10d6:	df 93       	push	r29
    10d8:	cf 93       	push	r28
    10da:	00 d0       	rcall	.+0      	; 0x10dc <GPIO_set_pin_value+0x6>
    10dc:	00 d0       	rcall	.+0      	; 0x10de <GPIO_set_pin_value+0x8>
    10de:	00 d0       	rcall	.+0      	; 0x10e0 <GPIO_set_pin_value+0xa>
    10e0:	cd b7       	in	r28, 0x3d	; 61
    10e2:	de b7       	in	r29, 0x3e	; 62
    10e4:	89 83       	std	Y+1, r24	; 0x01
    10e6:	6a 83       	std	Y+2, r22	; 0x02
    10e8:	4b 83       	std	Y+3, r20	; 0x03
	switch(a_port){
    10ea:	89 81       	ldd	r24, Y+1	; 0x01
    10ec:	28 2f       	mov	r18, r24
    10ee:	30 e0       	ldi	r19, 0x00	; 0
    10f0:	3e 83       	std	Y+6, r19	; 0x06
    10f2:	2d 83       	std	Y+5, r18	; 0x05
    10f4:	6d 81       	ldd	r22, Y+5	; 0x05
    10f6:	7e 81       	ldd	r23, Y+6	; 0x06
    10f8:	62 30       	cpi	r22, 0x02	; 2
    10fa:	71 05       	cpc	r23, r1
    10fc:	09 f4       	brne	.+2      	; 0x1100 <GPIO_set_pin_value+0x2a>
    10fe:	46 c0       	rjmp	.+140    	; 0x118c <GPIO_set_pin_value+0xb6>
    1100:	8d 81       	ldd	r24, Y+5	; 0x05
    1102:	9e 81       	ldd	r25, Y+6	; 0x06
    1104:	83 30       	cpi	r24, 0x03	; 3
    1106:	91 05       	cpc	r25, r1
    1108:	34 f4       	brge	.+12     	; 0x1116 <GPIO_set_pin_value+0x40>
    110a:	2d 81       	ldd	r18, Y+5	; 0x05
    110c:	3e 81       	ldd	r19, Y+6	; 0x06
    110e:	21 30       	cpi	r18, 0x01	; 1
    1110:	31 05       	cpc	r19, r1
    1112:	71 f0       	breq	.+28     	; 0x1130 <GPIO_set_pin_value+0x5a>
    1114:	c5 c0       	rjmp	.+394    	; 0x12a0 <GPIO_set_pin_value+0x1ca>
    1116:	6d 81       	ldd	r22, Y+5	; 0x05
    1118:	7e 81       	ldd	r23, Y+6	; 0x06
    111a:	63 30       	cpi	r22, 0x03	; 3
    111c:	71 05       	cpc	r23, r1
    111e:	09 f4       	brne	.+2      	; 0x1122 <GPIO_set_pin_value+0x4c>
    1120:	63 c0       	rjmp	.+198    	; 0x11e8 <GPIO_set_pin_value+0x112>
    1122:	8d 81       	ldd	r24, Y+5	; 0x05
    1124:	9e 81       	ldd	r25, Y+6	; 0x06
    1126:	84 30       	cpi	r24, 0x04	; 4
    1128:	91 05       	cpc	r25, r1
    112a:	09 f4       	brne	.+2      	; 0x112e <GPIO_set_pin_value+0x58>
    112c:	8b c0       	rjmp	.+278    	; 0x1244 <GPIO_set_pin_value+0x16e>
    112e:	b8 c0       	rjmp	.+368    	; 0x12a0 <GPIO_set_pin_value+0x1ca>
	case PortA:
		if(val)PORTA|=(val<<a_pin);
    1130:	8b 81       	ldd	r24, Y+3	; 0x03
    1132:	88 23       	and	r24, r24
    1134:	b1 f0       	breq	.+44     	; 0x1162 <GPIO_set_pin_value+0x8c>
    1136:	ab e3       	ldi	r26, 0x3B	; 59
    1138:	b0 e0       	ldi	r27, 0x00	; 0
    113a:	eb e3       	ldi	r30, 0x3B	; 59
    113c:	f0 e0       	ldi	r31, 0x00	; 0
    113e:	80 81       	ld	r24, Z
    1140:	48 2f       	mov	r20, r24
    1142:	8b 81       	ldd	r24, Y+3	; 0x03
    1144:	28 2f       	mov	r18, r24
    1146:	30 e0       	ldi	r19, 0x00	; 0
    1148:	8a 81       	ldd	r24, Y+2	; 0x02
    114a:	88 2f       	mov	r24, r24
    114c:	90 e0       	ldi	r25, 0x00	; 0
    114e:	b9 01       	movw	r22, r18
    1150:	02 c0       	rjmp	.+4      	; 0x1156 <GPIO_set_pin_value+0x80>
    1152:	66 0f       	add	r22, r22
    1154:	77 1f       	adc	r23, r23
    1156:	8a 95       	dec	r24
    1158:	e2 f7       	brpl	.-8      	; 0x1152 <GPIO_set_pin_value+0x7c>
    115a:	cb 01       	movw	r24, r22
    115c:	84 2b       	or	r24, r20
    115e:	8c 93       	st	X, r24
    1160:	a2 c0       	rjmp	.+324    	; 0x12a6 <GPIO_set_pin_value+0x1d0>
		else CLEAR_BIT(PORTA,a_pin);
    1162:	ab e3       	ldi	r26, 0x3B	; 59
    1164:	b0 e0       	ldi	r27, 0x00	; 0
    1166:	eb e3       	ldi	r30, 0x3B	; 59
    1168:	f0 e0       	ldi	r31, 0x00	; 0
    116a:	80 81       	ld	r24, Z
    116c:	48 2f       	mov	r20, r24
    116e:	8a 81       	ldd	r24, Y+2	; 0x02
    1170:	28 2f       	mov	r18, r24
    1172:	30 e0       	ldi	r19, 0x00	; 0
    1174:	81 e0       	ldi	r24, 0x01	; 1
    1176:	90 e0       	ldi	r25, 0x00	; 0
    1178:	02 2e       	mov	r0, r18
    117a:	02 c0       	rjmp	.+4      	; 0x1180 <GPIO_set_pin_value+0xaa>
    117c:	88 0f       	add	r24, r24
    117e:	99 1f       	adc	r25, r25
    1180:	0a 94       	dec	r0
    1182:	e2 f7       	brpl	.-8      	; 0x117c <GPIO_set_pin_value+0xa6>
    1184:	80 95       	com	r24
    1186:	84 23       	and	r24, r20
    1188:	8c 93       	st	X, r24
    118a:	8d c0       	rjmp	.+282    	; 0x12a6 <GPIO_set_pin_value+0x1d0>
		break;
	case PortB:
		//PORTB|=(val<<a_pin);
		if(val)PORTB|=(val<<a_pin);
    118c:	8b 81       	ldd	r24, Y+3	; 0x03
    118e:	88 23       	and	r24, r24
    1190:	b1 f0       	breq	.+44     	; 0x11be <GPIO_set_pin_value+0xe8>
    1192:	a8 e3       	ldi	r26, 0x38	; 56
    1194:	b0 e0       	ldi	r27, 0x00	; 0
    1196:	e8 e3       	ldi	r30, 0x38	; 56
    1198:	f0 e0       	ldi	r31, 0x00	; 0
    119a:	80 81       	ld	r24, Z
    119c:	48 2f       	mov	r20, r24
    119e:	8b 81       	ldd	r24, Y+3	; 0x03
    11a0:	28 2f       	mov	r18, r24
    11a2:	30 e0       	ldi	r19, 0x00	; 0
    11a4:	8a 81       	ldd	r24, Y+2	; 0x02
    11a6:	88 2f       	mov	r24, r24
    11a8:	90 e0       	ldi	r25, 0x00	; 0
    11aa:	b9 01       	movw	r22, r18
    11ac:	02 c0       	rjmp	.+4      	; 0x11b2 <GPIO_set_pin_value+0xdc>
    11ae:	66 0f       	add	r22, r22
    11b0:	77 1f       	adc	r23, r23
    11b2:	8a 95       	dec	r24
    11b4:	e2 f7       	brpl	.-8      	; 0x11ae <GPIO_set_pin_value+0xd8>
    11b6:	cb 01       	movw	r24, r22
    11b8:	84 2b       	or	r24, r20
    11ba:	8c 93       	st	X, r24
    11bc:	74 c0       	rjmp	.+232    	; 0x12a6 <GPIO_set_pin_value+0x1d0>
		else CLEAR_BIT(PORTB,a_pin);
    11be:	a8 e3       	ldi	r26, 0x38	; 56
    11c0:	b0 e0       	ldi	r27, 0x00	; 0
    11c2:	e8 e3       	ldi	r30, 0x38	; 56
    11c4:	f0 e0       	ldi	r31, 0x00	; 0
    11c6:	80 81       	ld	r24, Z
    11c8:	48 2f       	mov	r20, r24
    11ca:	8a 81       	ldd	r24, Y+2	; 0x02
    11cc:	28 2f       	mov	r18, r24
    11ce:	30 e0       	ldi	r19, 0x00	; 0
    11d0:	81 e0       	ldi	r24, 0x01	; 1
    11d2:	90 e0       	ldi	r25, 0x00	; 0
    11d4:	02 2e       	mov	r0, r18
    11d6:	02 c0       	rjmp	.+4      	; 0x11dc <GPIO_set_pin_value+0x106>
    11d8:	88 0f       	add	r24, r24
    11da:	99 1f       	adc	r25, r25
    11dc:	0a 94       	dec	r0
    11de:	e2 f7       	brpl	.-8      	; 0x11d8 <GPIO_set_pin_value+0x102>
    11e0:	80 95       	com	r24
    11e2:	84 23       	and	r24, r20
    11e4:	8c 93       	st	X, r24
    11e6:	5f c0       	rjmp	.+190    	; 0x12a6 <GPIO_set_pin_value+0x1d0>
		break;
	case PortC:
		//PORTC|=(val<<a_pin);
		if(val)PORTC|=(val<<a_pin);
    11e8:	8b 81       	ldd	r24, Y+3	; 0x03
    11ea:	88 23       	and	r24, r24
    11ec:	b1 f0       	breq	.+44     	; 0x121a <GPIO_set_pin_value+0x144>
    11ee:	a5 e3       	ldi	r26, 0x35	; 53
    11f0:	b0 e0       	ldi	r27, 0x00	; 0
    11f2:	e5 e3       	ldi	r30, 0x35	; 53
    11f4:	f0 e0       	ldi	r31, 0x00	; 0
    11f6:	80 81       	ld	r24, Z
    11f8:	48 2f       	mov	r20, r24
    11fa:	8b 81       	ldd	r24, Y+3	; 0x03
    11fc:	28 2f       	mov	r18, r24
    11fe:	30 e0       	ldi	r19, 0x00	; 0
    1200:	8a 81       	ldd	r24, Y+2	; 0x02
    1202:	88 2f       	mov	r24, r24
    1204:	90 e0       	ldi	r25, 0x00	; 0
    1206:	b9 01       	movw	r22, r18
    1208:	02 c0       	rjmp	.+4      	; 0x120e <GPIO_set_pin_value+0x138>
    120a:	66 0f       	add	r22, r22
    120c:	77 1f       	adc	r23, r23
    120e:	8a 95       	dec	r24
    1210:	e2 f7       	brpl	.-8      	; 0x120a <GPIO_set_pin_value+0x134>
    1212:	cb 01       	movw	r24, r22
    1214:	84 2b       	or	r24, r20
    1216:	8c 93       	st	X, r24
    1218:	46 c0       	rjmp	.+140    	; 0x12a6 <GPIO_set_pin_value+0x1d0>
		else CLEAR_BIT(PORTC,a_pin);
    121a:	a5 e3       	ldi	r26, 0x35	; 53
    121c:	b0 e0       	ldi	r27, 0x00	; 0
    121e:	e5 e3       	ldi	r30, 0x35	; 53
    1220:	f0 e0       	ldi	r31, 0x00	; 0
    1222:	80 81       	ld	r24, Z
    1224:	48 2f       	mov	r20, r24
    1226:	8a 81       	ldd	r24, Y+2	; 0x02
    1228:	28 2f       	mov	r18, r24
    122a:	30 e0       	ldi	r19, 0x00	; 0
    122c:	81 e0       	ldi	r24, 0x01	; 1
    122e:	90 e0       	ldi	r25, 0x00	; 0
    1230:	02 2e       	mov	r0, r18
    1232:	02 c0       	rjmp	.+4      	; 0x1238 <GPIO_set_pin_value+0x162>
    1234:	88 0f       	add	r24, r24
    1236:	99 1f       	adc	r25, r25
    1238:	0a 94       	dec	r0
    123a:	e2 f7       	brpl	.-8      	; 0x1234 <GPIO_set_pin_value+0x15e>
    123c:	80 95       	com	r24
    123e:	84 23       	and	r24, r20
    1240:	8c 93       	st	X, r24
    1242:	31 c0       	rjmp	.+98     	; 0x12a6 <GPIO_set_pin_value+0x1d0>
		break;
	case PortD:
		//PORTD|=(val<<a_pin);
		if(val)PORTD|=(val<<a_pin);
    1244:	8b 81       	ldd	r24, Y+3	; 0x03
    1246:	88 23       	and	r24, r24
    1248:	b1 f0       	breq	.+44     	; 0x1276 <GPIO_set_pin_value+0x1a0>
    124a:	a2 e3       	ldi	r26, 0x32	; 50
    124c:	b0 e0       	ldi	r27, 0x00	; 0
    124e:	e2 e3       	ldi	r30, 0x32	; 50
    1250:	f0 e0       	ldi	r31, 0x00	; 0
    1252:	80 81       	ld	r24, Z
    1254:	48 2f       	mov	r20, r24
    1256:	8b 81       	ldd	r24, Y+3	; 0x03
    1258:	28 2f       	mov	r18, r24
    125a:	30 e0       	ldi	r19, 0x00	; 0
    125c:	8a 81       	ldd	r24, Y+2	; 0x02
    125e:	88 2f       	mov	r24, r24
    1260:	90 e0       	ldi	r25, 0x00	; 0
    1262:	b9 01       	movw	r22, r18
    1264:	02 c0       	rjmp	.+4      	; 0x126a <GPIO_set_pin_value+0x194>
    1266:	66 0f       	add	r22, r22
    1268:	77 1f       	adc	r23, r23
    126a:	8a 95       	dec	r24
    126c:	e2 f7       	brpl	.-8      	; 0x1266 <GPIO_set_pin_value+0x190>
    126e:	cb 01       	movw	r24, r22
    1270:	84 2b       	or	r24, r20
    1272:	8c 93       	st	X, r24
    1274:	18 c0       	rjmp	.+48     	; 0x12a6 <GPIO_set_pin_value+0x1d0>
		else CLEAR_BIT(PORTD,a_pin);
    1276:	a2 e3       	ldi	r26, 0x32	; 50
    1278:	b0 e0       	ldi	r27, 0x00	; 0
    127a:	e2 e3       	ldi	r30, 0x32	; 50
    127c:	f0 e0       	ldi	r31, 0x00	; 0
    127e:	80 81       	ld	r24, Z
    1280:	48 2f       	mov	r20, r24
    1282:	8a 81       	ldd	r24, Y+2	; 0x02
    1284:	28 2f       	mov	r18, r24
    1286:	30 e0       	ldi	r19, 0x00	; 0
    1288:	81 e0       	ldi	r24, 0x01	; 1
    128a:	90 e0       	ldi	r25, 0x00	; 0
    128c:	02 2e       	mov	r0, r18
    128e:	02 c0       	rjmp	.+4      	; 0x1294 <GPIO_set_pin_value+0x1be>
    1290:	88 0f       	add	r24, r24
    1292:	99 1f       	adc	r25, r25
    1294:	0a 94       	dec	r0
    1296:	e2 f7       	brpl	.-8      	; 0x1290 <GPIO_set_pin_value+0x1ba>
    1298:	80 95       	com	r24
    129a:	84 23       	and	r24, r20
    129c:	8c 93       	st	X, r24
    129e:	03 c0       	rjmp	.+6      	; 0x12a6 <GPIO_set_pin_value+0x1d0>
		break;
	default:
		return E_NOT_OK;
    12a0:	71 e0       	ldi	r23, 0x01	; 1
    12a2:	7c 83       	std	Y+4, r23	; 0x04
    12a4:	01 c0       	rjmp	.+2      	; 0x12a8 <GPIO_set_pin_value+0x1d2>
	}
	return E_OK;
    12a6:	1c 82       	std	Y+4, r1	; 0x04
    12a8:	8c 81       	ldd	r24, Y+4	; 0x04
}
    12aa:	26 96       	adiw	r28, 0x06	; 6
    12ac:	0f b6       	in	r0, 0x3f	; 63
    12ae:	f8 94       	cli
    12b0:	de bf       	out	0x3e, r29	; 62
    12b2:	0f be       	out	0x3f, r0	; 63
    12b4:	cd bf       	out	0x3d, r28	; 61
    12b6:	cf 91       	pop	r28
    12b8:	df 91       	pop	r29
    12ba:	08 95       	ret

000012bc <GPIO_toggle_pin_val>:
uint8 GPIO_toggle_pin_val(uint8 a_port,uint8 a_pin) {
    12bc:	df 93       	push	r29
    12be:	cf 93       	push	r28
    12c0:	00 d0       	rcall	.+0      	; 0x12c2 <GPIO_toggle_pin_val+0x6>
    12c2:	00 d0       	rcall	.+0      	; 0x12c4 <GPIO_toggle_pin_val+0x8>
    12c4:	0f 92       	push	r0
    12c6:	cd b7       	in	r28, 0x3d	; 61
    12c8:	de b7       	in	r29, 0x3e	; 62
    12ca:	89 83       	std	Y+1, r24	; 0x01
    12cc:	6a 83       	std	Y+2, r22	; 0x02
	switch(a_port){
    12ce:	89 81       	ldd	r24, Y+1	; 0x01
    12d0:	28 2f       	mov	r18, r24
    12d2:	30 e0       	ldi	r19, 0x00	; 0
    12d4:	3d 83       	std	Y+5, r19	; 0x05
    12d6:	2c 83       	std	Y+4, r18	; 0x04
    12d8:	8c 81       	ldd	r24, Y+4	; 0x04
    12da:	9d 81       	ldd	r25, Y+5	; 0x05
    12dc:	82 30       	cpi	r24, 0x02	; 2
    12de:	91 05       	cpc	r25, r1
    12e0:	51 f1       	breq	.+84     	; 0x1336 <GPIO_toggle_pin_val+0x7a>
    12e2:	2c 81       	ldd	r18, Y+4	; 0x04
    12e4:	3d 81       	ldd	r19, Y+5	; 0x05
    12e6:	23 30       	cpi	r18, 0x03	; 3
    12e8:	31 05       	cpc	r19, r1
    12ea:	34 f4       	brge	.+12     	; 0x12f8 <GPIO_toggle_pin_val+0x3c>
    12ec:	8c 81       	ldd	r24, Y+4	; 0x04
    12ee:	9d 81       	ldd	r25, Y+5	; 0x05
    12f0:	81 30       	cpi	r24, 0x01	; 1
    12f2:	91 05       	cpc	r25, r1
    12f4:	61 f0       	breq	.+24     	; 0x130e <GPIO_toggle_pin_val+0x52>
    12f6:	5b c0       	rjmp	.+182    	; 0x13ae <GPIO_toggle_pin_val+0xf2>
    12f8:	2c 81       	ldd	r18, Y+4	; 0x04
    12fa:	3d 81       	ldd	r19, Y+5	; 0x05
    12fc:	23 30       	cpi	r18, 0x03	; 3
    12fe:	31 05       	cpc	r19, r1
    1300:	71 f1       	breq	.+92     	; 0x135e <GPIO_toggle_pin_val+0xa2>
    1302:	8c 81       	ldd	r24, Y+4	; 0x04
    1304:	9d 81       	ldd	r25, Y+5	; 0x05
    1306:	84 30       	cpi	r24, 0x04	; 4
    1308:	91 05       	cpc	r25, r1
    130a:	e9 f1       	breq	.+122    	; 0x1386 <GPIO_toggle_pin_val+0xca>
    130c:	50 c0       	rjmp	.+160    	; 0x13ae <GPIO_toggle_pin_val+0xf2>
		case PortA:
			TOGGLE_BIT(PORTA,a_pin);
    130e:	ab e3       	ldi	r26, 0x3B	; 59
    1310:	b0 e0       	ldi	r27, 0x00	; 0
    1312:	eb e3       	ldi	r30, 0x3B	; 59
    1314:	f0 e0       	ldi	r31, 0x00	; 0
    1316:	80 81       	ld	r24, Z
    1318:	48 2f       	mov	r20, r24
    131a:	8a 81       	ldd	r24, Y+2	; 0x02
    131c:	28 2f       	mov	r18, r24
    131e:	30 e0       	ldi	r19, 0x00	; 0
    1320:	81 e0       	ldi	r24, 0x01	; 1
    1322:	90 e0       	ldi	r25, 0x00	; 0
    1324:	02 2e       	mov	r0, r18
    1326:	02 c0       	rjmp	.+4      	; 0x132c <GPIO_toggle_pin_val+0x70>
    1328:	88 0f       	add	r24, r24
    132a:	99 1f       	adc	r25, r25
    132c:	0a 94       	dec	r0
    132e:	e2 f7       	brpl	.-8      	; 0x1328 <GPIO_toggle_pin_val+0x6c>
    1330:	84 27       	eor	r24, r20
    1332:	8c 93       	st	X, r24
    1334:	3f c0       	rjmp	.+126    	; 0x13b4 <GPIO_toggle_pin_val+0xf8>
			break;
		case PortB:
			TOGGLE_BIT(PORTB,a_pin);
    1336:	a8 e3       	ldi	r26, 0x38	; 56
    1338:	b0 e0       	ldi	r27, 0x00	; 0
    133a:	e8 e3       	ldi	r30, 0x38	; 56
    133c:	f0 e0       	ldi	r31, 0x00	; 0
    133e:	80 81       	ld	r24, Z
    1340:	48 2f       	mov	r20, r24
    1342:	8a 81       	ldd	r24, Y+2	; 0x02
    1344:	28 2f       	mov	r18, r24
    1346:	30 e0       	ldi	r19, 0x00	; 0
    1348:	81 e0       	ldi	r24, 0x01	; 1
    134a:	90 e0       	ldi	r25, 0x00	; 0
    134c:	02 2e       	mov	r0, r18
    134e:	02 c0       	rjmp	.+4      	; 0x1354 <GPIO_toggle_pin_val+0x98>
    1350:	88 0f       	add	r24, r24
    1352:	99 1f       	adc	r25, r25
    1354:	0a 94       	dec	r0
    1356:	e2 f7       	brpl	.-8      	; 0x1350 <GPIO_toggle_pin_val+0x94>
    1358:	84 27       	eor	r24, r20
    135a:	8c 93       	st	X, r24
    135c:	2b c0       	rjmp	.+86     	; 0x13b4 <GPIO_toggle_pin_val+0xf8>
				break;
		case PortC:
			TOGGLE_BIT(PORTC,a_pin);
    135e:	a5 e3       	ldi	r26, 0x35	; 53
    1360:	b0 e0       	ldi	r27, 0x00	; 0
    1362:	e5 e3       	ldi	r30, 0x35	; 53
    1364:	f0 e0       	ldi	r31, 0x00	; 0
    1366:	80 81       	ld	r24, Z
    1368:	48 2f       	mov	r20, r24
    136a:	8a 81       	ldd	r24, Y+2	; 0x02
    136c:	28 2f       	mov	r18, r24
    136e:	30 e0       	ldi	r19, 0x00	; 0
    1370:	81 e0       	ldi	r24, 0x01	; 1
    1372:	90 e0       	ldi	r25, 0x00	; 0
    1374:	02 2e       	mov	r0, r18
    1376:	02 c0       	rjmp	.+4      	; 0x137c <GPIO_toggle_pin_val+0xc0>
    1378:	88 0f       	add	r24, r24
    137a:	99 1f       	adc	r25, r25
    137c:	0a 94       	dec	r0
    137e:	e2 f7       	brpl	.-8      	; 0x1378 <GPIO_toggle_pin_val+0xbc>
    1380:	84 27       	eor	r24, r20
    1382:	8c 93       	st	X, r24
    1384:	17 c0       	rjmp	.+46     	; 0x13b4 <GPIO_toggle_pin_val+0xf8>
				break;
		case PortD:
			TOGGLE_BIT(PORTD,a_pin);
    1386:	a2 e3       	ldi	r26, 0x32	; 50
    1388:	b0 e0       	ldi	r27, 0x00	; 0
    138a:	e2 e3       	ldi	r30, 0x32	; 50
    138c:	f0 e0       	ldi	r31, 0x00	; 0
    138e:	80 81       	ld	r24, Z
    1390:	48 2f       	mov	r20, r24
    1392:	8a 81       	ldd	r24, Y+2	; 0x02
    1394:	28 2f       	mov	r18, r24
    1396:	30 e0       	ldi	r19, 0x00	; 0
    1398:	81 e0       	ldi	r24, 0x01	; 1
    139a:	90 e0       	ldi	r25, 0x00	; 0
    139c:	02 2e       	mov	r0, r18
    139e:	02 c0       	rjmp	.+4      	; 0x13a4 <GPIO_toggle_pin_val+0xe8>
    13a0:	88 0f       	add	r24, r24
    13a2:	99 1f       	adc	r25, r25
    13a4:	0a 94       	dec	r0
    13a6:	e2 f7       	brpl	.-8      	; 0x13a0 <GPIO_toggle_pin_val+0xe4>
    13a8:	84 27       	eor	r24, r20
    13aa:	8c 93       	st	X, r24
    13ac:	03 c0       	rjmp	.+6      	; 0x13b4 <GPIO_toggle_pin_val+0xf8>
				break;
		default:
			return E_NOT_OK;
    13ae:	91 e0       	ldi	r25, 0x01	; 1
    13b0:	9b 83       	std	Y+3, r25	; 0x03
    13b2:	01 c0       	rjmp	.+2      	; 0x13b6 <GPIO_toggle_pin_val+0xfa>
		}
		return E_OK;
    13b4:	1b 82       	std	Y+3, r1	; 0x03
    13b6:	8b 81       	ldd	r24, Y+3	; 0x03
}
    13b8:	0f 90       	pop	r0
    13ba:	0f 90       	pop	r0
    13bc:	0f 90       	pop	r0
    13be:	0f 90       	pop	r0
    13c0:	0f 90       	pop	r0
    13c2:	cf 91       	pop	r28
    13c4:	df 91       	pop	r29
    13c6:	08 95       	ret

000013c8 <TWI_init>:
 *
 *******************************************************************************/
#include "i2c.h"

void TWI_init (const TWI_config * cofig_Ptr)
{
    13c8:	df 93       	push	r29
    13ca:	cf 93       	push	r28
    13cc:	00 d0       	rcall	.+0      	; 0x13ce <TWI_init+0x6>
    13ce:	cd b7       	in	r28, 0x3d	; 61
    13d0:	de b7       	in	r29, 0x3e	; 62
    13d2:	9a 83       	std	Y+2, r25	; 0x02
    13d4:	89 83       	std	Y+1, r24	; 0x01

	/*pre_scalar */
	TWBR = 0x02;
    13d6:	e0 e2       	ldi	r30, 0x20	; 32
    13d8:	f0 e0       	ldi	r31, 0x00	; 0
    13da:	82 e0       	ldi	r24, 0x02	; 2
    13dc:	80 83       	st	Z, r24
	TWSR = 0x00;
    13de:	e1 e2       	ldi	r30, 0x21	; 33
    13e0:	f0 e0       	ldi	r31, 0x00	; 0
    13e2:	10 82       	st	Z, r1

	/* address (in case of slave) */
	TWAR = cofig_Ptr->add;
    13e4:	a2 e2       	ldi	r26, 0x22	; 34
    13e6:	b0 e0       	ldi	r27, 0x00	; 0
    13e8:	e9 81       	ldd	r30, Y+1	; 0x01
    13ea:	fa 81       	ldd	r31, Y+2	; 0x02
    13ec:	80 81       	ld	r24, Z
    13ee:	8c 93       	st	X, r24
    /* enable TWI */
	TWCR = (1 << TWEN);
    13f0:	e6 e5       	ldi	r30, 0x56	; 86
    13f2:	f0 e0       	ldi	r31, 0x00	; 0
    13f4:	84 e0       	ldi	r24, 0x04	; 4
    13f6:	80 83       	st	Z, r24
}
    13f8:	0f 90       	pop	r0
    13fa:	0f 90       	pop	r0
    13fc:	cf 91       	pop	r28
    13fe:	df 91       	pop	r29
    1400:	08 95       	ret

00001402 <TWI_start>:

void TWI_start (void)
{
    1402:	df 93       	push	r29
    1404:	cf 93       	push	r28
    1406:	cd b7       	in	r28, 0x3d	; 61
    1408:	de b7       	in	r29, 0x3e	; 62
	TWCR = (1 << TWINT) | (1 << TWEN) | (1 <<TWSTA);
    140a:	e6 e5       	ldi	r30, 0x56	; 86
    140c:	f0 e0       	ldi	r31, 0x00	; 0
    140e:	84 ea       	ldi	r24, 0xA4	; 164
    1410:	80 83       	st	Z, r24
	while (BIT_IS_CLEAR(TWCR, TWINT));
    1412:	e6 e5       	ldi	r30, 0x56	; 86
    1414:	f0 e0       	ldi	r31, 0x00	; 0
    1416:	80 81       	ld	r24, Z
    1418:	88 23       	and	r24, r24
    141a:	dc f7       	brge	.-10     	; 0x1412 <TWI_start+0x10>
}
    141c:	cf 91       	pop	r28
    141e:	df 91       	pop	r29
    1420:	08 95       	ret

00001422 <TWI_stop>:

void TWI_stop (void)
{
    1422:	df 93       	push	r29
    1424:	cf 93       	push	r28
    1426:	cd b7       	in	r28, 0x3d	; 61
    1428:	de b7       	in	r29, 0x3e	; 62
	TWCR = (1 << TWINT) | (1 << TWEN) | (1 <<TWSTO);
    142a:	e6 e5       	ldi	r30, 0x56	; 86
    142c:	f0 e0       	ldi	r31, 0x00	; 0
    142e:	84 e9       	ldi	r24, 0x94	; 148
    1430:	80 83       	st	Z, r24
	//while (BIT_IS_CLEAR(TWCR, TWINT));
}
    1432:	cf 91       	pop	r28
    1434:	df 91       	pop	r29
    1436:	08 95       	ret

00001438 <TWI_write>:

void TWI_write(uint8 data)
{
    1438:	df 93       	push	r29
    143a:	cf 93       	push	r28
    143c:	0f 92       	push	r0
    143e:	cd b7       	in	r28, 0x3d	; 61
    1440:	de b7       	in	r29, 0x3e	; 62
    1442:	89 83       	std	Y+1, r24	; 0x01
	TWDR = data;
    1444:	e3 e2       	ldi	r30, 0x23	; 35
    1446:	f0 e0       	ldi	r31, 0x00	; 0
    1448:	89 81       	ldd	r24, Y+1	; 0x01
    144a:	80 83       	st	Z, r24
	TWCR = (1 << TWINT) | (1 << TWEN);
    144c:	e6 e5       	ldi	r30, 0x56	; 86
    144e:	f0 e0       	ldi	r31, 0x00	; 0
    1450:	84 e8       	ldi	r24, 0x84	; 132
    1452:	80 83       	st	Z, r24
	while (BIT_IS_CLEAR(TWCR, TWINT));
    1454:	e6 e5       	ldi	r30, 0x56	; 86
    1456:	f0 e0       	ldi	r31, 0x00	; 0
    1458:	80 81       	ld	r24, Z
    145a:	88 23       	and	r24, r24
    145c:	dc f7       	brge	.-10     	; 0x1454 <TWI_write+0x1c>
}
    145e:	0f 90       	pop	r0
    1460:	cf 91       	pop	r28
    1462:	df 91       	pop	r29
    1464:	08 95       	ret

00001466 <TWI_readWithACK>:

uint8 TWI_readWithACK(void)
{
    1466:	df 93       	push	r29
    1468:	cf 93       	push	r28
    146a:	cd b7       	in	r28, 0x3d	; 61
    146c:	de b7       	in	r29, 0x3e	; 62
	TWCR = (1 << TWINT) | (1 << TWEN) | (1 << TWEA);
    146e:	e6 e5       	ldi	r30, 0x56	; 86
    1470:	f0 e0       	ldi	r31, 0x00	; 0
    1472:	84 ec       	ldi	r24, 0xC4	; 196
    1474:	80 83       	st	Z, r24
	while (BIT_IS_CLEAR(TWCR, TWINT));
    1476:	e6 e5       	ldi	r30, 0x56	; 86
    1478:	f0 e0       	ldi	r31, 0x00	; 0
    147a:	80 81       	ld	r24, Z
    147c:	88 23       	and	r24, r24
    147e:	dc f7       	brge	.-10     	; 0x1476 <TWI_readWithACK+0x10>
	return TWDR;
    1480:	e3 e2       	ldi	r30, 0x23	; 35
    1482:	f0 e0       	ldi	r31, 0x00	; 0
    1484:	80 81       	ld	r24, Z
}
    1486:	cf 91       	pop	r28
    1488:	df 91       	pop	r29
    148a:	08 95       	ret

0000148c <TWI_readWithNACK>:

uint8 TWI_readWithNACK(void)
{
    148c:	df 93       	push	r29
    148e:	cf 93       	push	r28
    1490:	cd b7       	in	r28, 0x3d	; 61
    1492:	de b7       	in	r29, 0x3e	; 62
	TWCR = (1 << TWINT) | (1 << TWEN);
    1494:	e6 e5       	ldi	r30, 0x56	; 86
    1496:	f0 e0       	ldi	r31, 0x00	; 0
    1498:	84 e8       	ldi	r24, 0x84	; 132
    149a:	80 83       	st	Z, r24
	while (BIT_IS_CLEAR(TWCR, TWINT));
    149c:	e6 e5       	ldi	r30, 0x56	; 86
    149e:	f0 e0       	ldi	r31, 0x00	; 0
    14a0:	80 81       	ld	r24, Z
    14a2:	88 23       	and	r24, r24
    14a4:	dc f7       	brge	.-10     	; 0x149c <TWI_readWithNACK+0x10>
	return TWDR;
    14a6:	e3 e2       	ldi	r30, 0x23	; 35
    14a8:	f0 e0       	ldi	r31, 0x00	; 0
    14aa:	80 81       	ld	r24, Z
}
    14ac:	cf 91       	pop	r28
    14ae:	df 91       	pop	r29
    14b0:	08 95       	ret

000014b2 <TWI_getStatus>:

uint8 TWI_getStatus(void)
{
    14b2:	df 93       	push	r29
    14b4:	cf 93       	push	r28
    14b6:	cd b7       	in	r28, 0x3d	; 61
    14b8:	de b7       	in	r29, 0x3e	; 62
	return (TWSR & 0xF8);
    14ba:	e1 e2       	ldi	r30, 0x21	; 33
    14bc:	f0 e0       	ldi	r31, 0x00	; 0
    14be:	80 81       	ld	r24, Z
    14c0:	88 7f       	andi	r24, 0xF8	; 248
}
    14c2:	cf 91       	pop	r28
    14c4:	df 91       	pop	r29
    14c6:	08 95       	ret

000014c8 <__vector_6>:
/* global pointer to function for callback*/
static volatile void(*g_callBackPTr)(void) = NULL;
volatile uint8 g_init_flag=0;

ISR (TIMER1_COMPA_vect)
{   g_init_flag=0;
    14c8:	1f 92       	push	r1
    14ca:	0f 92       	push	r0
    14cc:	0f b6       	in	r0, 0x3f	; 63
    14ce:	0f 92       	push	r0
    14d0:	11 24       	eor	r1, r1
    14d2:	2f 93       	push	r18
    14d4:	3f 93       	push	r19
    14d6:	4f 93       	push	r20
    14d8:	5f 93       	push	r21
    14da:	6f 93       	push	r22
    14dc:	7f 93       	push	r23
    14de:	8f 93       	push	r24
    14e0:	9f 93       	push	r25
    14e2:	af 93       	push	r26
    14e4:	bf 93       	push	r27
    14e6:	ef 93       	push	r30
    14e8:	ff 93       	push	r31
    14ea:	df 93       	push	r29
    14ec:	cf 93       	push	r28
    14ee:	cd b7       	in	r28, 0x3d	; 61
    14f0:	de b7       	in	r29, 0x3e	; 62
    14f2:	10 92 7e 00 	sts	0x007E, r1
	if (g_callBackPTr != NULL)
    14f6:	80 91 7c 00 	lds	r24, 0x007C
    14fa:	90 91 7d 00 	lds	r25, 0x007D
    14fe:	00 97       	sbiw	r24, 0x00	; 0
    1500:	29 f0       	breq	.+10     	; 0x150c <__vector_6+0x44>
	{
		(*g_callBackPTr)();
    1502:	e0 91 7c 00 	lds	r30, 0x007C
    1506:	f0 91 7d 00 	lds	r31, 0x007D
    150a:	09 95       	icall
	}

}
    150c:	cf 91       	pop	r28
    150e:	df 91       	pop	r29
    1510:	ff 91       	pop	r31
    1512:	ef 91       	pop	r30
    1514:	bf 91       	pop	r27
    1516:	af 91       	pop	r26
    1518:	9f 91       	pop	r25
    151a:	8f 91       	pop	r24
    151c:	7f 91       	pop	r23
    151e:	6f 91       	pop	r22
    1520:	5f 91       	pop	r21
    1522:	4f 91       	pop	r20
    1524:	3f 91       	pop	r19
    1526:	2f 91       	pop	r18
    1528:	0f 90       	pop	r0
    152a:	0f be       	out	0x3f, r0	; 63
    152c:	0f 90       	pop	r0
    152e:	1f 90       	pop	r1
    1530:	18 95       	reti

00001532 <Timer1_init>:

uint8 Timer1_init(const Timer1_config * config_Ptr)
{
    1532:	df 93       	push	r29
    1534:	cf 93       	push	r28
    1536:	00 d0       	rcall	.+0      	; 0x1538 <Timer1_init+0x6>
    1538:	cd b7       	in	r28, 0x3d	; 61
    153a:	de b7       	in	r29, 0x3e	; 62
    153c:	9a 83       	std	Y+2, r25	; 0x02
    153e:	89 83       	std	Y+1, r24	; 0x01
	while(g_init_flag);
    1540:	80 91 7e 00 	lds	r24, 0x007E
    1544:	88 23       	and	r24, r24
    1546:	e1 f7       	brne	.-8      	; 0x1540 <Timer1_init+0xe>
	SREG |= (1 << 7); // I_bit
    1548:	af e5       	ldi	r26, 0x5F	; 95
    154a:	b0 e0       	ldi	r27, 0x00	; 0
    154c:	ef e5       	ldi	r30, 0x5F	; 95
    154e:	f0 e0       	ldi	r31, 0x00	; 0
    1550:	80 81       	ld	r24, Z
    1552:	80 68       	ori	r24, 0x80	; 128
    1554:	8c 93       	st	X, r24

	/* non_PWM mode */
	TCCR1A |= (1 << FOC1A) | (1 << FOC1B);
    1556:	af e4       	ldi	r26, 0x4F	; 79
    1558:	b0 e0       	ldi	r27, 0x00	; 0
    155a:	ef e4       	ldi	r30, 0x4F	; 79
    155c:	f0 e0       	ldi	r31, 0x00	; 0
    155e:	80 81       	ld	r24, Z
    1560:	8c 60       	ori	r24, 0x0C	; 12
    1562:	8c 93       	st	X, r24

	/* set initial value */
	TCNT1 = config_Ptr->initial_value;
    1564:	ac e4       	ldi	r26, 0x4C	; 76
    1566:	b0 e0       	ldi	r27, 0x00	; 0
    1568:	e9 81       	ldd	r30, Y+1	; 0x01
    156a:	fa 81       	ldd	r31, Y+2	; 0x02
    156c:	81 81       	ldd	r24, Z+1	; 0x01
    156e:	92 81       	ldd	r25, Z+2	; 0x02
    1570:	11 96       	adiw	r26, 0x01	; 1
    1572:	9c 93       	st	X, r25
    1574:	8e 93       	st	-X, r24

	/* set compare value */
	OCR1A = config_Ptr->compare_value;
    1576:	aa e4       	ldi	r26, 0x4A	; 74
    1578:	b0 e0       	ldi	r27, 0x00	; 0
    157a:	e9 81       	ldd	r30, Y+1	; 0x01
    157c:	fa 81       	ldd	r31, Y+2	; 0x02
    157e:	83 81       	ldd	r24, Z+3	; 0x03
    1580:	94 81       	ldd	r25, Z+4	; 0x04
    1582:	11 96       	adiw	r26, 0x01	; 1
    1584:	9c 93       	st	X, r25
    1586:	8e 93       	st	-X, r24

	/* enable timer interrupt  in compare mode */
	TIMSK = (TIMSK & 0xEF) | (1 << OCIE1A);
    1588:	a9 e5       	ldi	r26, 0x59	; 89
    158a:	b0 e0       	ldi	r27, 0x00	; 0
    158c:	e9 e5       	ldi	r30, 0x59	; 89
    158e:	f0 e0       	ldi	r31, 0x00	; 0
    1590:	80 81       	ld	r24, Z
    1592:	80 61       	ori	r24, 0x10	; 16
    1594:	8c 93       	st	X, r24

	/* TCCR1B = (1 << CS10) | (1 << CS12) | (1 << WGM12);
	 * pre_scalar = 8 MHZ / 1028 then interrupt every 0.128 secondS
	 */
	TCCR1B = (TCCR1B & 0xF8) | (config_Ptr->clk);
    1596:	ae e4       	ldi	r26, 0x4E	; 78
    1598:	b0 e0       	ldi	r27, 0x00	; 0
    159a:	ee e4       	ldi	r30, 0x4E	; 78
    159c:	f0 e0       	ldi	r31, 0x00	; 0
    159e:	80 81       	ld	r24, Z
    15a0:	98 2f       	mov	r25, r24
    15a2:	98 7f       	andi	r25, 0xF8	; 248
    15a4:	e9 81       	ldd	r30, Y+1	; 0x01
    15a6:	fa 81       	ldd	r31, Y+2	; 0x02
    15a8:	80 81       	ld	r24, Z
    15aa:	89 2b       	or	r24, r25
    15ac:	8c 93       	st	X, r24
	TCCR1B = (TCCR1B & 0xF7) | (1 << WGM12);
    15ae:	ae e4       	ldi	r26, 0x4E	; 78
    15b0:	b0 e0       	ldi	r27, 0x00	; 0
    15b2:	ee e4       	ldi	r30, 0x4E	; 78
    15b4:	f0 e0       	ldi	r31, 0x00	; 0
    15b6:	80 81       	ld	r24, Z
    15b8:	88 60       	ori	r24, 0x08	; 8
    15ba:	8c 93       	st	X, r24
	g_init_flag=1;
    15bc:	81 e0       	ldi	r24, 0x01	; 1
    15be:	80 93 7e 00 	sts	0x007E, r24
	return E_OK;
    15c2:	80 e0       	ldi	r24, 0x00	; 0

}
    15c4:	0f 90       	pop	r0
    15c6:	0f 90       	pop	r0
    15c8:	cf 91       	pop	r28
    15ca:	df 91       	pop	r29
    15cc:	08 95       	ret

000015ce <Timer1_set_CallBack>:

uint8 Timer1_set_CallBack(void(*a_ptr)(void))
{
    15ce:	df 93       	push	r29
    15d0:	cf 93       	push	r28
    15d2:	00 d0       	rcall	.+0      	; 0x15d4 <Timer1_set_CallBack+0x6>
    15d4:	cd b7       	in	r28, 0x3d	; 61
    15d6:	de b7       	in	r29, 0x3e	; 62
    15d8:	9a 83       	std	Y+2, r25	; 0x02
    15da:	89 83       	std	Y+1, r24	; 0x01
	g_callBackPTr = a_ptr;
    15dc:	89 81       	ldd	r24, Y+1	; 0x01
    15de:	9a 81       	ldd	r25, Y+2	; 0x02
    15e0:	90 93 7d 00 	sts	0x007D, r25
    15e4:	80 93 7c 00 	sts	0x007C, r24
	return E_OK;
    15e8:	80 e0       	ldi	r24, 0x00	; 0

}
    15ea:	0f 90       	pop	r0
    15ec:	0f 90       	pop	r0
    15ee:	cf 91       	pop	r28
    15f0:	df 91       	pop	r29
    15f2:	08 95       	ret

000015f4 <uart_init>:
 *******************************************************************************/
#include "uart.h"


void uart_init(const UART_config * cofig_Ptr)
{
    15f4:	0f 93       	push	r16
    15f6:	1f 93       	push	r17
    15f8:	df 93       	push	r29
    15fa:	cf 93       	push	r28
    15fc:	00 d0       	rcall	.+0      	; 0x15fe <uart_init+0xa>
    15fe:	cd b7       	in	r28, 0x3d	; 61
    1600:	de b7       	in	r29, 0x3e	; 62
    1602:	9a 83       	std	Y+2, r25	; 0x02
    1604:	89 83       	std	Y+1, r24	; 0x01

	UCSRB |= (1 << RXEN) | (1 << TXEN); // enable Tx, Rx
    1606:	aa e2       	ldi	r26, 0x2A	; 42
    1608:	b0 e0       	ldi	r27, 0x00	; 0
    160a:	ea e2       	ldi	r30, 0x2A	; 42
    160c:	f0 e0       	ldi	r31, 0x00	; 0
    160e:	80 81       	ld	r24, Z
    1610:	88 61       	ori	r24, 0x18	; 24
    1612:	8c 93       	st	X, r24
	UCSRC |= (1 << URSEL) ;
    1614:	a0 e4       	ldi	r26, 0x40	; 64
    1616:	b0 e0       	ldi	r27, 0x00	; 0
    1618:	e0 e4       	ldi	r30, 0x40	; 64
    161a:	f0 e0       	ldi	r31, 0x00	; 0
    161c:	80 81       	ld	r24, Z
    161e:	80 68       	ori	r24, 0x80	; 128
    1620:	8c 93       	st	X, r24

	/*double speed*/
	UCSRA = (UCSRA & 0xFD) | (DOUBLE_SPEED << 1);
    1622:	ab e2       	ldi	r26, 0x2B	; 43
    1624:	b0 e0       	ldi	r27, 0x00	; 0
    1626:	eb e2       	ldi	r30, 0x2B	; 43
    1628:	f0 e0       	ldi	r31, 0x00	; 0
    162a:	80 81       	ld	r24, Z
    162c:	82 60       	ori	r24, 0x02	; 2
    162e:	8c 93       	st	X, r24

	UCSRC = (UCSRC & 0xF9) | ((cofig_Ptr->data_bits & 0x03)<<1);
    1630:	a0 e4       	ldi	r26, 0x40	; 64
    1632:	b0 e0       	ldi	r27, 0x00	; 0
    1634:	e0 e4       	ldi	r30, 0x40	; 64
    1636:	f0 e0       	ldi	r31, 0x00	; 0
    1638:	80 81       	ld	r24, Z
    163a:	28 2f       	mov	r18, r24
    163c:	29 7f       	andi	r18, 0xF9	; 249
    163e:	e9 81       	ldd	r30, Y+1	; 0x01
    1640:	fa 81       	ldd	r31, Y+2	; 0x02
    1642:	80 81       	ld	r24, Z
    1644:	88 2f       	mov	r24, r24
    1646:	90 e0       	ldi	r25, 0x00	; 0
    1648:	83 70       	andi	r24, 0x03	; 3
    164a:	90 70       	andi	r25, 0x00	; 0
    164c:	88 0f       	add	r24, r24
    164e:	99 1f       	adc	r25, r25
    1650:	82 2b       	or	r24, r18
    1652:	8c 93       	st	X, r24
	UCSRB = (UCSRB & 0xFB) | (cofig_Ptr->data_bits & 0x04);
    1654:	aa e2       	ldi	r26, 0x2A	; 42
    1656:	b0 e0       	ldi	r27, 0x00	; 0
    1658:	ea e2       	ldi	r30, 0x2A	; 42
    165a:	f0 e0       	ldi	r31, 0x00	; 0
    165c:	80 81       	ld	r24, Z
    165e:	98 2f       	mov	r25, r24
    1660:	9b 7f       	andi	r25, 0xFB	; 251
    1662:	e9 81       	ldd	r30, Y+1	; 0x01
    1664:	fa 81       	ldd	r31, Y+2	; 0x02
    1666:	80 81       	ld	r24, Z
    1668:	84 70       	andi	r24, 0x04	; 4
    166a:	89 2b       	or	r24, r25
    166c:	8c 93       	st	X, r24

	/*parity*/
	UCSRC = (UCSRC & 0xCF) | (cofig_Ptr->parity << 4);
    166e:	a0 e4       	ldi	r26, 0x40	; 64
    1670:	b0 e0       	ldi	r27, 0x00	; 0
    1672:	e0 e4       	ldi	r30, 0x40	; 64
    1674:	f0 e0       	ldi	r31, 0x00	; 0
    1676:	80 81       	ld	r24, Z
    1678:	28 2f       	mov	r18, r24
    167a:	2f 7c       	andi	r18, 0xCF	; 207
    167c:	e9 81       	ldd	r30, Y+1	; 0x01
    167e:	fa 81       	ldd	r31, Y+2	; 0x02
    1680:	81 81       	ldd	r24, Z+1	; 0x01
    1682:	88 2f       	mov	r24, r24
    1684:	90 e0       	ldi	r25, 0x00	; 0
    1686:	82 95       	swap	r24
    1688:	92 95       	swap	r25
    168a:	90 7f       	andi	r25, 0xF0	; 240
    168c:	98 27       	eor	r25, r24
    168e:	80 7f       	andi	r24, 0xF0	; 240
    1690:	98 27       	eor	r25, r24
    1692:	82 2b       	or	r24, r18
    1694:	8c 93       	st	X, r24

	/* stop_bit*/
	UCSRC = (UCSRC & 0xF7) | (cofig_Ptr->stop_bit << 3);
    1696:	a0 e4       	ldi	r26, 0x40	; 64
    1698:	b0 e0       	ldi	r27, 0x00	; 0
    169a:	e0 e4       	ldi	r30, 0x40	; 64
    169c:	f0 e0       	ldi	r31, 0x00	; 0
    169e:	80 81       	ld	r24, Z
    16a0:	28 2f       	mov	r18, r24
    16a2:	27 7f       	andi	r18, 0xF7	; 247
    16a4:	e9 81       	ldd	r30, Y+1	; 0x01
    16a6:	fa 81       	ldd	r31, Y+2	; 0x02
    16a8:	82 81       	ldd	r24, Z+2	; 0x02
    16aa:	88 2f       	mov	r24, r24
    16ac:	90 e0       	ldi	r25, 0x00	; 0
    16ae:	88 0f       	add	r24, r24
    16b0:	99 1f       	adc	r25, r25
    16b2:	88 0f       	add	r24, r24
    16b4:	99 1f       	adc	r25, r25
    16b6:	88 0f       	add	r24, r24
    16b8:	99 1f       	adc	r25, r25
    16ba:	82 2b       	or	r24, r18
    16bc:	8c 93       	st	X, r24

	/*mode*/
	UCSRC = (UCSRC & 0xBF) | (MODE_BIT << 6);
    16be:	a0 e4       	ldi	r26, 0x40	; 64
    16c0:	b0 e0       	ldi	r27, 0x00	; 0
    16c2:	e0 e4       	ldi	r30, 0x40	; 64
    16c4:	f0 e0       	ldi	r31, 0x00	; 0
    16c6:	80 81       	ld	r24, Z
    16c8:	8f 7b       	andi	r24, 0xBF	; 191
    16ca:	8c 93       	st	X, r24

	UBRRL = BAUD_PRESCALE(cofig_Ptr->rate);
    16cc:	09 e2       	ldi	r16, 0x29	; 41
    16ce:	10 e0       	ldi	r17, 0x00	; 0
    16d0:	e9 81       	ldd	r30, Y+1	; 0x01
    16d2:	fa 81       	ldd	r31, Y+2	; 0x02
    16d4:	83 81       	ldd	r24, Z+3	; 0x03
    16d6:	94 81       	ldd	r25, Z+4	; 0x04
    16d8:	cc 01       	movw	r24, r24
    16da:	a0 e0       	ldi	r26, 0x00	; 0
    16dc:	b0 e0       	ldi	r27, 0x00	; 0
    16de:	88 0f       	add	r24, r24
    16e0:	99 1f       	adc	r25, r25
    16e2:	aa 1f       	adc	r26, r26
    16e4:	bb 1f       	adc	r27, r27
    16e6:	88 0f       	add	r24, r24
    16e8:	99 1f       	adc	r25, r25
    16ea:	aa 1f       	adc	r26, r26
    16ec:	bb 1f       	adc	r27, r27
    16ee:	88 0f       	add	r24, r24
    16f0:	99 1f       	adc	r25, r25
    16f2:	aa 1f       	adc	r26, r26
    16f4:	bb 1f       	adc	r27, r27
    16f6:	9c 01       	movw	r18, r24
    16f8:	ad 01       	movw	r20, r26
    16fa:	80 e0       	ldi	r24, 0x00	; 0
    16fc:	92 e1       	ldi	r25, 0x12	; 18
    16fe:	aa e7       	ldi	r26, 0x7A	; 122
    1700:	b0 e0       	ldi	r27, 0x00	; 0
    1702:	bc 01       	movw	r22, r24
    1704:	cd 01       	movw	r24, r26
    1706:	0e 94 c0 10 	call	0x2180	; 0x2180 <__udivmodsi4>
    170a:	da 01       	movw	r26, r20
    170c:	c9 01       	movw	r24, r18
    170e:	81 50       	subi	r24, 0x01	; 1
    1710:	f8 01       	movw	r30, r16
    1712:	80 83       	st	Z, r24
	UBRRH = BAUD_PRESCALE(cofig_Ptr->rate) >> 8;
    1714:	00 e4       	ldi	r16, 0x40	; 64
    1716:	10 e0       	ldi	r17, 0x00	; 0
    1718:	e9 81       	ldd	r30, Y+1	; 0x01
    171a:	fa 81       	ldd	r31, Y+2	; 0x02
    171c:	83 81       	ldd	r24, Z+3	; 0x03
    171e:	94 81       	ldd	r25, Z+4	; 0x04
    1720:	cc 01       	movw	r24, r24
    1722:	a0 e0       	ldi	r26, 0x00	; 0
    1724:	b0 e0       	ldi	r27, 0x00	; 0
    1726:	88 0f       	add	r24, r24
    1728:	99 1f       	adc	r25, r25
    172a:	aa 1f       	adc	r26, r26
    172c:	bb 1f       	adc	r27, r27
    172e:	88 0f       	add	r24, r24
    1730:	99 1f       	adc	r25, r25
    1732:	aa 1f       	adc	r26, r26
    1734:	bb 1f       	adc	r27, r27
    1736:	88 0f       	add	r24, r24
    1738:	99 1f       	adc	r25, r25
    173a:	aa 1f       	adc	r26, r26
    173c:	bb 1f       	adc	r27, r27
    173e:	9c 01       	movw	r18, r24
    1740:	ad 01       	movw	r20, r26
    1742:	80 e0       	ldi	r24, 0x00	; 0
    1744:	92 e1       	ldi	r25, 0x12	; 18
    1746:	aa e7       	ldi	r26, 0x7A	; 122
    1748:	b0 e0       	ldi	r27, 0x00	; 0
    174a:	bc 01       	movw	r22, r24
    174c:	cd 01       	movw	r24, r26
    174e:	0e 94 c0 10 	call	0x2180	; 0x2180 <__udivmodsi4>
    1752:	da 01       	movw	r26, r20
    1754:	c9 01       	movw	r24, r18
    1756:	01 97       	sbiw	r24, 0x01	; 1
    1758:	a1 09       	sbc	r26, r1
    175a:	b1 09       	sbc	r27, r1
    175c:	89 2f       	mov	r24, r25
    175e:	9a 2f       	mov	r25, r26
    1760:	ab 2f       	mov	r26, r27
    1762:	bb 27       	eor	r27, r27
    1764:	f8 01       	movw	r30, r16
    1766:	80 83       	st	Z, r24
}
    1768:	0f 90       	pop	r0
    176a:	0f 90       	pop	r0
    176c:	cf 91       	pop	r28
    176e:	df 91       	pop	r29
    1770:	1f 91       	pop	r17
    1772:	0f 91       	pop	r16
    1774:	08 95       	ret

00001776 <uart_sendByte>:


void uart_sendByte(uint8 data)
{
    1776:	df 93       	push	r29
    1778:	cf 93       	push	r28
    177a:	0f 92       	push	r0
    177c:	cd b7       	in	r28, 0x3d	; 61
    177e:	de b7       	in	r29, 0x3e	; 62
    1780:	89 83       	std	Y+1, r24	; 0x01
	while (BIT_IS_CLEAR(UCSRA ,UDRE)){};
    1782:	eb e2       	ldi	r30, 0x2B	; 43
    1784:	f0 e0       	ldi	r31, 0x00	; 0
    1786:	80 81       	ld	r24, Z
    1788:	88 2f       	mov	r24, r24
    178a:	90 e0       	ldi	r25, 0x00	; 0
    178c:	80 72       	andi	r24, 0x20	; 32
    178e:	90 70       	andi	r25, 0x00	; 0
    1790:	00 97       	sbiw	r24, 0x00	; 0
    1792:	b9 f3       	breq	.-18     	; 0x1782 <uart_sendByte+0xc>
	UDR = data;
    1794:	ec e2       	ldi	r30, 0x2C	; 44
    1796:	f0 e0       	ldi	r31, 0x00	; 0
    1798:	89 81       	ldd	r24, Y+1	; 0x01
    179a:	80 83       	st	Z, r24
}
    179c:	0f 90       	pop	r0
    179e:	cf 91       	pop	r28
    17a0:	df 91       	pop	r29
    17a2:	08 95       	ret

000017a4 <uart_recieveByte>:

uint8 uart_recieveByte(void)
{
    17a4:	df 93       	push	r29
    17a6:	cf 93       	push	r28
    17a8:	cd b7       	in	r28, 0x3d	; 61
    17aa:	de b7       	in	r29, 0x3e	; 62
	while (BIT_IS_CLEAR(UCSRA ,RXC)){};
    17ac:	eb e2       	ldi	r30, 0x2B	; 43
    17ae:	f0 e0       	ldi	r31, 0x00	; 0
    17b0:	80 81       	ld	r24, Z
    17b2:	88 23       	and	r24, r24
    17b4:	dc f7       	brge	.-10     	; 0x17ac <uart_recieveByte+0x8>
	return UDR;
    17b6:	ec e2       	ldi	r30, 0x2C	; 44
    17b8:	f0 e0       	ldi	r31, 0x00	; 0
    17ba:	80 81       	ld	r24, Z
}
    17bc:	cf 91       	pop	r28
    17be:	df 91       	pop	r29
    17c0:	08 95       	ret

000017c2 <uart_sendString>:

void uart_sendString(const uint8 *str)
{
    17c2:	df 93       	push	r29
    17c4:	cf 93       	push	r28
    17c6:	00 d0       	rcall	.+0      	; 0x17c8 <uart_sendString+0x6>
    17c8:	0f 92       	push	r0
    17ca:	cd b7       	in	r28, 0x3d	; 61
    17cc:	de b7       	in	r29, 0x3e	; 62
    17ce:	9b 83       	std	Y+3, r25	; 0x03
    17d0:	8a 83       	std	Y+2, r24	; 0x02
	uint8 i = 0;
    17d2:	19 82       	std	Y+1, r1	; 0x01
    17d4:	0e c0       	rjmp	.+28     	; 0x17f2 <uart_sendString+0x30>
	while (str[i] != '\0')
	{
		uart_sendByte(str[i]);
    17d6:	89 81       	ldd	r24, Y+1	; 0x01
    17d8:	28 2f       	mov	r18, r24
    17da:	30 e0       	ldi	r19, 0x00	; 0
    17dc:	8a 81       	ldd	r24, Y+2	; 0x02
    17de:	9b 81       	ldd	r25, Y+3	; 0x03
    17e0:	fc 01       	movw	r30, r24
    17e2:	e2 0f       	add	r30, r18
    17e4:	f3 1f       	adc	r31, r19
    17e6:	80 81       	ld	r24, Z
    17e8:	0e 94 bb 0b 	call	0x1776	; 0x1776 <uart_sendByte>
		i++;
    17ec:	89 81       	ldd	r24, Y+1	; 0x01
    17ee:	8f 5f       	subi	r24, 0xFF	; 255
    17f0:	89 83       	std	Y+1, r24	; 0x01
}

void uart_sendString(const uint8 *str)
{
	uint8 i = 0;
	while (str[i] != '\0')
    17f2:	89 81       	ldd	r24, Y+1	; 0x01
    17f4:	28 2f       	mov	r18, r24
    17f6:	30 e0       	ldi	r19, 0x00	; 0
    17f8:	8a 81       	ldd	r24, Y+2	; 0x02
    17fa:	9b 81       	ldd	r25, Y+3	; 0x03
    17fc:	fc 01       	movw	r30, r24
    17fe:	e2 0f       	add	r30, r18
    1800:	f3 1f       	adc	r31, r19
    1802:	80 81       	ld	r24, Z
    1804:	88 23       	and	r24, r24
    1806:	39 f7       	brne	.-50     	; 0x17d6 <uart_sendString+0x14>
	{
		uart_sendByte(str[i]);
		i++;
	}
}
    1808:	0f 90       	pop	r0
    180a:	0f 90       	pop	r0
    180c:	0f 90       	pop	r0
    180e:	cf 91       	pop	r28
    1810:	df 91       	pop	r29
    1812:	08 95       	ret

00001814 <uart_recieveString>:

void uart_recieveString(uint8 *str)
{
    1814:	0f 93       	push	r16
    1816:	1f 93       	push	r17
    1818:	df 93       	push	r29
    181a:	cf 93       	push	r28
    181c:	00 d0       	rcall	.+0      	; 0x181e <uart_recieveString+0xa>
    181e:	0f 92       	push	r0
    1820:	cd b7       	in	r28, 0x3d	; 61
    1822:	de b7       	in	r29, 0x3e	; 62
    1824:	9b 83       	std	Y+3, r25	; 0x03
    1826:	8a 83       	std	Y+2, r24	; 0x02
	uint8 i = 0;
    1828:	19 82       	std	Y+1, r1	; 0x01
	str[i] = uart_recieveByte();
    182a:	89 81       	ldd	r24, Y+1	; 0x01
    182c:	28 2f       	mov	r18, r24
    182e:	30 e0       	ldi	r19, 0x00	; 0
    1830:	8a 81       	ldd	r24, Y+2	; 0x02
    1832:	9b 81       	ldd	r25, Y+3	; 0x03
    1834:	8c 01       	movw	r16, r24
    1836:	02 0f       	add	r16, r18
    1838:	13 1f       	adc	r17, r19
    183a:	0e 94 d2 0b 	call	0x17a4	; 0x17a4 <uart_recieveByte>
    183e:	f8 01       	movw	r30, r16
    1840:	80 83       	st	Z, r24
    1842:	0f c0       	rjmp	.+30     	; 0x1862 <uart_recieveString+0x4e>
	while (str[i] != '#')
	{
		i++;
    1844:	89 81       	ldd	r24, Y+1	; 0x01
    1846:	8f 5f       	subi	r24, 0xFF	; 255
    1848:	89 83       	std	Y+1, r24	; 0x01
		str[i] = uart_recieveByte();
    184a:	89 81       	ldd	r24, Y+1	; 0x01
    184c:	28 2f       	mov	r18, r24
    184e:	30 e0       	ldi	r19, 0x00	; 0
    1850:	8a 81       	ldd	r24, Y+2	; 0x02
    1852:	9b 81       	ldd	r25, Y+3	; 0x03
    1854:	8c 01       	movw	r16, r24
    1856:	02 0f       	add	r16, r18
    1858:	13 1f       	adc	r17, r19
    185a:	0e 94 d2 0b 	call	0x17a4	; 0x17a4 <uart_recieveByte>
    185e:	f8 01       	movw	r30, r16
    1860:	80 83       	st	Z, r24

void uart_recieveString(uint8 *str)
{
	uint8 i = 0;
	str[i] = uart_recieveByte();
	while (str[i] != '#')
    1862:	89 81       	ldd	r24, Y+1	; 0x01
    1864:	28 2f       	mov	r18, r24
    1866:	30 e0       	ldi	r19, 0x00	; 0
    1868:	8a 81       	ldd	r24, Y+2	; 0x02
    186a:	9b 81       	ldd	r25, Y+3	; 0x03
    186c:	fc 01       	movw	r30, r24
    186e:	e2 0f       	add	r30, r18
    1870:	f3 1f       	adc	r31, r19
    1872:	80 81       	ld	r24, Z
    1874:	83 32       	cpi	r24, 0x23	; 35
    1876:	31 f7       	brne	.-52     	; 0x1844 <uart_recieveString+0x30>
	{
		i++;
		str[i] = uart_recieveByte();
	}
	str[i] = '\0';
    1878:	89 81       	ldd	r24, Y+1	; 0x01
    187a:	28 2f       	mov	r18, r24
    187c:	30 e0       	ldi	r19, 0x00	; 0
    187e:	8a 81       	ldd	r24, Y+2	; 0x02
    1880:	9b 81       	ldd	r25, Y+3	; 0x03
    1882:	fc 01       	movw	r30, r24
    1884:	e2 0f       	add	r30, r18
    1886:	f3 1f       	adc	r31, r19
    1888:	10 82       	st	Z, r1
}
    188a:	0f 90       	pop	r0
    188c:	0f 90       	pop	r0
    188e:	0f 90       	pop	r0
    1890:	cf 91       	pop	r28
    1892:	df 91       	pop	r29
    1894:	1f 91       	pop	r17
    1896:	0f 91       	pop	r16
    1898:	08 95       	ret

0000189a <Buzzer_init>:


#include "gpio.h"
#include "buzzer.h"

uint8 Buzzer_init(){
    189a:	df 93       	push	r29
    189c:	cf 93       	push	r28
    189e:	cd b7       	in	r28, 0x3d	; 61
    18a0:	de b7       	in	r29, 0x3e	; 62
	GPIO_Set_pin_output(Buzzer_PORT,Buzzer_PIN) ;
    18a2:	83 e0       	ldi	r24, 0x03	; 3
    18a4:	67 e0       	ldi	r22, 0x07	; 7
    18a6:	0e 94 a3 05 	call	0xb46	; 0xb46 <GPIO_Set_pin_output>
	return E_OK;
    18aa:	80 e0       	ldi	r24, 0x00	; 0
}
    18ac:	cf 91       	pop	r28
    18ae:	df 91       	pop	r29
    18b0:	08 95       	ret

000018b2 <Buzzer_on>:
uint8 Buzzer_on(){
    18b2:	df 93       	push	r29
    18b4:	cf 93       	push	r28
    18b6:	cd b7       	in	r28, 0x3d	; 61
    18b8:	de b7       	in	r29, 0x3e	; 62
    GPIO_set_pin_value(Buzzer_PORT,Buzzer_PIN,HIGH) ;
    18ba:	83 e0       	ldi	r24, 0x03	; 3
    18bc:	67 e0       	ldi	r22, 0x07	; 7
    18be:	41 e0       	ldi	r20, 0x01	; 1
    18c0:	0e 94 6b 08 	call	0x10d6	; 0x10d6 <GPIO_set_pin_value>

	return E_OK;
    18c4:	80 e0       	ldi	r24, 0x00	; 0
}
    18c6:	cf 91       	pop	r28
    18c8:	df 91       	pop	r29
    18ca:	08 95       	ret

000018cc <Buzzer_off>:
uint8 Buzzer_off(){
    18cc:	df 93       	push	r29
    18ce:	cf 93       	push	r28
    18d0:	cd b7       	in	r28, 0x3d	; 61
    18d2:	de b7       	in	r29, 0x3e	; 62
	GPIO_set_pin_value(Buzzer_PORT,Buzzer_PIN,LOW) ;
    18d4:	83 e0       	ldi	r24, 0x03	; 3
    18d6:	67 e0       	ldi	r22, 0x07	; 7
    18d8:	40 e0       	ldi	r20, 0x00	; 0
    18da:	0e 94 6b 08 	call	0x10d6	; 0x10d6 <GPIO_set_pin_value>
	return E_OK;
    18de:	80 e0       	ldi	r24, 0x00	; 0
}
    18e0:	cf 91       	pop	r28
    18e2:	df 91       	pop	r29
    18e4:	08 95       	ret

000018e6 <EEPROM_init>:
 *******************************************************************************/
#include "eeprom.h"


uint8 EEPROM_init(const TWI_config * cofig_Ptr)
{
    18e6:	df 93       	push	r29
    18e8:	cf 93       	push	r28
    18ea:	00 d0       	rcall	.+0      	; 0x18ec <EEPROM_init+0x6>
    18ec:	cd b7       	in	r28, 0x3d	; 61
    18ee:	de b7       	in	r29, 0x3e	; 62
    18f0:	9a 83       	std	Y+2, r25	; 0x02
    18f2:	89 83       	std	Y+1, r24	; 0x01
	TWI_init (cofig_Ptr);
    18f4:	89 81       	ldd	r24, Y+1	; 0x01
    18f6:	9a 81       	ldd	r25, Y+2	; 0x02
    18f8:	0e 94 e4 09 	call	0x13c8	; 0x13c8 <TWI_init>
	return E_OK;
    18fc:	80 e0       	ldi	r24, 0x00	; 0
}
    18fe:	0f 90       	pop	r0
    1900:	0f 90       	pop	r0
    1902:	cf 91       	pop	r28
    1904:	df 91       	pop	r29
    1906:	08 95       	ret

00001908 <EEPROM_writeByte>:

uint8 EEPROM_writeByte(uint16 a_address,uint8 a_data)
{
    1908:	df 93       	push	r29
    190a:	cf 93       	push	r28
    190c:	00 d0       	rcall	.+0      	; 0x190e <EEPROM_writeByte+0x6>
    190e:	00 d0       	rcall	.+0      	; 0x1910 <EEPROM_writeByte+0x8>
    1910:	cd b7       	in	r28, 0x3d	; 61
    1912:	de b7       	in	r29, 0x3e	; 62
    1914:	9a 83       	std	Y+2, r25	; 0x02
    1916:	89 83       	std	Y+1, r24	; 0x01
    1918:	6b 83       	std	Y+3, r22	; 0x03
	TWI_start();
    191a:	0e 94 01 0a 	call	0x1402	; 0x1402 <TWI_start>
	if (TWI_getStatus() != TW_START )
    191e:	0e 94 59 0a 	call	0x14b2	; 0x14b2 <TWI_getStatus>
    1922:	88 30       	cpi	r24, 0x08	; 8
    1924:	19 f0       	breq	.+6      	; 0x192c <EEPROM_writeByte+0x24>
		return E_NOT_OK;
    1926:	81 e0       	ldi	r24, 0x01	; 1
    1928:	8c 83       	std	Y+4, r24	; 0x04
    192a:	2a c0       	rjmp	.+84     	; 0x1980 <EEPROM_writeByte+0x78>

	TWI_write((uint8)(0xA0 | ((a_address & 0x700) >> 7))) ;  //device address (salve) EEPROM
    192c:	89 81       	ldd	r24, Y+1	; 0x01
    192e:	9a 81       	ldd	r25, Y+2	; 0x02
    1930:	80 70       	andi	r24, 0x00	; 0
    1932:	97 70       	andi	r25, 0x07	; 7
    1934:	88 0f       	add	r24, r24
    1936:	89 2f       	mov	r24, r25
    1938:	88 1f       	adc	r24, r24
    193a:	99 0b       	sbc	r25, r25
    193c:	91 95       	neg	r25
    193e:	80 6a       	ori	r24, 0xA0	; 160
    1940:	0e 94 1c 0a 	call	0x1438	; 0x1438 <TWI_write>
	if (TWI_getStatus() != TW_MT_SLA_W_ACK )
    1944:	0e 94 59 0a 	call	0x14b2	; 0x14b2 <TWI_getStatus>
    1948:	88 31       	cpi	r24, 0x18	; 24
    194a:	19 f0       	breq	.+6      	; 0x1952 <EEPROM_writeByte+0x4a>
		return E_NOT_OK;
    194c:	81 e0       	ldi	r24, 0x01	; 1
    194e:	8c 83       	std	Y+4, r24	; 0x04
    1950:	17 c0       	rjmp	.+46     	; 0x1980 <EEPROM_writeByte+0x78>

	TWI_write((uint8)a_address); // memory location in EEPROM
    1952:	89 81       	ldd	r24, Y+1	; 0x01
    1954:	0e 94 1c 0a 	call	0x1438	; 0x1438 <TWI_write>
	if (TWI_getStatus() != TW_MT_DATA_ACK )
    1958:	0e 94 59 0a 	call	0x14b2	; 0x14b2 <TWI_getStatus>
    195c:	88 32       	cpi	r24, 0x28	; 40
    195e:	19 f0       	breq	.+6      	; 0x1966 <EEPROM_writeByte+0x5e>
		return E_NOT_OK;
    1960:	81 e0       	ldi	r24, 0x01	; 1
    1962:	8c 83       	std	Y+4, r24	; 0x04
    1964:	0d c0       	rjmp	.+26     	; 0x1980 <EEPROM_writeByte+0x78>

	TWI_write(a_data); // data
    1966:	8b 81       	ldd	r24, Y+3	; 0x03
    1968:	0e 94 1c 0a 	call	0x1438	; 0x1438 <TWI_write>
	if (TWI_getStatus() != TW_MT_DATA_ACK )
    196c:	0e 94 59 0a 	call	0x14b2	; 0x14b2 <TWI_getStatus>
    1970:	88 32       	cpi	r24, 0x28	; 40
    1972:	19 f0       	breq	.+6      	; 0x197a <EEPROM_writeByte+0x72>
		return E_NOT_OK;
    1974:	81 e0       	ldi	r24, 0x01	; 1
    1976:	8c 83       	std	Y+4, r24	; 0x04
    1978:	03 c0       	rjmp	.+6      	; 0x1980 <EEPROM_writeByte+0x78>

	TWI_stop ();
    197a:	0e 94 11 0a 	call	0x1422	; 0x1422 <TWI_stop>

	return E_OK;
    197e:	1c 82       	std	Y+4, r1	; 0x04
    1980:	8c 81       	ldd	r24, Y+4	; 0x04
}
    1982:	0f 90       	pop	r0
    1984:	0f 90       	pop	r0
    1986:	0f 90       	pop	r0
    1988:	0f 90       	pop	r0
    198a:	cf 91       	pop	r28
    198c:	df 91       	pop	r29
    198e:	08 95       	ret

00001990 <EEPROM_readByte>:


uint8 EEPROM_readByte(uint16 a_address,uint8 *a_data_ptr)
{
    1990:	df 93       	push	r29
    1992:	cf 93       	push	r28
    1994:	00 d0       	rcall	.+0      	; 0x1996 <EEPROM_readByte+0x6>
    1996:	00 d0       	rcall	.+0      	; 0x1998 <EEPROM_readByte+0x8>
    1998:	0f 92       	push	r0
    199a:	cd b7       	in	r28, 0x3d	; 61
    199c:	de b7       	in	r29, 0x3e	; 62
    199e:	9a 83       	std	Y+2, r25	; 0x02
    19a0:	89 83       	std	Y+1, r24	; 0x01
    19a2:	7c 83       	std	Y+4, r23	; 0x04
    19a4:	6b 83       	std	Y+3, r22	; 0x03
	TWI_start();
    19a6:	0e 94 01 0a 	call	0x1402	; 0x1402 <TWI_start>
	if (TWI_getStatus() != TW_START )
    19aa:	0e 94 59 0a 	call	0x14b2	; 0x14b2 <TWI_getStatus>
    19ae:	88 30       	cpi	r24, 0x08	; 8
    19b0:	19 f0       	breq	.+6      	; 0x19b8 <EEPROM_readByte+0x28>
		return E_NOT_OK;
    19b2:	81 e0       	ldi	r24, 0x01	; 1
    19b4:	8d 83       	std	Y+5, r24	; 0x05
    19b6:	48 c0       	rjmp	.+144    	; 0x1a48 <EEPROM_readByte+0xb8>

	TWI_write((uint8)(0xA0 | ((a_address & 0x700) >> 7))) ;
    19b8:	89 81       	ldd	r24, Y+1	; 0x01
    19ba:	9a 81       	ldd	r25, Y+2	; 0x02
    19bc:	80 70       	andi	r24, 0x00	; 0
    19be:	97 70       	andi	r25, 0x07	; 7
    19c0:	88 0f       	add	r24, r24
    19c2:	89 2f       	mov	r24, r25
    19c4:	88 1f       	adc	r24, r24
    19c6:	99 0b       	sbc	r25, r25
    19c8:	91 95       	neg	r25
    19ca:	80 6a       	ori	r24, 0xA0	; 160
    19cc:	0e 94 1c 0a 	call	0x1438	; 0x1438 <TWI_write>
	if (TWI_getStatus() != TW_MT_SLA_W_ACK )
    19d0:	0e 94 59 0a 	call	0x14b2	; 0x14b2 <TWI_getStatus>
    19d4:	88 31       	cpi	r24, 0x18	; 24
    19d6:	19 f0       	breq	.+6      	; 0x19de <EEPROM_readByte+0x4e>
		return E_NOT_OK;
    19d8:	81 e0       	ldi	r24, 0x01	; 1
    19da:	8d 83       	std	Y+5, r24	; 0x05
    19dc:	35 c0       	rjmp	.+106    	; 0x1a48 <EEPROM_readByte+0xb8>

	TWI_write((uint8)a_address);
    19de:	89 81       	ldd	r24, Y+1	; 0x01
    19e0:	0e 94 1c 0a 	call	0x1438	; 0x1438 <TWI_write>
	if (TWI_getStatus() != TW_MT_DATA_ACK )
    19e4:	0e 94 59 0a 	call	0x14b2	; 0x14b2 <TWI_getStatus>
    19e8:	88 32       	cpi	r24, 0x28	; 40
    19ea:	19 f0       	breq	.+6      	; 0x19f2 <EEPROM_readByte+0x62>
		return E_NOT_OK;
    19ec:	81 e0       	ldi	r24, 0x01	; 1
    19ee:	8d 83       	std	Y+5, r24	; 0x05
    19f0:	2b c0       	rjmp	.+86     	; 0x1a48 <EEPROM_readByte+0xb8>

	TWI_start();
    19f2:	0e 94 01 0a 	call	0x1402	; 0x1402 <TWI_start>
	if (TWI_getStatus() != TW_REP_START)
    19f6:	0e 94 59 0a 	call	0x14b2	; 0x14b2 <TWI_getStatus>
    19fa:	80 31       	cpi	r24, 0x10	; 16
    19fc:	19 f0       	breq	.+6      	; 0x1a04 <EEPROM_readByte+0x74>
		return E_NOT_OK;
    19fe:	81 e0       	ldi	r24, 0x01	; 1
    1a00:	8d 83       	std	Y+5, r24	; 0x05
    1a02:	22 c0       	rjmp	.+68     	; 0x1a48 <EEPROM_readByte+0xb8>

	TWI_write((uint8)(0xA0 | ((a_address & 0x700) >> 7)|1)) ;
    1a04:	89 81       	ldd	r24, Y+1	; 0x01
    1a06:	9a 81       	ldd	r25, Y+2	; 0x02
    1a08:	80 70       	andi	r24, 0x00	; 0
    1a0a:	97 70       	andi	r25, 0x07	; 7
    1a0c:	88 0f       	add	r24, r24
    1a0e:	89 2f       	mov	r24, r25
    1a10:	88 1f       	adc	r24, r24
    1a12:	99 0b       	sbc	r25, r25
    1a14:	91 95       	neg	r25
    1a16:	81 6a       	ori	r24, 0xA1	; 161
    1a18:	0e 94 1c 0a 	call	0x1438	; 0x1438 <TWI_write>
	if (TWI_getStatus() != TW_MT_SLA_R_ACK)
    1a1c:	0e 94 59 0a 	call	0x14b2	; 0x14b2 <TWI_getStatus>
    1a20:	80 34       	cpi	r24, 0x40	; 64
    1a22:	19 f0       	breq	.+6      	; 0x1a2a <EEPROM_readByte+0x9a>
		return E_NOT_OK;
    1a24:	81 e0       	ldi	r24, 0x01	; 1
    1a26:	8d 83       	std	Y+5, r24	; 0x05
    1a28:	0f c0       	rjmp	.+30     	; 0x1a48 <EEPROM_readByte+0xb8>

	*a_data_ptr = TWI_readWithNACK();
    1a2a:	0e 94 46 0a 	call	0x148c	; 0x148c <TWI_readWithNACK>
    1a2e:	eb 81       	ldd	r30, Y+3	; 0x03
    1a30:	fc 81       	ldd	r31, Y+4	; 0x04
    1a32:	80 83       	st	Z, r24
	if (TWI_getStatus() != TW_MR_DATA_NACK )
    1a34:	0e 94 59 0a 	call	0x14b2	; 0x14b2 <TWI_getStatus>
    1a38:	88 35       	cpi	r24, 0x58	; 88
    1a3a:	19 f0       	breq	.+6      	; 0x1a42 <EEPROM_readByte+0xb2>
		return E_NOT_OK;
    1a3c:	81 e0       	ldi	r24, 0x01	; 1
    1a3e:	8d 83       	std	Y+5, r24	; 0x05
    1a40:	03 c0       	rjmp	.+6      	; 0x1a48 <EEPROM_readByte+0xb8>

	TWI_stop();
    1a42:	0e 94 11 0a 	call	0x1422	; 0x1422 <TWI_stop>

	return E_OK;
    1a46:	1d 82       	std	Y+5, r1	; 0x05
    1a48:	8d 81       	ldd	r24, Y+5	; 0x05
}
    1a4a:	0f 90       	pop	r0
    1a4c:	0f 90       	pop	r0
    1a4e:	0f 90       	pop	r0
    1a50:	0f 90       	pop	r0
    1a52:	0f 90       	pop	r0
    1a54:	cf 91       	pop	r28
    1a56:	df 91       	pop	r29
    1a58:	08 95       	ret

00001a5a <Motor_init>:


/*******************************************************************************
 *                              Function Definitions                           *
 *******************************************************************************/
uint8 Motor_init(void){
    1a5a:	df 93       	push	r29
    1a5c:	cf 93       	push	r28
    1a5e:	cd b7       	in	r28, 0x3d	; 61
    1a60:	de b7       	in	r29, 0x3e	; 62
	/*
	 * EN , IN1 ,IN2 IS OUTPUT
	 * */
	/*  IN1 */
	GPIO_Set_pin_output(Motor_IN1_PORT,Motor_IN1) ;
    1a62:	82 e0       	ldi	r24, 0x02	; 2
    1a64:	65 e0       	ldi	r22, 0x05	; 5
    1a66:	0e 94 a3 05 	call	0xb46	; 0xb46 <GPIO_Set_pin_output>
//	SET_BIT(Motor_IN1_PORT_DIR,Motor_IN1);
//	CLEAR_BIT(Motor_IN1_PORT_DATA,Motor_IN1);
	/*  IN2 */
	GPIO_Set_pin_output(Motor_IN2_PORT,Motor_IN2) ;
    1a6a:	82 e0       	ldi	r24, 0x02	; 2
    1a6c:	64 e0       	ldi	r22, 0x04	; 4
    1a6e:	0e 94 a3 05 	call	0xb46	; 0xb46 <GPIO_Set_pin_output>
//	CLEAR_BIT(Motor_IN2_PORT_DATA,Motor_IN2);
	/*  EN */
	//GPIO_Set_pin_output(Motor_EN_PORT,Motor_EN) ;
//	SET_BIT(Motor_EN_PORT_DIR,Motor_EN);
//	CLEAR_BIT(Motor_EN_PORT_DATA,Motor_EN);
	return E_OK;
    1a72:	80 e0       	ldi	r24, 0x00	; 0
}
    1a74:	cf 91       	pop	r28
    1a76:	df 91       	pop	r29
    1a78:	08 95       	ret

00001a7a <Motor_rotate_AntiClockwise>:



uint8 Motor_rotate_AntiClockwise(void){
    1a7a:	df 93       	push	r29
    1a7c:	cf 93       	push	r28
    1a7e:	cd b7       	in	r28, 0x3d	; 61
    1a80:	de b7       	in	r29, 0x3e	; 62
	/*
	 * IN1 --> HIGH
	 * IN2 --> LOW
	 * */
	 GPIO_set_pin_value(Motor_IN1_PORT,Motor_IN1,HIGH) ;
    1a82:	82 e0       	ldi	r24, 0x02	; 2
    1a84:	65 e0       	ldi	r22, 0x05	; 5
    1a86:	41 e0       	ldi	r20, 0x01	; 1
    1a88:	0e 94 6b 08 	call	0x10d6	; 0x10d6 <GPIO_set_pin_value>
	 GPIO_set_pin_value(Motor_IN2_PORT,Motor_IN2,LOW) ;
    1a8c:	82 e0       	ldi	r24, 0x02	; 2
    1a8e:	64 e0       	ldi	r22, 0x04	; 4
    1a90:	40 e0       	ldi	r20, 0x00	; 0
    1a92:	0e 94 6b 08 	call	0x10d6	; 0x10d6 <GPIO_set_pin_value>
//	SET_BIT(Motor_IN1_PORT_DATA,Motor_IN1);
//	CLEAR_BIT(Motor_IN2_PORT_DATA,Motor_IN2);
	 return E_OK;
    1a96:	80 e0       	ldi	r24, 0x00	; 0
}
    1a98:	cf 91       	pop	r28
    1a9a:	df 91       	pop	r29
    1a9c:	08 95       	ret

00001a9e <Motor_rotate_Clockwise>:

uint8 Motor_rotate_Clockwise(void){
    1a9e:	df 93       	push	r29
    1aa0:	cf 93       	push	r28
    1aa2:	cd b7       	in	r28, 0x3d	; 61
    1aa4:	de b7       	in	r29, 0x3e	; 62
	/*
	 * IN1 --> LOW
	 * IN2 --> HIGH
	 * */
	GPIO_set_pin_value(Motor_IN1_PORT,Motor_IN1,LOW) ;
    1aa6:	82 e0       	ldi	r24, 0x02	; 2
    1aa8:	65 e0       	ldi	r22, 0x05	; 5
    1aaa:	40 e0       	ldi	r20, 0x00	; 0
    1aac:	0e 94 6b 08 	call	0x10d6	; 0x10d6 <GPIO_set_pin_value>
    GPIO_set_pin_value(Motor_IN2_PORT,Motor_IN2,HIGH) ;
    1ab0:	82 e0       	ldi	r24, 0x02	; 2
    1ab2:	64 e0       	ldi	r22, 0x04	; 4
    1ab4:	41 e0       	ldi	r20, 0x01	; 1
    1ab6:	0e 94 6b 08 	call	0x10d6	; 0x10d6 <GPIO_set_pin_value>
//	CLEAR_BIT(Motor_IN1_PORT_DATA,Motor_IN1);
//	SET_BIT(Motor_IN2_PORT_DATA,Motor_IN2);
    return E_OK;
    1aba:	80 e0       	ldi	r24, 0x00	; 0
}
    1abc:	cf 91       	pop	r28
    1abe:	df 91       	pop	r29
    1ac0:	08 95       	ret

00001ac2 <Motor_stop>:
uint8 Motor_stop(void){
    1ac2:	df 93       	push	r29
    1ac4:	cf 93       	push	r28
    1ac6:	cd b7       	in	r28, 0x3d	; 61
    1ac8:	de b7       	in	r29, 0x3e	; 62
	/*
	 * IN1 --> LOW
	 * IN2 --> LOW
	 * */
	GPIO_set_pin_value(Motor_IN1_PORT,Motor_IN1,LOW) ;
    1aca:	82 e0       	ldi	r24, 0x02	; 2
    1acc:	65 e0       	ldi	r22, 0x05	; 5
    1ace:	40 e0       	ldi	r20, 0x00	; 0
    1ad0:	0e 94 6b 08 	call	0x10d6	; 0x10d6 <GPIO_set_pin_value>
	GPIO_set_pin_value(Motor_IN2_PORT,Motor_IN2,LOW) ;
    1ad4:	82 e0       	ldi	r24, 0x02	; 2
    1ad6:	64 e0       	ldi	r22, 0x04	; 4
    1ad8:	40 e0       	ldi	r20, 0x00	; 0
    1ada:	0e 94 6b 08 	call	0x10d6	; 0x10d6 <GPIO_set_pin_value>
//	CLEAR_BIT(Motor_IN1_PORT_DATA,Motor_IN1);
//	CLEAR_BIT(Motor_IN2_PORT_DATA,Motor_IN2);
	return E_OK;
    1ade:	80 e0       	ldi	r24, 0x00	; 0
}
    1ae0:	cf 91       	pop	r28
    1ae2:	df 91       	pop	r29
    1ae4:	08 95       	ret

00001ae6 <Motor_toggle>:

uint8 Motor_toggle(void){
    1ae6:	df 93       	push	r29
    1ae8:	cf 93       	push	r28
    1aea:	cd b7       	in	r28, 0x3d	; 61
    1aec:	de b7       	in	r29, 0x3e	; 62
	 GPIO_toggle_pin_val(Motor_IN1_PORT,Motor_IN1);
    1aee:	82 e0       	ldi	r24, 0x02	; 2
    1af0:	65 e0       	ldi	r22, 0x05	; 5
    1af2:	0e 94 5e 09 	call	0x12bc	; 0x12bc <GPIO_toggle_pin_val>
	 GPIO_toggle_pin_val(Motor_IN2_PORT,Motor_IN2);
    1af6:	82 e0       	ldi	r24, 0x02	; 2
    1af8:	64 e0       	ldi	r22, 0x04	; 4
    1afa:	0e 94 5e 09 	call	0x12bc	; 0x12bc <GPIO_toggle_pin_val>
//	TOGGLE_BIT(Motor_IN1_PORT_DATA,Motor_IN1);
//	TOGGLE_BIT(Motor_IN2_PORT_DATA,Motor_IN2);
	return E_OK;
    1afe:	80 e0       	ldi	r24, 0x00	; 0
}
    1b00:	cf 91       	pop	r28
    1b02:	df 91       	pop	r29
    1b04:	08 95       	ret

00001b06 <cmp>:
#define UNMATCHING 0x30
#define THEIF 0x40

/* function to compare 2 passwords*/
uint8 cmp (uint8 password_1[], uint8 password_2[])
{
    1b06:	df 93       	push	r29
    1b08:	cf 93       	push	r28
    1b0a:	00 d0       	rcall	.+0      	; 0x1b0c <cmp+0x6>
    1b0c:	00 d0       	rcall	.+0      	; 0x1b0e <cmp+0x8>
    1b0e:	00 d0       	rcall	.+0      	; 0x1b10 <cmp+0xa>
    1b10:	cd b7       	in	r28, 0x3d	; 61
    1b12:	de b7       	in	r29, 0x3e	; 62
    1b14:	9b 83       	std	Y+3, r25	; 0x03
    1b16:	8a 83       	std	Y+2, r24	; 0x02
    1b18:	7d 83       	std	Y+5, r23	; 0x05
    1b1a:	6c 83       	std	Y+4, r22	; 0x04
	for(uint8 i = 0; i < PASSWORD_LEN; i++)
    1b1c:	19 82       	std	Y+1, r1	; 0x01
    1b1e:	19 c0       	rjmp	.+50     	; 0x1b52 <cmp+0x4c>
	{
		if (password_1[i] != password_2[i]) return 0;
    1b20:	89 81       	ldd	r24, Y+1	; 0x01
    1b22:	28 2f       	mov	r18, r24
    1b24:	30 e0       	ldi	r19, 0x00	; 0
    1b26:	8a 81       	ldd	r24, Y+2	; 0x02
    1b28:	9b 81       	ldd	r25, Y+3	; 0x03
    1b2a:	fc 01       	movw	r30, r24
    1b2c:	e2 0f       	add	r30, r18
    1b2e:	f3 1f       	adc	r31, r19
    1b30:	40 81       	ld	r20, Z
    1b32:	89 81       	ldd	r24, Y+1	; 0x01
    1b34:	28 2f       	mov	r18, r24
    1b36:	30 e0       	ldi	r19, 0x00	; 0
    1b38:	8c 81       	ldd	r24, Y+4	; 0x04
    1b3a:	9d 81       	ldd	r25, Y+5	; 0x05
    1b3c:	fc 01       	movw	r30, r24
    1b3e:	e2 0f       	add	r30, r18
    1b40:	f3 1f       	adc	r31, r19
    1b42:	80 81       	ld	r24, Z
    1b44:	48 17       	cp	r20, r24
    1b46:	11 f0       	breq	.+4      	; 0x1b4c <cmp+0x46>
    1b48:	1e 82       	std	Y+6, r1	; 0x06
    1b4a:	08 c0       	rjmp	.+16     	; 0x1b5c <cmp+0x56>
#define THEIF 0x40

/* function to compare 2 passwords*/
uint8 cmp (uint8 password_1[], uint8 password_2[])
{
	for(uint8 i = 0; i < PASSWORD_LEN; i++)
    1b4c:	89 81       	ldd	r24, Y+1	; 0x01
    1b4e:	8f 5f       	subi	r24, 0xFF	; 255
    1b50:	89 83       	std	Y+1, r24	; 0x01
    1b52:	89 81       	ldd	r24, Y+1	; 0x01
    1b54:	85 30       	cpi	r24, 0x05	; 5
    1b56:	20 f3       	brcs	.-56     	; 0x1b20 <cmp+0x1a>
	{
		if (password_1[i] != password_2[i]) return 0;
	}

	return 1;
    1b58:	81 e0       	ldi	r24, 0x01	; 1
    1b5a:	8e 83       	std	Y+6, r24	; 0x06
    1b5c:	8e 81       	ldd	r24, Y+6	; 0x06
}
    1b5e:	26 96       	adiw	r28, 0x06	; 6
    1b60:	0f b6       	in	r0, 0x3f	; 63
    1b62:	f8 94       	cli
    1b64:	de bf       	out	0x3e, r29	; 62
    1b66:	0f be       	out	0x3f, r0	; 63
    1b68:	cd bf       	out	0x3d, r28	; 61
    1b6a:	cf 91       	pop	r28
    1b6c:	df 91       	pop	r29
    1b6e:	08 95       	ret

00001b70 <main>:



int main(void)
{
    1b70:	0f 93       	push	r16
    1b72:	1f 93       	push	r17
    1b74:	df 93       	push	r29
    1b76:	cf 93       	push	r28
    1b78:	cd b7       	in	r28, 0x3d	; 61
    1b7a:	de b7       	in	r29, 0x3e	; 62
    1b7c:	c6 55       	subi	r28, 0x56	; 86
    1b7e:	d0 40       	sbci	r29, 0x00	; 0
    1b80:	0f b6       	in	r0, 0x3f	; 63
    1b82:	f8 94       	cli
    1b84:	de bf       	out	0x3e, r29	; 62
    1b86:	0f be       	out	0x3f, r0	; 63
    1b88:	cd bf       	out	0x3d, r28	; 61
	uint8 password[5]; // the received password using UART
	uint8 i ;
	uint8 rx_data; // rx_data->(option) = (-) or (+)

	/* Enable Global Interrupt */
	SREG |= (1 << 7); // I_bit
    1b8a:	af e5       	ldi	r26, 0x5F	; 95
    1b8c:	b0 e0       	ldi	r27, 0x00	; 0
    1b8e:	ef e5       	ldi	r30, 0x5F	; 95
    1b90:	f0 e0       	ldi	r31, 0x00	; 0
    1b92:	80 81       	ld	r24, Z
    1b94:	80 68       	ori	r24, 0x80	; 128
    1b96:	8c 93       	st	X, r24

	/* output pin for BUZZER */
//	DDRC |= (1 << 7);
//	PORTC &= ~(1 << 7);

	UART_config config = {BIT_8, DISABLE, STOP_BIT_1,9600};
    1b98:	ce 01       	movw	r24, r28
    1b9a:	8e 96       	adiw	r24, 0x2e	; 46
    1b9c:	25 96       	adiw	r28, 0x05	; 5
    1b9e:	9f af       	std	Y+63, r25	; 0x3f
    1ba0:	8e af       	std	Y+62, r24	; 0x3e
    1ba2:	25 97       	sbiw	r28, 0x05	; 5
    1ba4:	e7 e7       	ldi	r30, 0x77	; 119
    1ba6:	f0 e0       	ldi	r31, 0x00	; 0
    1ba8:	27 96       	adiw	r28, 0x07	; 7
    1baa:	ff af       	std	Y+63, r31	; 0x3f
    1bac:	ee af       	std	Y+62, r30	; 0x3e
    1bae:	27 97       	sbiw	r28, 0x07	; 7
    1bb0:	f5 e0       	ldi	r31, 0x05	; 5
    1bb2:	28 96       	adiw	r28, 0x08	; 8
    1bb4:	ff af       	std	Y+63, r31	; 0x3f
    1bb6:	28 97       	sbiw	r28, 0x08	; 8
    1bb8:	27 96       	adiw	r28, 0x07	; 7
    1bba:	ee ad       	ldd	r30, Y+62	; 0x3e
    1bbc:	ff ad       	ldd	r31, Y+63	; 0x3f
    1bbe:	27 97       	sbiw	r28, 0x07	; 7
    1bc0:	00 80       	ld	r0, Z
    1bc2:	27 96       	adiw	r28, 0x07	; 7
    1bc4:	8e ad       	ldd	r24, Y+62	; 0x3e
    1bc6:	9f ad       	ldd	r25, Y+63	; 0x3f
    1bc8:	27 97       	sbiw	r28, 0x07	; 7
    1bca:	01 96       	adiw	r24, 0x01	; 1
    1bcc:	27 96       	adiw	r28, 0x07	; 7
    1bce:	9f af       	std	Y+63, r25	; 0x3f
    1bd0:	8e af       	std	Y+62, r24	; 0x3e
    1bd2:	27 97       	sbiw	r28, 0x07	; 7
    1bd4:	25 96       	adiw	r28, 0x05	; 5
    1bd6:	ee ad       	ldd	r30, Y+62	; 0x3e
    1bd8:	ff ad       	ldd	r31, Y+63	; 0x3f
    1bda:	25 97       	sbiw	r28, 0x05	; 5
    1bdc:	00 82       	st	Z, r0
    1bde:	25 96       	adiw	r28, 0x05	; 5
    1be0:	8e ad       	ldd	r24, Y+62	; 0x3e
    1be2:	9f ad       	ldd	r25, Y+63	; 0x3f
    1be4:	25 97       	sbiw	r28, 0x05	; 5
    1be6:	01 96       	adiw	r24, 0x01	; 1
    1be8:	25 96       	adiw	r28, 0x05	; 5
    1bea:	9f af       	std	Y+63, r25	; 0x3f
    1bec:	8e af       	std	Y+62, r24	; 0x3e
    1bee:	25 97       	sbiw	r28, 0x05	; 5
    1bf0:	28 96       	adiw	r28, 0x08	; 8
    1bf2:	9f ad       	ldd	r25, Y+63	; 0x3f
    1bf4:	28 97       	sbiw	r28, 0x08	; 8
    1bf6:	91 50       	subi	r25, 0x01	; 1
    1bf8:	28 96       	adiw	r28, 0x08	; 8
    1bfa:	9f af       	std	Y+63, r25	; 0x3f
    1bfc:	28 97       	sbiw	r28, 0x08	; 8
    1bfe:	28 96       	adiw	r28, 0x08	; 8
    1c00:	ef ad       	ldd	r30, Y+63	; 0x3f
    1c02:	28 97       	sbiw	r28, 0x08	; 8
    1c04:	ee 23       	and	r30, r30
    1c06:	c1 f6       	brne	.-80     	; 0x1bb8 <main+0x48>
	uart_init(&config);
    1c08:	ce 01       	movw	r24, r28
    1c0a:	8e 96       	adiw	r24, 0x2e	; 46
    1c0c:	0e 94 fa 0a 	call	0x15f4	; 0x15f4 <uart_init>
	TWI_config configt = {2};
    1c10:	82 e0       	ldi	r24, 0x02	; 2
    1c12:	8b ab       	std	Y+51, r24	; 0x33

	EEPROM_init(&configt);
    1c14:	ce 01       	movw	r24, r28
    1c16:	c3 96       	adiw	r24, 0x33	; 51
    1c18:	0e 94 73 0c 	call	0x18e6	; 0x18e6 <EEPROM_init>
    Buzzer_init();
    1c1c:	0e 94 4d 0c 	call	0x189a	; 0x189a <Buzzer_init>
    Motor_init();
    1c20:	0e 94 2d 0d 	call	0x1a5a	; 0x1a5a <Motor_init>
	/* initial password */
	/* receive the new password by UART and store it in the EEPRM */
	while (uart_recieveByte() != READY){}; //pooling until the HMI be ready
    1c24:	0e 94 d2 0b 	call	0x17a4	; 0x17a4 <uart_recieveByte>
    1c28:	80 31       	cpi	r24, 0x10	; 16
    1c2a:	e1 f7       	brne	.-8      	; 0x1c24 <main+0xb4>
	for ( i = 0; i < PASSWORD_LEN ; i++)
    1c2c:	19 a2       	std	Y+33, r1	; 0x21
    1c2e:	94 c0       	rjmp	.+296    	; 0x1d58 <main+0x1e8>
	{
		uart_sendByte(READY);
    1c30:	80 e1       	ldi	r24, 0x10	; 16
    1c32:	0e 94 bb 0b 	call	0x1776	; 0x1776 <uart_sendByte>
		password[i] = uart_recieveByte();
    1c36:	89 a1       	ldd	r24, Y+33	; 0x21
    1c38:	08 2f       	mov	r16, r24
    1c3a:	10 e0       	ldi	r17, 0x00	; 0
    1c3c:	0e 94 d2 0b 	call	0x17a4	; 0x17a4 <uart_recieveByte>
    1c40:	28 2f       	mov	r18, r24
    1c42:	ce 01       	movw	r24, r28
    1c44:	89 96       	adiw	r24, 0x29	; 41
    1c46:	fc 01       	movw	r30, r24
    1c48:	e0 0f       	add	r30, r16
    1c4a:	f1 1f       	adc	r31, r17
    1c4c:	20 83       	st	Z, r18
		/*write the password[i] in EEPROM address (0x000 | i) */
		EEPROM_writeByte((0x000 | i), password[i]);
    1c4e:	89 a1       	ldd	r24, Y+33	; 0x21
    1c50:	48 2f       	mov	r20, r24
    1c52:	50 e0       	ldi	r21, 0x00	; 0
    1c54:	89 a1       	ldd	r24, Y+33	; 0x21
    1c56:	28 2f       	mov	r18, r24
    1c58:	30 e0       	ldi	r19, 0x00	; 0
    1c5a:	ce 01       	movw	r24, r28
    1c5c:	89 96       	adiw	r24, 0x29	; 41
    1c5e:	fc 01       	movw	r30, r24
    1c60:	e2 0f       	add	r30, r18
    1c62:	f3 1f       	adc	r31, r19
    1c64:	20 81       	ld	r18, Z
    1c66:	ca 01       	movw	r24, r20
    1c68:	62 2f       	mov	r22, r18
    1c6a:	0e 94 84 0c 	call	0x1908	; 0x1908 <EEPROM_writeByte>
    1c6e:	80 e0       	ldi	r24, 0x00	; 0
    1c70:	90 e0       	ldi	r25, 0x00	; 0
    1c72:	a0 e2       	ldi	r26, 0x20	; 32
    1c74:	b1 e4       	ldi	r27, 0x41	; 65
    1c76:	89 8f       	std	Y+25, r24	; 0x19
    1c78:	9a 8f       	std	Y+26, r25	; 0x1a
    1c7a:	ab 8f       	std	Y+27, r26	; 0x1b
    1c7c:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1c7e:	69 8d       	ldd	r22, Y+25	; 0x19
    1c80:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1c82:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1c84:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1c86:	20 e0       	ldi	r18, 0x00	; 0
    1c88:	30 e0       	ldi	r19, 0x00	; 0
    1c8a:	4a ef       	ldi	r20, 0xFA	; 250
    1c8c:	54 e4       	ldi	r21, 0x44	; 68
    1c8e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1c92:	dc 01       	movw	r26, r24
    1c94:	cb 01       	movw	r24, r22
    1c96:	8d 8b       	std	Y+21, r24	; 0x15
    1c98:	9e 8b       	std	Y+22, r25	; 0x16
    1c9a:	af 8b       	std	Y+23, r26	; 0x17
    1c9c:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    1c9e:	6d 89       	ldd	r22, Y+21	; 0x15
    1ca0:	7e 89       	ldd	r23, Y+22	; 0x16
    1ca2:	8f 89       	ldd	r24, Y+23	; 0x17
    1ca4:	98 8d       	ldd	r25, Y+24	; 0x18
    1ca6:	20 e0       	ldi	r18, 0x00	; 0
    1ca8:	30 e0       	ldi	r19, 0x00	; 0
    1caa:	40 e8       	ldi	r20, 0x80	; 128
    1cac:	5f e3       	ldi	r21, 0x3F	; 63
    1cae:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1cb2:	88 23       	and	r24, r24
    1cb4:	2c f4       	brge	.+10     	; 0x1cc0 <main+0x150>
		__ticks = 1;
    1cb6:	81 e0       	ldi	r24, 0x01	; 1
    1cb8:	90 e0       	ldi	r25, 0x00	; 0
    1cba:	9c 8b       	std	Y+20, r25	; 0x14
    1cbc:	8b 8b       	std	Y+19, r24	; 0x13
    1cbe:	3f c0       	rjmp	.+126    	; 0x1d3e <main+0x1ce>
	else if (__tmp > 65535)
    1cc0:	6d 89       	ldd	r22, Y+21	; 0x15
    1cc2:	7e 89       	ldd	r23, Y+22	; 0x16
    1cc4:	8f 89       	ldd	r24, Y+23	; 0x17
    1cc6:	98 8d       	ldd	r25, Y+24	; 0x18
    1cc8:	20 e0       	ldi	r18, 0x00	; 0
    1cca:	3f ef       	ldi	r19, 0xFF	; 255
    1ccc:	4f e7       	ldi	r20, 0x7F	; 127
    1cce:	57 e4       	ldi	r21, 0x47	; 71
    1cd0:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1cd4:	18 16       	cp	r1, r24
    1cd6:	4c f5       	brge	.+82     	; 0x1d2a <main+0x1ba>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1cd8:	69 8d       	ldd	r22, Y+25	; 0x19
    1cda:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1cdc:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1cde:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1ce0:	20 e0       	ldi	r18, 0x00	; 0
    1ce2:	30 e0       	ldi	r19, 0x00	; 0
    1ce4:	40 e2       	ldi	r20, 0x20	; 32
    1ce6:	51 e4       	ldi	r21, 0x41	; 65
    1ce8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1cec:	dc 01       	movw	r26, r24
    1cee:	cb 01       	movw	r24, r22
    1cf0:	bc 01       	movw	r22, r24
    1cf2:	cd 01       	movw	r24, r26
    1cf4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1cf8:	dc 01       	movw	r26, r24
    1cfa:	cb 01       	movw	r24, r22
    1cfc:	9c 8b       	std	Y+20, r25	; 0x14
    1cfe:	8b 8b       	std	Y+19, r24	; 0x13
    1d00:	0f c0       	rjmp	.+30     	; 0x1d20 <main+0x1b0>
    1d02:	88 ec       	ldi	r24, 0xC8	; 200
    1d04:	90 e0       	ldi	r25, 0x00	; 0
    1d06:	9a 8b       	std	Y+18, r25	; 0x12
    1d08:	89 8b       	std	Y+17, r24	; 0x11
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    1d0a:	89 89       	ldd	r24, Y+17	; 0x11
    1d0c:	9a 89       	ldd	r25, Y+18	; 0x12
    1d0e:	01 97       	sbiw	r24, 0x01	; 1
    1d10:	f1 f7       	brne	.-4      	; 0x1d0e <main+0x19e>
    1d12:	9a 8b       	std	Y+18, r25	; 0x12
    1d14:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1d16:	8b 89       	ldd	r24, Y+19	; 0x13
    1d18:	9c 89       	ldd	r25, Y+20	; 0x14
    1d1a:	01 97       	sbiw	r24, 0x01	; 1
    1d1c:	9c 8b       	std	Y+20, r25	; 0x14
    1d1e:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1d20:	8b 89       	ldd	r24, Y+19	; 0x13
    1d22:	9c 89       	ldd	r25, Y+20	; 0x14
    1d24:	00 97       	sbiw	r24, 0x00	; 0
    1d26:	69 f7       	brne	.-38     	; 0x1d02 <main+0x192>
    1d28:	14 c0       	rjmp	.+40     	; 0x1d52 <main+0x1e2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1d2a:	6d 89       	ldd	r22, Y+21	; 0x15
    1d2c:	7e 89       	ldd	r23, Y+22	; 0x16
    1d2e:	8f 89       	ldd	r24, Y+23	; 0x17
    1d30:	98 8d       	ldd	r25, Y+24	; 0x18
    1d32:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1d36:	dc 01       	movw	r26, r24
    1d38:	cb 01       	movw	r24, r22
    1d3a:	9c 8b       	std	Y+20, r25	; 0x14
    1d3c:	8b 8b       	std	Y+19, r24	; 0x13
    1d3e:	8b 89       	ldd	r24, Y+19	; 0x13
    1d40:	9c 89       	ldd	r25, Y+20	; 0x14
    1d42:	98 8b       	std	Y+16, r25	; 0x10
    1d44:	8f 87       	std	Y+15, r24	; 0x0f
    1d46:	8f 85       	ldd	r24, Y+15	; 0x0f
    1d48:	98 89       	ldd	r25, Y+16	; 0x10
    1d4a:	01 97       	sbiw	r24, 0x01	; 1
    1d4c:	f1 f7       	brne	.-4      	; 0x1d4a <main+0x1da>
    1d4e:	98 8b       	std	Y+16, r25	; 0x10
    1d50:	8f 87       	std	Y+15, r24	; 0x0f
    Buzzer_init();
    Motor_init();
	/* initial password */
	/* receive the new password by UART and store it in the EEPRM */
	while (uart_recieveByte() != READY){}; //pooling until the HMI be ready
	for ( i = 0; i < PASSWORD_LEN ; i++)
    1d52:	89 a1       	ldd	r24, Y+33	; 0x21
    1d54:	8f 5f       	subi	r24, 0xFF	; 255
    1d56:	89 a3       	std	Y+33, r24	; 0x21
    1d58:	89 a1       	ldd	r24, Y+33	; 0x21
    1d5a:	85 30       	cpi	r24, 0x05	; 5
    1d5c:	08 f4       	brcc	.+2      	; 0x1d60 <main+0x1f0>
    1d5e:	68 cf       	rjmp	.-304    	; 0x1c30 <main+0xc0>


	while(1)
	{

		while (uart_recieveByte() != READY){};
    1d60:	0e 94 d2 0b 	call	0x17a4	; 0x17a4 <uart_recieveByte>
    1d64:	80 31       	cpi	r24, 0x10	; 16
    1d66:	e1 f7       	brne	.-8      	; 0x1d60 <main+0x1f0>


		 rx_data = uart_recieveByte();
    1d68:	0e 94 d2 0b 	call	0x17a4	; 0x17a4 <uart_recieveByte>
    1d6c:	88 a3       	std	Y+32, r24	; 0x20
		/* receive (-) for opening the door
		 *  receiving the password
		 *  read the existing password from EEPROM
		 *  compare the 2 passwords, check the password*/
		if (rx_data == '-')
    1d6e:	88 a1       	ldd	r24, Y+32	; 0x20
    1d70:	8d 32       	cpi	r24, 0x2D	; 45
    1d72:	09 f0       	breq	.+2      	; 0x1d76 <main+0x206>
    1d74:	d1 c0       	rjmp	.+418    	; 0x1f18 <main+0x3a8>
		{
			for (uint8 i = 0; i < PASSWORD_LEN ; i++)
    1d76:	1f 8e       	std	Y+31, r1	; 0x1f
    1d78:	12 c0       	rjmp	.+36     	; 0x1d9e <main+0x22e>
			{
				uart_sendByte(READY);
    1d7a:	80 e1       	ldi	r24, 0x10	; 16
    1d7c:	0e 94 bb 0b 	call	0x1776	; 0x1776 <uart_sendByte>
				password[i] = uart_recieveByte();
    1d80:	8f 8d       	ldd	r24, Y+31	; 0x1f
    1d82:	08 2f       	mov	r16, r24
    1d84:	10 e0       	ldi	r17, 0x00	; 0
    1d86:	0e 94 d2 0b 	call	0x17a4	; 0x17a4 <uart_recieveByte>
    1d8a:	28 2f       	mov	r18, r24
    1d8c:	ce 01       	movw	r24, r28
    1d8e:	89 96       	adiw	r24, 0x29	; 41
    1d90:	fc 01       	movw	r30, r24
    1d92:	e0 0f       	add	r30, r16
    1d94:	f1 1f       	adc	r31, r17
    1d96:	20 83       	st	Z, r18
		 *  receiving the password
		 *  read the existing password from EEPROM
		 *  compare the 2 passwords, check the password*/
		if (rx_data == '-')
		{
			for (uint8 i = 0; i < PASSWORD_LEN ; i++)
    1d98:	8f 8d       	ldd	r24, Y+31	; 0x1f
    1d9a:	8f 5f       	subi	r24, 0xFF	; 255
    1d9c:	8f 8f       	std	Y+31, r24	; 0x1f
    1d9e:	8f 8d       	ldd	r24, Y+31	; 0x1f
    1da0:	85 30       	cpi	r24, 0x05	; 5
    1da2:	58 f3       	brcs	.-42     	; 0x1d7a <main+0x20a>
			{
				uart_sendByte(READY);
				password[i] = uart_recieveByte();
			}

			for (uint8 i = 0; i < PASSWORD_LEN ; i++)
    1da4:	1e 8e       	std	Y+30, r1	; 0x1e
    1da6:	16 c0       	rjmp	.+44     	; 0x1dd4 <main+0x264>
			{
				EEPROM_readByte((0x000 | i), &read_password);
    1da8:	8e 8d       	ldd	r24, Y+30	; 0x1e
    1daa:	88 2f       	mov	r24, r24
    1dac:	90 e0       	ldi	r25, 0x00	; 0
    1dae:	9e 01       	movw	r18, r28
    1db0:	2d 5d       	subi	r18, 0xDD	; 221
    1db2:	3f 4f       	sbci	r19, 0xFF	; 255
    1db4:	b9 01       	movw	r22, r18
    1db6:	0e 94 c8 0c 	call	0x1990	; 0x1990 <EEPROM_readByte>
				read_password_arr[i] = read_password;
    1dba:	8e 8d       	ldd	r24, Y+30	; 0x1e
    1dbc:	28 2f       	mov	r18, r24
    1dbe:	30 e0       	ldi	r19, 0x00	; 0
    1dc0:	4b a1       	ldd	r20, Y+35	; 0x23
    1dc2:	ce 01       	movw	r24, r28
    1dc4:	84 96       	adiw	r24, 0x24	; 36
    1dc6:	fc 01       	movw	r30, r24
    1dc8:	e2 0f       	add	r30, r18
    1dca:	f3 1f       	adc	r31, r19
    1dcc:	40 83       	st	Z, r20
			{
				uart_sendByte(READY);
				password[i] = uart_recieveByte();
			}

			for (uint8 i = 0; i < PASSWORD_LEN ; i++)
    1dce:	8e 8d       	ldd	r24, Y+30	; 0x1e
    1dd0:	8f 5f       	subi	r24, 0xFF	; 255
    1dd2:	8e 8f       	std	Y+30, r24	; 0x1e
    1dd4:	8e 8d       	ldd	r24, Y+30	; 0x1e
    1dd6:	85 30       	cpi	r24, 0x05	; 5
    1dd8:	38 f3       	brcs	.-50     	; 0x1da8 <main+0x238>
			{
				EEPROM_readByte((0x000 | i), &read_password);
				read_password_arr[i] = read_password;
			}
			comp = cmp (password, read_password_arr);
    1dda:	ce 01       	movw	r24, r28
    1ddc:	89 96       	adiw	r24, 0x29	; 41
    1dde:	9e 01       	movw	r18, r28
    1de0:	2c 5d       	subi	r18, 0xDC	; 220
    1de2:	3f 4f       	sbci	r19, 0xFF	; 255
    1de4:	b9 01       	movw	r22, r18
    1de6:	0e 94 83 0d 	call	0x1b06	; 0x1b06 <cmp>
    1dea:	8a a3       	std	Y+34, r24	; 0x22
			/* matching
             * send match to HMI by UART
             * motor on clock wise
             * wait 15 sec
             * motor on anti clock wise */
			if (comp)
    1dec:	8a a1       	ldd	r24, Y+34	; 0x22
    1dee:	88 23       	and	r24, r24
    1df0:	09 f4       	brne	.+2      	; 0x1df4 <main+0x284>
    1df2:	8a c0       	rjmp	.+276    	; 0x1f08 <main+0x398>
			{
				while(uart_recieveByte() != READY);
    1df4:	0e 94 d2 0b 	call	0x17a4	; 0x17a4 <uart_recieveByte>
    1df8:	80 31       	cpi	r24, 0x10	; 16
    1dfa:	e1 f7       	brne	.-8      	; 0x1df4 <main+0x284>

				uart_sendByte(MATCHING);
    1dfc:	80 e2       	ldi	r24, 0x20	; 32
    1dfe:	0e 94 bb 0b 	call	0x1776	; 0x1776 <uart_sendByte>
				Motor_rotate_Clockwise();
    1e02:	0e 94 4f 0d 	call	0x1a9e	; 0x1a9e <Motor_rotate_Clockwise>
				Timer1_set_CallBack(Motor_rotate_AntiClockwise);
    1e06:	8d e3       	ldi	r24, 0x3D	; 61
    1e08:	9d e0       	ldi	r25, 0x0D	; 13
    1e0a:	0e 94 e7 0a 	call	0x15ce	; 0x15ce <Timer1_set_CallBack>

				/*wait for 8 second*/
				Timer1_config timer_config1 = {F_CPU_1024, 0, 65535};
    1e0e:	ce 01       	movw	r24, r28
    1e10:	c4 96       	adiw	r24, 0x34	; 52
    1e12:	2a 96       	adiw	r28, 0x0a	; 10
    1e14:	9f af       	std	Y+63, r25	; 0x3f
    1e16:	8e af       	std	Y+62, r24	; 0x3e
    1e18:	2a 97       	sbiw	r28, 0x0a	; 10
    1e1a:	e2 e7       	ldi	r30, 0x72	; 114
    1e1c:	f0 e0       	ldi	r31, 0x00	; 0
    1e1e:	2c 96       	adiw	r28, 0x0c	; 12
    1e20:	ff af       	std	Y+63, r31	; 0x3f
    1e22:	ee af       	std	Y+62, r30	; 0x3e
    1e24:	2c 97       	sbiw	r28, 0x0c	; 12
    1e26:	f5 e0       	ldi	r31, 0x05	; 5
    1e28:	2d 96       	adiw	r28, 0x0d	; 13
    1e2a:	ff af       	std	Y+63, r31	; 0x3f
    1e2c:	2d 97       	sbiw	r28, 0x0d	; 13
    1e2e:	2c 96       	adiw	r28, 0x0c	; 12
    1e30:	ee ad       	ldd	r30, Y+62	; 0x3e
    1e32:	ff ad       	ldd	r31, Y+63	; 0x3f
    1e34:	2c 97       	sbiw	r28, 0x0c	; 12
    1e36:	00 80       	ld	r0, Z
    1e38:	2c 96       	adiw	r28, 0x0c	; 12
    1e3a:	8e ad       	ldd	r24, Y+62	; 0x3e
    1e3c:	9f ad       	ldd	r25, Y+63	; 0x3f
    1e3e:	2c 97       	sbiw	r28, 0x0c	; 12
    1e40:	01 96       	adiw	r24, 0x01	; 1
    1e42:	2c 96       	adiw	r28, 0x0c	; 12
    1e44:	9f af       	std	Y+63, r25	; 0x3f
    1e46:	8e af       	std	Y+62, r24	; 0x3e
    1e48:	2c 97       	sbiw	r28, 0x0c	; 12
    1e4a:	2a 96       	adiw	r28, 0x0a	; 10
    1e4c:	ee ad       	ldd	r30, Y+62	; 0x3e
    1e4e:	ff ad       	ldd	r31, Y+63	; 0x3f
    1e50:	2a 97       	sbiw	r28, 0x0a	; 10
    1e52:	00 82       	st	Z, r0
    1e54:	2a 96       	adiw	r28, 0x0a	; 10
    1e56:	8e ad       	ldd	r24, Y+62	; 0x3e
    1e58:	9f ad       	ldd	r25, Y+63	; 0x3f
    1e5a:	2a 97       	sbiw	r28, 0x0a	; 10
    1e5c:	01 96       	adiw	r24, 0x01	; 1
    1e5e:	2a 96       	adiw	r28, 0x0a	; 10
    1e60:	9f af       	std	Y+63, r25	; 0x3f
    1e62:	8e af       	std	Y+62, r24	; 0x3e
    1e64:	2a 97       	sbiw	r28, 0x0a	; 10
    1e66:	2d 96       	adiw	r28, 0x0d	; 13
    1e68:	9f ad       	ldd	r25, Y+63	; 0x3f
    1e6a:	2d 97       	sbiw	r28, 0x0d	; 13
    1e6c:	91 50       	subi	r25, 0x01	; 1
    1e6e:	2d 96       	adiw	r28, 0x0d	; 13
    1e70:	9f af       	std	Y+63, r25	; 0x3f
    1e72:	2d 97       	sbiw	r28, 0x0d	; 13
    1e74:	2d 96       	adiw	r28, 0x0d	; 13
    1e76:	ef ad       	ldd	r30, Y+63	; 0x3f
    1e78:	2d 97       	sbiw	r28, 0x0d	; 13
    1e7a:	ee 23       	and	r30, r30
    1e7c:	c1 f6       	brne	.-80     	; 0x1e2e <main+0x2be>
				Timer1_init(&timer_config1);
    1e7e:	ce 01       	movw	r24, r28
    1e80:	c4 96       	adiw	r24, 0x34	; 52
    1e82:	0e 94 99 0a 	call	0x1532	; 0x1532 <Timer1_init>
//				Timer1_set_CallBack(Motor_rotate_AntiClockwise);
//				//3 sec
//				Timer1_config timer_config2 = {F_CPU_1024, 0, 23437};
//				Timer1_init(&timer_config2);
				Timer1_set_CallBack(Motor_stop);
    1e86:	81 e6       	ldi	r24, 0x61	; 97
    1e88:	9d e0       	ldi	r25, 0x0D	; 13
    1e8a:	0e 94 e7 0a 	call	0x15ce	; 0x15ce <Timer1_set_CallBack>

				/*wait for 15 second*/
				Timer1_config timer_config3 = {F_CPU_1024, 0, 65535};
    1e8e:	ce 01       	movw	r24, r28
    1e90:	c9 96       	adiw	r24, 0x39	; 57
    1e92:	2f 96       	adiw	r28, 0x0f	; 15
    1e94:	9f af       	std	Y+63, r25	; 0x3f
    1e96:	8e af       	std	Y+62, r24	; 0x3e
    1e98:	2f 97       	sbiw	r28, 0x0f	; 15
    1e9a:	ed e6       	ldi	r30, 0x6D	; 109
    1e9c:	f0 e0       	ldi	r31, 0x00	; 0
    1e9e:	61 96       	adiw	r28, 0x11	; 17
    1ea0:	ff af       	std	Y+63, r31	; 0x3f
    1ea2:	ee af       	std	Y+62, r30	; 0x3e
    1ea4:	61 97       	sbiw	r28, 0x11	; 17
    1ea6:	f5 e0       	ldi	r31, 0x05	; 5
    1ea8:	62 96       	adiw	r28, 0x12	; 18
    1eaa:	ff af       	std	Y+63, r31	; 0x3f
    1eac:	62 97       	sbiw	r28, 0x12	; 18
    1eae:	61 96       	adiw	r28, 0x11	; 17
    1eb0:	ee ad       	ldd	r30, Y+62	; 0x3e
    1eb2:	ff ad       	ldd	r31, Y+63	; 0x3f
    1eb4:	61 97       	sbiw	r28, 0x11	; 17
    1eb6:	00 80       	ld	r0, Z
    1eb8:	61 96       	adiw	r28, 0x11	; 17
    1eba:	8e ad       	ldd	r24, Y+62	; 0x3e
    1ebc:	9f ad       	ldd	r25, Y+63	; 0x3f
    1ebe:	61 97       	sbiw	r28, 0x11	; 17
    1ec0:	01 96       	adiw	r24, 0x01	; 1
    1ec2:	61 96       	adiw	r28, 0x11	; 17
    1ec4:	9f af       	std	Y+63, r25	; 0x3f
    1ec6:	8e af       	std	Y+62, r24	; 0x3e
    1ec8:	61 97       	sbiw	r28, 0x11	; 17
    1eca:	2f 96       	adiw	r28, 0x0f	; 15
    1ecc:	ee ad       	ldd	r30, Y+62	; 0x3e
    1ece:	ff ad       	ldd	r31, Y+63	; 0x3f
    1ed0:	2f 97       	sbiw	r28, 0x0f	; 15
    1ed2:	00 82       	st	Z, r0
    1ed4:	2f 96       	adiw	r28, 0x0f	; 15
    1ed6:	8e ad       	ldd	r24, Y+62	; 0x3e
    1ed8:	9f ad       	ldd	r25, Y+63	; 0x3f
    1eda:	2f 97       	sbiw	r28, 0x0f	; 15
    1edc:	01 96       	adiw	r24, 0x01	; 1
    1ede:	2f 96       	adiw	r28, 0x0f	; 15
    1ee0:	9f af       	std	Y+63, r25	; 0x3f
    1ee2:	8e af       	std	Y+62, r24	; 0x3e
    1ee4:	2f 97       	sbiw	r28, 0x0f	; 15
    1ee6:	62 96       	adiw	r28, 0x12	; 18
    1ee8:	9f ad       	ldd	r25, Y+63	; 0x3f
    1eea:	62 97       	sbiw	r28, 0x12	; 18
    1eec:	91 50       	subi	r25, 0x01	; 1
    1eee:	62 96       	adiw	r28, 0x12	; 18
    1ef0:	9f af       	std	Y+63, r25	; 0x3f
    1ef2:	62 97       	sbiw	r28, 0x12	; 18
    1ef4:	62 96       	adiw	r28, 0x12	; 18
    1ef6:	ef ad       	ldd	r30, Y+63	; 0x3f
    1ef8:	62 97       	sbiw	r28, 0x12	; 18
    1efa:	ee 23       	and	r30, r30
    1efc:	c1 f6       	brne	.-80     	; 0x1eae <main+0x33e>
				Timer1_init(&timer_config3);
    1efe:	ce 01       	movw	r24, r28
    1f00:	c9 96       	adiw	r24, 0x39	; 57
    1f02:	0e 94 99 0a 	call	0x1532	; 0x1532 <Timer1_init>
    1f06:	2c cf       	rjmp	.-424    	; 0x1d60 <main+0x1f0>
            /* unmatching
             *  Send unmatch to HMI by UART
             *  */
			else
			{
				while(uart_recieveByte() != READY){};
    1f08:	0e 94 d2 0b 	call	0x17a4	; 0x17a4 <uart_recieveByte>
    1f0c:	80 31       	cpi	r24, 0x10	; 16
    1f0e:	e1 f7       	brne	.-8      	; 0x1f08 <main+0x398>
				uart_sendByte(UNMATCHING);
    1f10:	80 e3       	ldi	r24, 0x30	; 48
    1f12:	0e 94 bb 0b 	call	0x1776	; 0x1776 <uart_sendByte>
    1f16:	24 cf       	rjmp	.-440    	; 0x1d60 <main+0x1f0>
		/* when receive (+) for changing the password
		 * receiving the password
		 * read the existing password from EEPROM
		 * compare the 2 passwords,check the password
		 * */
		else if (rx_data == '+')
    1f18:	88 a1       	ldd	r24, Y+32	; 0x20
    1f1a:	8b 32       	cpi	r24, 0x2B	; 43
    1f1c:	09 f0       	breq	.+2      	; 0x1f20 <main+0x3b0>
    1f1e:	ed c0       	rjmp	.+474    	; 0x20fa <main+0x58a>
		{

			for ( i = 0; i < PASSWORD_LEN ; i++)
    1f20:	19 a2       	std	Y+33, r1	; 0x21
    1f22:	12 c0       	rjmp	.+36     	; 0x1f48 <main+0x3d8>
			{
				uart_sendByte(READY);
    1f24:	80 e1       	ldi	r24, 0x10	; 16
    1f26:	0e 94 bb 0b 	call	0x1776	; 0x1776 <uart_sendByte>
				password[i] = uart_recieveByte();
    1f2a:	89 a1       	ldd	r24, Y+33	; 0x21
    1f2c:	08 2f       	mov	r16, r24
    1f2e:	10 e0       	ldi	r17, 0x00	; 0
    1f30:	0e 94 d2 0b 	call	0x17a4	; 0x17a4 <uart_recieveByte>
    1f34:	28 2f       	mov	r18, r24
    1f36:	ce 01       	movw	r24, r28
    1f38:	89 96       	adiw	r24, 0x29	; 41
    1f3a:	fc 01       	movw	r30, r24
    1f3c:	e0 0f       	add	r30, r16
    1f3e:	f1 1f       	adc	r31, r17
    1f40:	20 83       	st	Z, r18
		 * compare the 2 passwords,check the password
		 * */
		else if (rx_data == '+')
		{

			for ( i = 0; i < PASSWORD_LEN ; i++)
    1f42:	89 a1       	ldd	r24, Y+33	; 0x21
    1f44:	8f 5f       	subi	r24, 0xFF	; 255
    1f46:	89 a3       	std	Y+33, r24	; 0x21
    1f48:	89 a1       	ldd	r24, Y+33	; 0x21
    1f4a:	85 30       	cpi	r24, 0x05	; 5
    1f4c:	58 f3       	brcs	.-42     	; 0x1f24 <main+0x3b4>
			{
				uart_sendByte(READY);
				password[i] = uart_recieveByte();
			}

			for ( i = 0; i < PASSWORD_LEN ; i++)
    1f4e:	19 a2       	std	Y+33, r1	; 0x21
    1f50:	16 c0       	rjmp	.+44     	; 0x1f7e <main+0x40e>
			{
					EEPROM_readByte((0x000 | i), &read_password);
    1f52:	89 a1       	ldd	r24, Y+33	; 0x21
    1f54:	88 2f       	mov	r24, r24
    1f56:	90 e0       	ldi	r25, 0x00	; 0
    1f58:	9e 01       	movw	r18, r28
    1f5a:	2d 5d       	subi	r18, 0xDD	; 221
    1f5c:	3f 4f       	sbci	r19, 0xFF	; 255
    1f5e:	b9 01       	movw	r22, r18
    1f60:	0e 94 c8 0c 	call	0x1990	; 0x1990 <EEPROM_readByte>
					read_password_arr[i] = read_password;
    1f64:	89 a1       	ldd	r24, Y+33	; 0x21
    1f66:	28 2f       	mov	r18, r24
    1f68:	30 e0       	ldi	r19, 0x00	; 0
    1f6a:	4b a1       	ldd	r20, Y+35	; 0x23
    1f6c:	ce 01       	movw	r24, r28
    1f6e:	84 96       	adiw	r24, 0x24	; 36
    1f70:	fc 01       	movw	r30, r24
    1f72:	e2 0f       	add	r30, r18
    1f74:	f3 1f       	adc	r31, r19
    1f76:	40 83       	st	Z, r20
			{
				uart_sendByte(READY);
				password[i] = uart_recieveByte();
			}

			for ( i = 0; i < PASSWORD_LEN ; i++)
    1f78:	89 a1       	ldd	r24, Y+33	; 0x21
    1f7a:	8f 5f       	subi	r24, 0xFF	; 255
    1f7c:	89 a3       	std	Y+33, r24	; 0x21
    1f7e:	89 a1       	ldd	r24, Y+33	; 0x21
    1f80:	85 30       	cpi	r24, 0x05	; 5
    1f82:	38 f3       	brcs	.-50     	; 0x1f52 <main+0x3e2>
			{
					EEPROM_readByte((0x000 | i), &read_password);
					read_password_arr[i] = read_password;
			}
			comp = cmp (password, read_password_arr);
    1f84:	ce 01       	movw	r24, r28
    1f86:	89 96       	adiw	r24, 0x29	; 41
    1f88:	9e 01       	movw	r18, r28
    1f8a:	2c 5d       	subi	r18, 0xDC	; 220
    1f8c:	3f 4f       	sbci	r19, 0xFF	; 255
    1f8e:	b9 01       	movw	r22, r18
    1f90:	0e 94 83 0d 	call	0x1b06	; 0x1b06 <cmp>
    1f94:	8a a3       	std	Y+34, r24	; 0x22
			/* matching :
			 * send match to HMI by UART
			 * receive the new password
			 * store it in the EEPRM
			 */
			if (comp)
    1f96:	8a a1       	ldd	r24, Y+34	; 0x22
    1f98:	88 23       	and	r24, r24
    1f9a:	09 f4       	brne	.+2      	; 0x1f9e <main+0x42e>
    1f9c:	a6 c0       	rjmp	.+332    	; 0x20ea <main+0x57a>
			{
				while(uart_recieveByte() != READY);
    1f9e:	0e 94 d2 0b 	call	0x17a4	; 0x17a4 <uart_recieveByte>
    1fa2:	80 31       	cpi	r24, 0x10	; 16
    1fa4:	e1 f7       	brne	.-8      	; 0x1f9e <main+0x42e>
				uart_sendByte(MATCHING);
    1fa6:	80 e2       	ldi	r24, 0x20	; 32
    1fa8:	0e 94 bb 0b 	call	0x1776	; 0x1776 <uart_sendByte>
				while (uart_recieveByte() != READY){};
    1fac:	0e 94 d2 0b 	call	0x17a4	; 0x17a4 <uart_recieveByte>
    1fb0:	80 31       	cpi	r24, 0x10	; 16
    1fb2:	e1 f7       	brne	.-8      	; 0x1fac <main+0x43c>
				for (uint8 i = 0; i < PASSWORD_LEN ; i++)
    1fb4:	1d 8e       	std	Y+29, r1	; 0x1d
    1fb6:	94 c0       	rjmp	.+296    	; 0x20e0 <main+0x570>
				{
					uart_sendByte(READY);
    1fb8:	80 e1       	ldi	r24, 0x10	; 16
    1fba:	0e 94 bb 0b 	call	0x1776	; 0x1776 <uart_sendByte>
					password[i] = uart_recieveByte();
    1fbe:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1fc0:	08 2f       	mov	r16, r24
    1fc2:	10 e0       	ldi	r17, 0x00	; 0
    1fc4:	0e 94 d2 0b 	call	0x17a4	; 0x17a4 <uart_recieveByte>
    1fc8:	28 2f       	mov	r18, r24
    1fca:	ce 01       	movw	r24, r28
    1fcc:	89 96       	adiw	r24, 0x29	; 41
    1fce:	fc 01       	movw	r30, r24
    1fd0:	e0 0f       	add	r30, r16
    1fd2:	f1 1f       	adc	r31, r17
    1fd4:	20 83       	st	Z, r18
					EEPROM_writeByte((0x000 | i), password[i]);
    1fd6:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1fd8:	48 2f       	mov	r20, r24
    1fda:	50 e0       	ldi	r21, 0x00	; 0
    1fdc:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1fde:	28 2f       	mov	r18, r24
    1fe0:	30 e0       	ldi	r19, 0x00	; 0
    1fe2:	ce 01       	movw	r24, r28
    1fe4:	89 96       	adiw	r24, 0x29	; 41
    1fe6:	fc 01       	movw	r30, r24
    1fe8:	e2 0f       	add	r30, r18
    1fea:	f3 1f       	adc	r31, r19
    1fec:	20 81       	ld	r18, Z
    1fee:	ca 01       	movw	r24, r20
    1ff0:	62 2f       	mov	r22, r18
    1ff2:	0e 94 84 0c 	call	0x1908	; 0x1908 <EEPROM_writeByte>
    1ff6:	80 e0       	ldi	r24, 0x00	; 0
    1ff8:	90 e0       	ldi	r25, 0x00	; 0
    1ffa:	a0 e2       	ldi	r26, 0x20	; 32
    1ffc:	b1 e4       	ldi	r27, 0x41	; 65
    1ffe:	8b 87       	std	Y+11, r24	; 0x0b
    2000:	9c 87       	std	Y+12, r25	; 0x0c
    2002:	ad 87       	std	Y+13, r26	; 0x0d
    2004:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2006:	6b 85       	ldd	r22, Y+11	; 0x0b
    2008:	7c 85       	ldd	r23, Y+12	; 0x0c
    200a:	8d 85       	ldd	r24, Y+13	; 0x0d
    200c:	9e 85       	ldd	r25, Y+14	; 0x0e
    200e:	20 e0       	ldi	r18, 0x00	; 0
    2010:	30 e0       	ldi	r19, 0x00	; 0
    2012:	4a ef       	ldi	r20, 0xFA	; 250
    2014:	54 e4       	ldi	r21, 0x44	; 68
    2016:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    201a:	dc 01       	movw	r26, r24
    201c:	cb 01       	movw	r24, r22
    201e:	8f 83       	std	Y+7, r24	; 0x07
    2020:	98 87       	std	Y+8, r25	; 0x08
    2022:	a9 87       	std	Y+9, r26	; 0x09
    2024:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2026:	6f 81       	ldd	r22, Y+7	; 0x07
    2028:	78 85       	ldd	r23, Y+8	; 0x08
    202a:	89 85       	ldd	r24, Y+9	; 0x09
    202c:	9a 85       	ldd	r25, Y+10	; 0x0a
    202e:	20 e0       	ldi	r18, 0x00	; 0
    2030:	30 e0       	ldi	r19, 0x00	; 0
    2032:	40 e8       	ldi	r20, 0x80	; 128
    2034:	5f e3       	ldi	r21, 0x3F	; 63
    2036:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    203a:	88 23       	and	r24, r24
    203c:	2c f4       	brge	.+10     	; 0x2048 <main+0x4d8>
		__ticks = 1;
    203e:	81 e0       	ldi	r24, 0x01	; 1
    2040:	90 e0       	ldi	r25, 0x00	; 0
    2042:	9e 83       	std	Y+6, r25	; 0x06
    2044:	8d 83       	std	Y+5, r24	; 0x05
    2046:	3f c0       	rjmp	.+126    	; 0x20c6 <main+0x556>
	else if (__tmp > 65535)
    2048:	6f 81       	ldd	r22, Y+7	; 0x07
    204a:	78 85       	ldd	r23, Y+8	; 0x08
    204c:	89 85       	ldd	r24, Y+9	; 0x09
    204e:	9a 85       	ldd	r25, Y+10	; 0x0a
    2050:	20 e0       	ldi	r18, 0x00	; 0
    2052:	3f ef       	ldi	r19, 0xFF	; 255
    2054:	4f e7       	ldi	r20, 0x7F	; 127
    2056:	57 e4       	ldi	r21, 0x47	; 71
    2058:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    205c:	18 16       	cp	r1, r24
    205e:	4c f5       	brge	.+82     	; 0x20b2 <main+0x542>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2060:	6b 85       	ldd	r22, Y+11	; 0x0b
    2062:	7c 85       	ldd	r23, Y+12	; 0x0c
    2064:	8d 85       	ldd	r24, Y+13	; 0x0d
    2066:	9e 85       	ldd	r25, Y+14	; 0x0e
    2068:	20 e0       	ldi	r18, 0x00	; 0
    206a:	30 e0       	ldi	r19, 0x00	; 0
    206c:	40 e2       	ldi	r20, 0x20	; 32
    206e:	51 e4       	ldi	r21, 0x41	; 65
    2070:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2074:	dc 01       	movw	r26, r24
    2076:	cb 01       	movw	r24, r22
    2078:	bc 01       	movw	r22, r24
    207a:	cd 01       	movw	r24, r26
    207c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2080:	dc 01       	movw	r26, r24
    2082:	cb 01       	movw	r24, r22
    2084:	9e 83       	std	Y+6, r25	; 0x06
    2086:	8d 83       	std	Y+5, r24	; 0x05
    2088:	0f c0       	rjmp	.+30     	; 0x20a8 <main+0x538>
    208a:	88 ec       	ldi	r24, 0xC8	; 200
    208c:	90 e0       	ldi	r25, 0x00	; 0
    208e:	9c 83       	std	Y+4, r25	; 0x04
    2090:	8b 83       	std	Y+3, r24	; 0x03
    2092:	8b 81       	ldd	r24, Y+3	; 0x03
    2094:	9c 81       	ldd	r25, Y+4	; 0x04
    2096:	01 97       	sbiw	r24, 0x01	; 1
    2098:	f1 f7       	brne	.-4      	; 0x2096 <main+0x526>
    209a:	9c 83       	std	Y+4, r25	; 0x04
    209c:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    209e:	8d 81       	ldd	r24, Y+5	; 0x05
    20a0:	9e 81       	ldd	r25, Y+6	; 0x06
    20a2:	01 97       	sbiw	r24, 0x01	; 1
    20a4:	9e 83       	std	Y+6, r25	; 0x06
    20a6:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    20a8:	8d 81       	ldd	r24, Y+5	; 0x05
    20aa:	9e 81       	ldd	r25, Y+6	; 0x06
    20ac:	00 97       	sbiw	r24, 0x00	; 0
    20ae:	69 f7       	brne	.-38     	; 0x208a <main+0x51a>
    20b0:	14 c0       	rjmp	.+40     	; 0x20da <main+0x56a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    20b2:	6f 81       	ldd	r22, Y+7	; 0x07
    20b4:	78 85       	ldd	r23, Y+8	; 0x08
    20b6:	89 85       	ldd	r24, Y+9	; 0x09
    20b8:	9a 85       	ldd	r25, Y+10	; 0x0a
    20ba:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    20be:	dc 01       	movw	r26, r24
    20c0:	cb 01       	movw	r24, r22
    20c2:	9e 83       	std	Y+6, r25	; 0x06
    20c4:	8d 83       	std	Y+5, r24	; 0x05
    20c6:	8d 81       	ldd	r24, Y+5	; 0x05
    20c8:	9e 81       	ldd	r25, Y+6	; 0x06
    20ca:	9a 83       	std	Y+2, r25	; 0x02
    20cc:	89 83       	std	Y+1, r24	; 0x01
    20ce:	89 81       	ldd	r24, Y+1	; 0x01
    20d0:	9a 81       	ldd	r25, Y+2	; 0x02
    20d2:	01 97       	sbiw	r24, 0x01	; 1
    20d4:	f1 f7       	brne	.-4      	; 0x20d2 <main+0x562>
    20d6:	9a 83       	std	Y+2, r25	; 0x02
    20d8:	89 83       	std	Y+1, r24	; 0x01
			if (comp)
			{
				while(uart_recieveByte() != READY);
				uart_sendByte(MATCHING);
				while (uart_recieveByte() != READY){};
				for (uint8 i = 0; i < PASSWORD_LEN ; i++)
    20da:	8d 8d       	ldd	r24, Y+29	; 0x1d
    20dc:	8f 5f       	subi	r24, 0xFF	; 255
    20de:	8d 8f       	std	Y+29, r24	; 0x1d
    20e0:	8d 8d       	ldd	r24, Y+29	; 0x1d
    20e2:	85 30       	cpi	r24, 0x05	; 5
    20e4:	08 f4       	brcc	.+2      	; 0x20e8 <main+0x578>
    20e6:	68 cf       	rjmp	.-304    	; 0x1fb8 <main+0x448>
    20e8:	3b ce       	rjmp	.-906    	; 0x1d60 <main+0x1f0>
			/* unmatching
			 *  Send unmatch to HMI by UART
			 *  */
			else
			{
				while(uart_recieveByte() != READY);
    20ea:	0e 94 d2 0b 	call	0x17a4	; 0x17a4 <uart_recieveByte>
    20ee:	80 31       	cpi	r24, 0x10	; 16
    20f0:	e1 f7       	brne	.-8      	; 0x20ea <main+0x57a>
				uart_sendByte(UNMATCHING);
    20f2:	80 e3       	ldi	r24, 0x30	; 48
    20f4:	0e 94 bb 0b 	call	0x1776	; 0x1776 <uart_sendByte>
    20f8:	33 ce       	rjmp	.-922    	; 0x1d60 <main+0x1f0>
		}

		/* buzzer */
		else
		{
			Buzzer_on();
    20fa:	0e 94 59 0c 	call	0x18b2	; 0x18b2 <Buzzer_on>
			Timer1_set_CallBack(Buzzer_off);
    20fe:	86 e6       	ldi	r24, 0x66	; 102
    2100:	9c e0       	ldi	r25, 0x0C	; 12
    2102:	0e 94 e7 0a 	call	0x15ce	; 0x15ce <Timer1_set_CallBack>
			/* wait 1 m*/
			Timer1_config timer_config = {F_CPU_1024, 0 , 65535};
    2106:	ce 01       	movw	r24, r28
    2108:	ce 96       	adiw	r24, 0x3e	; 62
    210a:	64 96       	adiw	r28, 0x14	; 20
    210c:	9f af       	std	Y+63, r25	; 0x3f
    210e:	8e af       	std	Y+62, r24	; 0x3e
    2110:	64 97       	sbiw	r28, 0x14	; 20
    2112:	e8 e6       	ldi	r30, 0x68	; 104
    2114:	f0 e0       	ldi	r31, 0x00	; 0
    2116:	66 96       	adiw	r28, 0x16	; 22
    2118:	ff af       	std	Y+63, r31	; 0x3f
    211a:	ee af       	std	Y+62, r30	; 0x3e
    211c:	66 97       	sbiw	r28, 0x16	; 22
    211e:	f5 e0       	ldi	r31, 0x05	; 5
    2120:	67 96       	adiw	r28, 0x17	; 23
    2122:	ff af       	std	Y+63, r31	; 0x3f
    2124:	67 97       	sbiw	r28, 0x17	; 23
    2126:	66 96       	adiw	r28, 0x16	; 22
    2128:	ee ad       	ldd	r30, Y+62	; 0x3e
    212a:	ff ad       	ldd	r31, Y+63	; 0x3f
    212c:	66 97       	sbiw	r28, 0x16	; 22
    212e:	00 80       	ld	r0, Z
    2130:	66 96       	adiw	r28, 0x16	; 22
    2132:	8e ad       	ldd	r24, Y+62	; 0x3e
    2134:	9f ad       	ldd	r25, Y+63	; 0x3f
    2136:	66 97       	sbiw	r28, 0x16	; 22
    2138:	01 96       	adiw	r24, 0x01	; 1
    213a:	66 96       	adiw	r28, 0x16	; 22
    213c:	9f af       	std	Y+63, r25	; 0x3f
    213e:	8e af       	std	Y+62, r24	; 0x3e
    2140:	66 97       	sbiw	r28, 0x16	; 22
    2142:	64 96       	adiw	r28, 0x14	; 20
    2144:	ee ad       	ldd	r30, Y+62	; 0x3e
    2146:	ff ad       	ldd	r31, Y+63	; 0x3f
    2148:	64 97       	sbiw	r28, 0x14	; 20
    214a:	00 82       	st	Z, r0
    214c:	64 96       	adiw	r28, 0x14	; 20
    214e:	8e ad       	ldd	r24, Y+62	; 0x3e
    2150:	9f ad       	ldd	r25, Y+63	; 0x3f
    2152:	64 97       	sbiw	r28, 0x14	; 20
    2154:	01 96       	adiw	r24, 0x01	; 1
    2156:	64 96       	adiw	r28, 0x14	; 20
    2158:	9f af       	std	Y+63, r25	; 0x3f
    215a:	8e af       	std	Y+62, r24	; 0x3e
    215c:	64 97       	sbiw	r28, 0x14	; 20
    215e:	67 96       	adiw	r28, 0x17	; 23
    2160:	9f ad       	ldd	r25, Y+63	; 0x3f
    2162:	67 97       	sbiw	r28, 0x17	; 23
    2164:	91 50       	subi	r25, 0x01	; 1
    2166:	67 96       	adiw	r28, 0x17	; 23
    2168:	9f af       	std	Y+63, r25	; 0x3f
    216a:	67 97       	sbiw	r28, 0x17	; 23
    216c:	67 96       	adiw	r28, 0x17	; 23
    216e:	ef ad       	ldd	r30, Y+63	; 0x3f
    2170:	67 97       	sbiw	r28, 0x17	; 23
    2172:	ee 23       	and	r30, r30
    2174:	c1 f6       	brne	.-80     	; 0x2126 <main+0x5b6>
			Timer1_init(&timer_config);
    2176:	ce 01       	movw	r24, r28
    2178:	ce 96       	adiw	r24, 0x3e	; 62
    217a:	0e 94 99 0a 	call	0x1532	; 0x1532 <Timer1_init>
    217e:	f0 cd       	rjmp	.-1056   	; 0x1d60 <main+0x1f0>

00002180 <__udivmodsi4>:
    2180:	a1 e2       	ldi	r26, 0x21	; 33
    2182:	1a 2e       	mov	r1, r26
    2184:	aa 1b       	sub	r26, r26
    2186:	bb 1b       	sub	r27, r27
    2188:	fd 01       	movw	r30, r26
    218a:	0d c0       	rjmp	.+26     	; 0x21a6 <__udivmodsi4_ep>

0000218c <__udivmodsi4_loop>:
    218c:	aa 1f       	adc	r26, r26
    218e:	bb 1f       	adc	r27, r27
    2190:	ee 1f       	adc	r30, r30
    2192:	ff 1f       	adc	r31, r31
    2194:	a2 17       	cp	r26, r18
    2196:	b3 07       	cpc	r27, r19
    2198:	e4 07       	cpc	r30, r20
    219a:	f5 07       	cpc	r31, r21
    219c:	20 f0       	brcs	.+8      	; 0x21a6 <__udivmodsi4_ep>
    219e:	a2 1b       	sub	r26, r18
    21a0:	b3 0b       	sbc	r27, r19
    21a2:	e4 0b       	sbc	r30, r20
    21a4:	f5 0b       	sbc	r31, r21

000021a6 <__udivmodsi4_ep>:
    21a6:	66 1f       	adc	r22, r22
    21a8:	77 1f       	adc	r23, r23
    21aa:	88 1f       	adc	r24, r24
    21ac:	99 1f       	adc	r25, r25
    21ae:	1a 94       	dec	r1
    21b0:	69 f7       	brne	.-38     	; 0x218c <__udivmodsi4_loop>
    21b2:	60 95       	com	r22
    21b4:	70 95       	com	r23
    21b6:	80 95       	com	r24
    21b8:	90 95       	com	r25
    21ba:	9b 01       	movw	r18, r22
    21bc:	ac 01       	movw	r20, r24
    21be:	bd 01       	movw	r22, r26
    21c0:	cf 01       	movw	r24, r30
    21c2:	08 95       	ret

000021c4 <__prologue_saves__>:
    21c4:	2f 92       	push	r2
    21c6:	3f 92       	push	r3
    21c8:	4f 92       	push	r4
    21ca:	5f 92       	push	r5
    21cc:	6f 92       	push	r6
    21ce:	7f 92       	push	r7
    21d0:	8f 92       	push	r8
    21d2:	9f 92       	push	r9
    21d4:	af 92       	push	r10
    21d6:	bf 92       	push	r11
    21d8:	cf 92       	push	r12
    21da:	df 92       	push	r13
    21dc:	ef 92       	push	r14
    21de:	ff 92       	push	r15
    21e0:	0f 93       	push	r16
    21e2:	1f 93       	push	r17
    21e4:	cf 93       	push	r28
    21e6:	df 93       	push	r29
    21e8:	cd b7       	in	r28, 0x3d	; 61
    21ea:	de b7       	in	r29, 0x3e	; 62
    21ec:	ca 1b       	sub	r28, r26
    21ee:	db 0b       	sbc	r29, r27
    21f0:	0f b6       	in	r0, 0x3f	; 63
    21f2:	f8 94       	cli
    21f4:	de bf       	out	0x3e, r29	; 62
    21f6:	0f be       	out	0x3f, r0	; 63
    21f8:	cd bf       	out	0x3d, r28	; 61
    21fa:	09 94       	ijmp

000021fc <__epilogue_restores__>:
    21fc:	2a 88       	ldd	r2, Y+18	; 0x12
    21fe:	39 88       	ldd	r3, Y+17	; 0x11
    2200:	48 88       	ldd	r4, Y+16	; 0x10
    2202:	5f 84       	ldd	r5, Y+15	; 0x0f
    2204:	6e 84       	ldd	r6, Y+14	; 0x0e
    2206:	7d 84       	ldd	r7, Y+13	; 0x0d
    2208:	8c 84       	ldd	r8, Y+12	; 0x0c
    220a:	9b 84       	ldd	r9, Y+11	; 0x0b
    220c:	aa 84       	ldd	r10, Y+10	; 0x0a
    220e:	b9 84       	ldd	r11, Y+9	; 0x09
    2210:	c8 84       	ldd	r12, Y+8	; 0x08
    2212:	df 80       	ldd	r13, Y+7	; 0x07
    2214:	ee 80       	ldd	r14, Y+6	; 0x06
    2216:	fd 80       	ldd	r15, Y+5	; 0x05
    2218:	0c 81       	ldd	r16, Y+4	; 0x04
    221a:	1b 81       	ldd	r17, Y+3	; 0x03
    221c:	aa 81       	ldd	r26, Y+2	; 0x02
    221e:	b9 81       	ldd	r27, Y+1	; 0x01
    2220:	ce 0f       	add	r28, r30
    2222:	d1 1d       	adc	r29, r1
    2224:	0f b6       	in	r0, 0x3f	; 63
    2226:	f8 94       	cli
    2228:	de bf       	out	0x3e, r29	; 62
    222a:	0f be       	out	0x3f, r0	; 63
    222c:	cd bf       	out	0x3d, r28	; 61
    222e:	ed 01       	movw	r28, r26
    2230:	08 95       	ret

00002232 <_exit>:
    2232:	f8 94       	cli

00002234 <__stop_program>:
    2234:	ff cf       	rjmp	.-2      	; 0x2234 <__stop_program>
