
HMI_ECU.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00002be8  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000098  00800060  00002be8  00002c7c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000003  008000f8  008000f8  00002d14  2**0
                  ALLOC
  3 .stab         0000252c  00000000  00000000  00002d14  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00001260  00000000  00000000  00005240  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000140  00000000  00000000  000064a0  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 00000170  00000000  00000000  000065e0  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00001c49  00000000  00000000  00006750  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00000eeb  00000000  00000000  00008399  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00000dad  00000000  00000000  00009284  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000160  00000000  00000000  0000a034  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    0000028d  00000000  00000000  0000a194  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    000007ce  00000000  00000000  0000a421  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  0000abef  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 a3 05 	jmp	0xb46	; 0xb46 <__vector_6>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d4 e0       	ldi	r29, 0x04	; 4
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	10 e0       	ldi	r17, 0x00	; 0
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e8 ee       	ldi	r30, 0xE8	; 232
      68:	fb e2       	ldi	r31, 0x2B	; 43
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	a8 3f       	cpi	r26, 0xF8	; 248
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	10 e0       	ldi	r17, 0x00	; 0
      78:	a8 ef       	ldi	r26, 0xF8	; 248
      7a:	b0 e0       	ldi	r27, 0x00	; 0
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	ab 3f       	cpi	r26, 0xFB	; 251
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 3c 0e 	call	0x1c78	; 0x1c78 <main>
      8a:	0c 94 f2 15 	jmp	0x2be4	; 0x2be4 <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 49 03 	call	0x692	; 0x692 <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 76 15 	jmp	0x2aec	; 0x2aec <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	ac ed       	ldi	r26, 0xDC	; 220
     128:	b0 e0       	ldi	r27, 0x00	; 0
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 92 15 	jmp	0x2b24	; 0x2b24 <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 82 15 	jmp	0x2b04	; 0x2b04 <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 9e 15 	jmp	0x2b3c	; 0x2b3c <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 82 15 	jmp	0x2b04	; 0x2b04 <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 9e 15 	jmp	0x2b3c	; 0x2b3c <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 76 15 	jmp	0x2aec	; 0x2aec <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__stack+0x3f>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__stack+0x55>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__stack+0x2d>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__stack+0x3f>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__stack+0x35>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__stack+0x3b>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__stack+0x55>
     494:	8c ed       	ldi	r24, 0xDC	; 220
     496:	90 e0       	ldi	r25, 0x00	; 0
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__stack+0x1c7>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__stack+0x51>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__stack+0x1c7>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__stack+0x67>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__stack+0x1c7>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__stack+0xd3>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__stack+0xc7>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__stack+0xef>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__stack+0x109>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__stack+0x8f>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__stack+0x14d>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__stack+0x141>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__stack+0x11f>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__stack+0x16b>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__stack+0x153>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__stack+0x1ad>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__stack+0x1ad>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__stack+0x1ad>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__stack+0x1b7>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 92 15 	jmp	0x2b24	; 0x2b24 <__epilogue_restores__>

00000632 <__gtsf2>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 82 15 	jmp	0x2b04	; 0x2b04 <__prologue_saves__+0x18>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	89 e0       	ldi	r24, 0x09	; 9
     650:	e8 2e       	mov	r14, r24
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     672:	89 85       	ldd	r24, Y+9	; 0x09
     674:	82 30       	cpi	r24, 0x02	; 2
     676:	40 f0       	brcs	.+16     	; 0x688 <__gtsf2+0x56>
     678:	89 89       	ldd	r24, Y+17	; 0x11
     67a:	82 30       	cpi	r24, 0x02	; 2
     67c:	28 f0       	brcs	.+10     	; 0x688 <__gtsf2+0x56>
     67e:	c7 01       	movw	r24, r14
     680:	b8 01       	movw	r22, r16
     682:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     686:	01 c0       	rjmp	.+2      	; 0x68a <__gtsf2+0x58>
     688:	8f ef       	ldi	r24, 0xFF	; 255
     68a:	68 96       	adiw	r28, 0x18	; 24
     68c:	e6 e0       	ldi	r30, 0x06	; 6
     68e:	0c 94 9e 15 	jmp	0x2b3c	; 0x2b3c <__epilogue_restores__+0x18>

00000692 <__gesf2>:
     692:	a8 e1       	ldi	r26, 0x18	; 24
     694:	b0 e0       	ldi	r27, 0x00	; 0
     696:	ef e4       	ldi	r30, 0x4F	; 79
     698:	f3 e0       	ldi	r31, 0x03	; 3
     69a:	0c 94 82 15 	jmp	0x2b04	; 0x2b04 <__prologue_saves__+0x18>
     69e:	69 83       	std	Y+1, r22	; 0x01
     6a0:	7a 83       	std	Y+2, r23	; 0x02
     6a2:	8b 83       	std	Y+3, r24	; 0x03
     6a4:	9c 83       	std	Y+4, r25	; 0x04
     6a6:	2d 83       	std	Y+5, r18	; 0x05
     6a8:	3e 83       	std	Y+6, r19	; 0x06
     6aa:	4f 83       	std	Y+7, r20	; 0x07
     6ac:	58 87       	std	Y+8, r21	; 0x08
     6ae:	89 e0       	ldi	r24, 0x09	; 9
     6b0:	e8 2e       	mov	r14, r24
     6b2:	f1 2c       	mov	r15, r1
     6b4:	ec 0e       	add	r14, r28
     6b6:	fd 1e       	adc	r15, r29
     6b8:	ce 01       	movw	r24, r28
     6ba:	01 96       	adiw	r24, 0x01	; 1
     6bc:	b7 01       	movw	r22, r14
     6be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6c2:	8e 01       	movw	r16, r28
     6c4:	0f 5e       	subi	r16, 0xEF	; 239
     6c6:	1f 4f       	sbci	r17, 0xFF	; 255
     6c8:	ce 01       	movw	r24, r28
     6ca:	05 96       	adiw	r24, 0x05	; 5
     6cc:	b8 01       	movw	r22, r16
     6ce:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6d2:	89 85       	ldd	r24, Y+9	; 0x09
     6d4:	82 30       	cpi	r24, 0x02	; 2
     6d6:	40 f0       	brcs	.+16     	; 0x6e8 <__gesf2+0x56>
     6d8:	89 89       	ldd	r24, Y+17	; 0x11
     6da:	82 30       	cpi	r24, 0x02	; 2
     6dc:	28 f0       	brcs	.+10     	; 0x6e8 <__gesf2+0x56>
     6de:	c7 01       	movw	r24, r14
     6e0:	b8 01       	movw	r22, r16
     6e2:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     6e6:	01 c0       	rjmp	.+2      	; 0x6ea <__gesf2+0x58>
     6e8:	8f ef       	ldi	r24, 0xFF	; 255
     6ea:	68 96       	adiw	r28, 0x18	; 24
     6ec:	e6 e0       	ldi	r30, 0x06	; 6
     6ee:	0c 94 9e 15 	jmp	0x2b3c	; 0x2b3c <__epilogue_restores__+0x18>

000006f2 <__ltsf2>:
     6f2:	a8 e1       	ldi	r26, 0x18	; 24
     6f4:	b0 e0       	ldi	r27, 0x00	; 0
     6f6:	ef e7       	ldi	r30, 0x7F	; 127
     6f8:	f3 e0       	ldi	r31, 0x03	; 3
     6fa:	0c 94 82 15 	jmp	0x2b04	; 0x2b04 <__prologue_saves__+0x18>
     6fe:	69 83       	std	Y+1, r22	; 0x01
     700:	7a 83       	std	Y+2, r23	; 0x02
     702:	8b 83       	std	Y+3, r24	; 0x03
     704:	9c 83       	std	Y+4, r25	; 0x04
     706:	2d 83       	std	Y+5, r18	; 0x05
     708:	3e 83       	std	Y+6, r19	; 0x06
     70a:	4f 83       	std	Y+7, r20	; 0x07
     70c:	58 87       	std	Y+8, r21	; 0x08
     70e:	89 e0       	ldi	r24, 0x09	; 9
     710:	e8 2e       	mov	r14, r24
     712:	f1 2c       	mov	r15, r1
     714:	ec 0e       	add	r14, r28
     716:	fd 1e       	adc	r15, r29
     718:	ce 01       	movw	r24, r28
     71a:	01 96       	adiw	r24, 0x01	; 1
     71c:	b7 01       	movw	r22, r14
     71e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     722:	8e 01       	movw	r16, r28
     724:	0f 5e       	subi	r16, 0xEF	; 239
     726:	1f 4f       	sbci	r17, 0xFF	; 255
     728:	ce 01       	movw	r24, r28
     72a:	05 96       	adiw	r24, 0x05	; 5
     72c:	b8 01       	movw	r22, r16
     72e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     732:	89 85       	ldd	r24, Y+9	; 0x09
     734:	82 30       	cpi	r24, 0x02	; 2
     736:	40 f0       	brcs	.+16     	; 0x748 <__ltsf2+0x56>
     738:	89 89       	ldd	r24, Y+17	; 0x11
     73a:	82 30       	cpi	r24, 0x02	; 2
     73c:	28 f0       	brcs	.+10     	; 0x748 <__ltsf2+0x56>
     73e:	c7 01       	movw	r24, r14
     740:	b8 01       	movw	r22, r16
     742:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     746:	01 c0       	rjmp	.+2      	; 0x74a <__ltsf2+0x58>
     748:	81 e0       	ldi	r24, 0x01	; 1
     74a:	68 96       	adiw	r28, 0x18	; 24
     74c:	e6 e0       	ldi	r30, 0x06	; 6
     74e:	0c 94 9e 15 	jmp	0x2b3c	; 0x2b3c <__epilogue_restores__+0x18>

00000752 <__fixsfsi>:
     752:	ac e0       	ldi	r26, 0x0C	; 12
     754:	b0 e0       	ldi	r27, 0x00	; 0
     756:	ef ea       	ldi	r30, 0xAF	; 175
     758:	f3 e0       	ldi	r31, 0x03	; 3
     75a:	0c 94 86 15 	jmp	0x2b0c	; 0x2b0c <__prologue_saves__+0x20>
     75e:	69 83       	std	Y+1, r22	; 0x01
     760:	7a 83       	std	Y+2, r23	; 0x02
     762:	8b 83       	std	Y+3, r24	; 0x03
     764:	9c 83       	std	Y+4, r25	; 0x04
     766:	ce 01       	movw	r24, r28
     768:	01 96       	adiw	r24, 0x01	; 1
     76a:	be 01       	movw	r22, r28
     76c:	6b 5f       	subi	r22, 0xFB	; 251
     76e:	7f 4f       	sbci	r23, 0xFF	; 255
     770:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     774:	8d 81       	ldd	r24, Y+5	; 0x05
     776:	82 30       	cpi	r24, 0x02	; 2
     778:	61 f1       	breq	.+88     	; 0x7d2 <__fixsfsi+0x80>
     77a:	82 30       	cpi	r24, 0x02	; 2
     77c:	50 f1       	brcs	.+84     	; 0x7d2 <__fixsfsi+0x80>
     77e:	84 30       	cpi	r24, 0x04	; 4
     780:	21 f4       	brne	.+8      	; 0x78a <__fixsfsi+0x38>
     782:	8e 81       	ldd	r24, Y+6	; 0x06
     784:	88 23       	and	r24, r24
     786:	51 f1       	breq	.+84     	; 0x7dc <__fixsfsi+0x8a>
     788:	2e c0       	rjmp	.+92     	; 0x7e6 <__fixsfsi+0x94>
     78a:	2f 81       	ldd	r18, Y+7	; 0x07
     78c:	38 85       	ldd	r19, Y+8	; 0x08
     78e:	37 fd       	sbrc	r19, 7
     790:	20 c0       	rjmp	.+64     	; 0x7d2 <__fixsfsi+0x80>
     792:	6e 81       	ldd	r22, Y+6	; 0x06
     794:	2f 31       	cpi	r18, 0x1F	; 31
     796:	31 05       	cpc	r19, r1
     798:	1c f0       	brlt	.+6      	; 0x7a0 <__fixsfsi+0x4e>
     79a:	66 23       	and	r22, r22
     79c:	f9 f0       	breq	.+62     	; 0x7dc <__fixsfsi+0x8a>
     79e:	23 c0       	rjmp	.+70     	; 0x7e6 <__fixsfsi+0x94>
     7a0:	8e e1       	ldi	r24, 0x1E	; 30
     7a2:	90 e0       	ldi	r25, 0x00	; 0
     7a4:	82 1b       	sub	r24, r18
     7a6:	93 0b       	sbc	r25, r19
     7a8:	29 85       	ldd	r18, Y+9	; 0x09
     7aa:	3a 85       	ldd	r19, Y+10	; 0x0a
     7ac:	4b 85       	ldd	r20, Y+11	; 0x0b
     7ae:	5c 85       	ldd	r21, Y+12	; 0x0c
     7b0:	04 c0       	rjmp	.+8      	; 0x7ba <__fixsfsi+0x68>
     7b2:	56 95       	lsr	r21
     7b4:	47 95       	ror	r20
     7b6:	37 95       	ror	r19
     7b8:	27 95       	ror	r18
     7ba:	8a 95       	dec	r24
     7bc:	d2 f7       	brpl	.-12     	; 0x7b2 <__fixsfsi+0x60>
     7be:	66 23       	and	r22, r22
     7c0:	b1 f0       	breq	.+44     	; 0x7ee <__fixsfsi+0x9c>
     7c2:	50 95       	com	r21
     7c4:	40 95       	com	r20
     7c6:	30 95       	com	r19
     7c8:	21 95       	neg	r18
     7ca:	3f 4f       	sbci	r19, 0xFF	; 255
     7cc:	4f 4f       	sbci	r20, 0xFF	; 255
     7ce:	5f 4f       	sbci	r21, 0xFF	; 255
     7d0:	0e c0       	rjmp	.+28     	; 0x7ee <__fixsfsi+0x9c>
     7d2:	20 e0       	ldi	r18, 0x00	; 0
     7d4:	30 e0       	ldi	r19, 0x00	; 0
     7d6:	40 e0       	ldi	r20, 0x00	; 0
     7d8:	50 e0       	ldi	r21, 0x00	; 0
     7da:	09 c0       	rjmp	.+18     	; 0x7ee <__fixsfsi+0x9c>
     7dc:	2f ef       	ldi	r18, 0xFF	; 255
     7de:	3f ef       	ldi	r19, 0xFF	; 255
     7e0:	4f ef       	ldi	r20, 0xFF	; 255
     7e2:	5f e7       	ldi	r21, 0x7F	; 127
     7e4:	04 c0       	rjmp	.+8      	; 0x7ee <__fixsfsi+0x9c>
     7e6:	20 e0       	ldi	r18, 0x00	; 0
     7e8:	30 e0       	ldi	r19, 0x00	; 0
     7ea:	40 e0       	ldi	r20, 0x00	; 0
     7ec:	50 e8       	ldi	r21, 0x80	; 128
     7ee:	b9 01       	movw	r22, r18
     7f0:	ca 01       	movw	r24, r20
     7f2:	2c 96       	adiw	r28, 0x0c	; 12
     7f4:	e2 e0       	ldi	r30, 0x02	; 2
     7f6:	0c 94 a2 15 	jmp	0x2b44	; 0x2b44 <__epilogue_restores__+0x20>

000007fa <__pack_f>:
     7fa:	df 92       	push	r13
     7fc:	ef 92       	push	r14
     7fe:	ff 92       	push	r15
     800:	0f 93       	push	r16
     802:	1f 93       	push	r17
     804:	fc 01       	movw	r30, r24
     806:	e4 80       	ldd	r14, Z+4	; 0x04
     808:	f5 80       	ldd	r15, Z+5	; 0x05
     80a:	06 81       	ldd	r16, Z+6	; 0x06
     80c:	17 81       	ldd	r17, Z+7	; 0x07
     80e:	d1 80       	ldd	r13, Z+1	; 0x01
     810:	80 81       	ld	r24, Z
     812:	82 30       	cpi	r24, 0x02	; 2
     814:	48 f4       	brcc	.+18     	; 0x828 <__pack_f+0x2e>
     816:	80 e0       	ldi	r24, 0x00	; 0
     818:	90 e0       	ldi	r25, 0x00	; 0
     81a:	a0 e1       	ldi	r26, 0x10	; 16
     81c:	b0 e0       	ldi	r27, 0x00	; 0
     81e:	e8 2a       	or	r14, r24
     820:	f9 2a       	or	r15, r25
     822:	0a 2b       	or	r16, r26
     824:	1b 2b       	or	r17, r27
     826:	a5 c0       	rjmp	.+330    	; 0x972 <__pack_f+0x178>
     828:	84 30       	cpi	r24, 0x04	; 4
     82a:	09 f4       	brne	.+2      	; 0x82e <__pack_f+0x34>
     82c:	9f c0       	rjmp	.+318    	; 0x96c <__pack_f+0x172>
     82e:	82 30       	cpi	r24, 0x02	; 2
     830:	21 f4       	brne	.+8      	; 0x83a <__pack_f+0x40>
     832:	ee 24       	eor	r14, r14
     834:	ff 24       	eor	r15, r15
     836:	87 01       	movw	r16, r14
     838:	05 c0       	rjmp	.+10     	; 0x844 <__pack_f+0x4a>
     83a:	e1 14       	cp	r14, r1
     83c:	f1 04       	cpc	r15, r1
     83e:	01 05       	cpc	r16, r1
     840:	11 05       	cpc	r17, r1
     842:	19 f4       	brne	.+6      	; 0x84a <__pack_f+0x50>
     844:	e0 e0       	ldi	r30, 0x00	; 0
     846:	f0 e0       	ldi	r31, 0x00	; 0
     848:	96 c0       	rjmp	.+300    	; 0x976 <__pack_f+0x17c>
     84a:	62 81       	ldd	r22, Z+2	; 0x02
     84c:	73 81       	ldd	r23, Z+3	; 0x03
     84e:	9f ef       	ldi	r25, 0xFF	; 255
     850:	62 38       	cpi	r22, 0x82	; 130
     852:	79 07       	cpc	r23, r25
     854:	0c f0       	brlt	.+2      	; 0x858 <__pack_f+0x5e>
     856:	5b c0       	rjmp	.+182    	; 0x90e <__pack_f+0x114>
     858:	22 e8       	ldi	r18, 0x82	; 130
     85a:	3f ef       	ldi	r19, 0xFF	; 255
     85c:	26 1b       	sub	r18, r22
     85e:	37 0b       	sbc	r19, r23
     860:	2a 31       	cpi	r18, 0x1A	; 26
     862:	31 05       	cpc	r19, r1
     864:	2c f0       	brlt	.+10     	; 0x870 <__pack_f+0x76>
     866:	20 e0       	ldi	r18, 0x00	; 0
     868:	30 e0       	ldi	r19, 0x00	; 0
     86a:	40 e0       	ldi	r20, 0x00	; 0
     86c:	50 e0       	ldi	r21, 0x00	; 0
     86e:	2a c0       	rjmp	.+84     	; 0x8c4 <__pack_f+0xca>
     870:	b8 01       	movw	r22, r16
     872:	a7 01       	movw	r20, r14
     874:	02 2e       	mov	r0, r18
     876:	04 c0       	rjmp	.+8      	; 0x880 <__pack_f+0x86>
     878:	76 95       	lsr	r23
     87a:	67 95       	ror	r22
     87c:	57 95       	ror	r21
     87e:	47 95       	ror	r20
     880:	0a 94       	dec	r0
     882:	d2 f7       	brpl	.-12     	; 0x878 <__pack_f+0x7e>
     884:	81 e0       	ldi	r24, 0x01	; 1
     886:	90 e0       	ldi	r25, 0x00	; 0
     888:	a0 e0       	ldi	r26, 0x00	; 0
     88a:	b0 e0       	ldi	r27, 0x00	; 0
     88c:	04 c0       	rjmp	.+8      	; 0x896 <__pack_f+0x9c>
     88e:	88 0f       	add	r24, r24
     890:	99 1f       	adc	r25, r25
     892:	aa 1f       	adc	r26, r26
     894:	bb 1f       	adc	r27, r27
     896:	2a 95       	dec	r18
     898:	d2 f7       	brpl	.-12     	; 0x88e <__pack_f+0x94>
     89a:	01 97       	sbiw	r24, 0x01	; 1
     89c:	a1 09       	sbc	r26, r1
     89e:	b1 09       	sbc	r27, r1
     8a0:	8e 21       	and	r24, r14
     8a2:	9f 21       	and	r25, r15
     8a4:	a0 23       	and	r26, r16
     8a6:	b1 23       	and	r27, r17
     8a8:	00 97       	sbiw	r24, 0x00	; 0
     8aa:	a1 05       	cpc	r26, r1
     8ac:	b1 05       	cpc	r27, r1
     8ae:	21 f0       	breq	.+8      	; 0x8b8 <__pack_f+0xbe>
     8b0:	81 e0       	ldi	r24, 0x01	; 1
     8b2:	90 e0       	ldi	r25, 0x00	; 0
     8b4:	a0 e0       	ldi	r26, 0x00	; 0
     8b6:	b0 e0       	ldi	r27, 0x00	; 0
     8b8:	9a 01       	movw	r18, r20
     8ba:	ab 01       	movw	r20, r22
     8bc:	28 2b       	or	r18, r24
     8be:	39 2b       	or	r19, r25
     8c0:	4a 2b       	or	r20, r26
     8c2:	5b 2b       	or	r21, r27
     8c4:	da 01       	movw	r26, r20
     8c6:	c9 01       	movw	r24, r18
     8c8:	8f 77       	andi	r24, 0x7F	; 127
     8ca:	90 70       	andi	r25, 0x00	; 0
     8cc:	a0 70       	andi	r26, 0x00	; 0
     8ce:	b0 70       	andi	r27, 0x00	; 0
     8d0:	80 34       	cpi	r24, 0x40	; 64
     8d2:	91 05       	cpc	r25, r1
     8d4:	a1 05       	cpc	r26, r1
     8d6:	b1 05       	cpc	r27, r1
     8d8:	39 f4       	brne	.+14     	; 0x8e8 <__pack_f+0xee>
     8da:	27 ff       	sbrs	r18, 7
     8dc:	09 c0       	rjmp	.+18     	; 0x8f0 <__pack_f+0xf6>
     8de:	20 5c       	subi	r18, 0xC0	; 192
     8e0:	3f 4f       	sbci	r19, 0xFF	; 255
     8e2:	4f 4f       	sbci	r20, 0xFF	; 255
     8e4:	5f 4f       	sbci	r21, 0xFF	; 255
     8e6:	04 c0       	rjmp	.+8      	; 0x8f0 <__pack_f+0xf6>
     8e8:	21 5c       	subi	r18, 0xC1	; 193
     8ea:	3f 4f       	sbci	r19, 0xFF	; 255
     8ec:	4f 4f       	sbci	r20, 0xFF	; 255
     8ee:	5f 4f       	sbci	r21, 0xFF	; 255
     8f0:	e0 e0       	ldi	r30, 0x00	; 0
     8f2:	f0 e0       	ldi	r31, 0x00	; 0
     8f4:	20 30       	cpi	r18, 0x00	; 0
     8f6:	a0 e0       	ldi	r26, 0x00	; 0
     8f8:	3a 07       	cpc	r19, r26
     8fa:	a0 e0       	ldi	r26, 0x00	; 0
     8fc:	4a 07       	cpc	r20, r26
     8fe:	a0 e4       	ldi	r26, 0x40	; 64
     900:	5a 07       	cpc	r21, r26
     902:	10 f0       	brcs	.+4      	; 0x908 <__pack_f+0x10e>
     904:	e1 e0       	ldi	r30, 0x01	; 1
     906:	f0 e0       	ldi	r31, 0x00	; 0
     908:	79 01       	movw	r14, r18
     90a:	8a 01       	movw	r16, r20
     90c:	27 c0       	rjmp	.+78     	; 0x95c <__pack_f+0x162>
     90e:	60 38       	cpi	r22, 0x80	; 128
     910:	71 05       	cpc	r23, r1
     912:	64 f5       	brge	.+88     	; 0x96c <__pack_f+0x172>
     914:	fb 01       	movw	r30, r22
     916:	e1 58       	subi	r30, 0x81	; 129
     918:	ff 4f       	sbci	r31, 0xFF	; 255
     91a:	d8 01       	movw	r26, r16
     91c:	c7 01       	movw	r24, r14
     91e:	8f 77       	andi	r24, 0x7F	; 127
     920:	90 70       	andi	r25, 0x00	; 0
     922:	a0 70       	andi	r26, 0x00	; 0
     924:	b0 70       	andi	r27, 0x00	; 0
     926:	80 34       	cpi	r24, 0x40	; 64
     928:	91 05       	cpc	r25, r1
     92a:	a1 05       	cpc	r26, r1
     92c:	b1 05       	cpc	r27, r1
     92e:	39 f4       	brne	.+14     	; 0x93e <__pack_f+0x144>
     930:	e7 fe       	sbrs	r14, 7
     932:	0d c0       	rjmp	.+26     	; 0x94e <__pack_f+0x154>
     934:	80 e4       	ldi	r24, 0x40	; 64
     936:	90 e0       	ldi	r25, 0x00	; 0
     938:	a0 e0       	ldi	r26, 0x00	; 0
     93a:	b0 e0       	ldi	r27, 0x00	; 0
     93c:	04 c0       	rjmp	.+8      	; 0x946 <__pack_f+0x14c>
     93e:	8f e3       	ldi	r24, 0x3F	; 63
     940:	90 e0       	ldi	r25, 0x00	; 0
     942:	a0 e0       	ldi	r26, 0x00	; 0
     944:	b0 e0       	ldi	r27, 0x00	; 0
     946:	e8 0e       	add	r14, r24
     948:	f9 1e       	adc	r15, r25
     94a:	0a 1f       	adc	r16, r26
     94c:	1b 1f       	adc	r17, r27
     94e:	17 ff       	sbrs	r17, 7
     950:	05 c0       	rjmp	.+10     	; 0x95c <__pack_f+0x162>
     952:	16 95       	lsr	r17
     954:	07 95       	ror	r16
     956:	f7 94       	ror	r15
     958:	e7 94       	ror	r14
     95a:	31 96       	adiw	r30, 0x01	; 1
     95c:	87 e0       	ldi	r24, 0x07	; 7
     95e:	16 95       	lsr	r17
     960:	07 95       	ror	r16
     962:	f7 94       	ror	r15
     964:	e7 94       	ror	r14
     966:	8a 95       	dec	r24
     968:	d1 f7       	brne	.-12     	; 0x95e <__pack_f+0x164>
     96a:	05 c0       	rjmp	.+10     	; 0x976 <__pack_f+0x17c>
     96c:	ee 24       	eor	r14, r14
     96e:	ff 24       	eor	r15, r15
     970:	87 01       	movw	r16, r14
     972:	ef ef       	ldi	r30, 0xFF	; 255
     974:	f0 e0       	ldi	r31, 0x00	; 0
     976:	6e 2f       	mov	r22, r30
     978:	67 95       	ror	r22
     97a:	66 27       	eor	r22, r22
     97c:	67 95       	ror	r22
     97e:	90 2f       	mov	r25, r16
     980:	9f 77       	andi	r25, 0x7F	; 127
     982:	d7 94       	ror	r13
     984:	dd 24       	eor	r13, r13
     986:	d7 94       	ror	r13
     988:	8e 2f       	mov	r24, r30
     98a:	86 95       	lsr	r24
     98c:	49 2f       	mov	r20, r25
     98e:	46 2b       	or	r20, r22
     990:	58 2f       	mov	r21, r24
     992:	5d 29       	or	r21, r13
     994:	b7 01       	movw	r22, r14
     996:	ca 01       	movw	r24, r20
     998:	1f 91       	pop	r17
     99a:	0f 91       	pop	r16
     99c:	ff 90       	pop	r15
     99e:	ef 90       	pop	r14
     9a0:	df 90       	pop	r13
     9a2:	08 95       	ret

000009a4 <__unpack_f>:
     9a4:	fc 01       	movw	r30, r24
     9a6:	db 01       	movw	r26, r22
     9a8:	40 81       	ld	r20, Z
     9aa:	51 81       	ldd	r21, Z+1	; 0x01
     9ac:	22 81       	ldd	r18, Z+2	; 0x02
     9ae:	62 2f       	mov	r22, r18
     9b0:	6f 77       	andi	r22, 0x7F	; 127
     9b2:	70 e0       	ldi	r23, 0x00	; 0
     9b4:	22 1f       	adc	r18, r18
     9b6:	22 27       	eor	r18, r18
     9b8:	22 1f       	adc	r18, r18
     9ba:	93 81       	ldd	r25, Z+3	; 0x03
     9bc:	89 2f       	mov	r24, r25
     9be:	88 0f       	add	r24, r24
     9c0:	82 2b       	or	r24, r18
     9c2:	28 2f       	mov	r18, r24
     9c4:	30 e0       	ldi	r19, 0x00	; 0
     9c6:	99 1f       	adc	r25, r25
     9c8:	99 27       	eor	r25, r25
     9ca:	99 1f       	adc	r25, r25
     9cc:	11 96       	adiw	r26, 0x01	; 1
     9ce:	9c 93       	st	X, r25
     9d0:	11 97       	sbiw	r26, 0x01	; 1
     9d2:	21 15       	cp	r18, r1
     9d4:	31 05       	cpc	r19, r1
     9d6:	a9 f5       	brne	.+106    	; 0xa42 <__unpack_f+0x9e>
     9d8:	41 15       	cp	r20, r1
     9da:	51 05       	cpc	r21, r1
     9dc:	61 05       	cpc	r22, r1
     9de:	71 05       	cpc	r23, r1
     9e0:	11 f4       	brne	.+4      	; 0x9e6 <__unpack_f+0x42>
     9e2:	82 e0       	ldi	r24, 0x02	; 2
     9e4:	37 c0       	rjmp	.+110    	; 0xa54 <__unpack_f+0xb0>
     9e6:	82 e8       	ldi	r24, 0x82	; 130
     9e8:	9f ef       	ldi	r25, 0xFF	; 255
     9ea:	13 96       	adiw	r26, 0x03	; 3
     9ec:	9c 93       	st	X, r25
     9ee:	8e 93       	st	-X, r24
     9f0:	12 97       	sbiw	r26, 0x02	; 2
     9f2:	9a 01       	movw	r18, r20
     9f4:	ab 01       	movw	r20, r22
     9f6:	67 e0       	ldi	r22, 0x07	; 7
     9f8:	22 0f       	add	r18, r18
     9fa:	33 1f       	adc	r19, r19
     9fc:	44 1f       	adc	r20, r20
     9fe:	55 1f       	adc	r21, r21
     a00:	6a 95       	dec	r22
     a02:	d1 f7       	brne	.-12     	; 0x9f8 <__unpack_f+0x54>
     a04:	83 e0       	ldi	r24, 0x03	; 3
     a06:	8c 93       	st	X, r24
     a08:	0d c0       	rjmp	.+26     	; 0xa24 <__unpack_f+0x80>
     a0a:	22 0f       	add	r18, r18
     a0c:	33 1f       	adc	r19, r19
     a0e:	44 1f       	adc	r20, r20
     a10:	55 1f       	adc	r21, r21
     a12:	12 96       	adiw	r26, 0x02	; 2
     a14:	8d 91       	ld	r24, X+
     a16:	9c 91       	ld	r25, X
     a18:	13 97       	sbiw	r26, 0x03	; 3
     a1a:	01 97       	sbiw	r24, 0x01	; 1
     a1c:	13 96       	adiw	r26, 0x03	; 3
     a1e:	9c 93       	st	X, r25
     a20:	8e 93       	st	-X, r24
     a22:	12 97       	sbiw	r26, 0x02	; 2
     a24:	20 30       	cpi	r18, 0x00	; 0
     a26:	80 e0       	ldi	r24, 0x00	; 0
     a28:	38 07       	cpc	r19, r24
     a2a:	80 e0       	ldi	r24, 0x00	; 0
     a2c:	48 07       	cpc	r20, r24
     a2e:	80 e4       	ldi	r24, 0x40	; 64
     a30:	58 07       	cpc	r21, r24
     a32:	58 f3       	brcs	.-42     	; 0xa0a <__unpack_f+0x66>
     a34:	14 96       	adiw	r26, 0x04	; 4
     a36:	2d 93       	st	X+, r18
     a38:	3d 93       	st	X+, r19
     a3a:	4d 93       	st	X+, r20
     a3c:	5c 93       	st	X, r21
     a3e:	17 97       	sbiw	r26, 0x07	; 7
     a40:	08 95       	ret
     a42:	2f 3f       	cpi	r18, 0xFF	; 255
     a44:	31 05       	cpc	r19, r1
     a46:	79 f4       	brne	.+30     	; 0xa66 <__unpack_f+0xc2>
     a48:	41 15       	cp	r20, r1
     a4a:	51 05       	cpc	r21, r1
     a4c:	61 05       	cpc	r22, r1
     a4e:	71 05       	cpc	r23, r1
     a50:	19 f4       	brne	.+6      	; 0xa58 <__unpack_f+0xb4>
     a52:	84 e0       	ldi	r24, 0x04	; 4
     a54:	8c 93       	st	X, r24
     a56:	08 95       	ret
     a58:	64 ff       	sbrs	r22, 4
     a5a:	03 c0       	rjmp	.+6      	; 0xa62 <__unpack_f+0xbe>
     a5c:	81 e0       	ldi	r24, 0x01	; 1
     a5e:	8c 93       	st	X, r24
     a60:	12 c0       	rjmp	.+36     	; 0xa86 <__unpack_f+0xe2>
     a62:	1c 92       	st	X, r1
     a64:	10 c0       	rjmp	.+32     	; 0xa86 <__unpack_f+0xe2>
     a66:	2f 57       	subi	r18, 0x7F	; 127
     a68:	30 40       	sbci	r19, 0x00	; 0
     a6a:	13 96       	adiw	r26, 0x03	; 3
     a6c:	3c 93       	st	X, r19
     a6e:	2e 93       	st	-X, r18
     a70:	12 97       	sbiw	r26, 0x02	; 2
     a72:	83 e0       	ldi	r24, 0x03	; 3
     a74:	8c 93       	st	X, r24
     a76:	87 e0       	ldi	r24, 0x07	; 7
     a78:	44 0f       	add	r20, r20
     a7a:	55 1f       	adc	r21, r21
     a7c:	66 1f       	adc	r22, r22
     a7e:	77 1f       	adc	r23, r23
     a80:	8a 95       	dec	r24
     a82:	d1 f7       	brne	.-12     	; 0xa78 <__unpack_f+0xd4>
     a84:	70 64       	ori	r23, 0x40	; 64
     a86:	14 96       	adiw	r26, 0x04	; 4
     a88:	4d 93       	st	X+, r20
     a8a:	5d 93       	st	X+, r21
     a8c:	6d 93       	st	X+, r22
     a8e:	7c 93       	st	X, r23
     a90:	17 97       	sbiw	r26, 0x07	; 7
     a92:	08 95       	ret

00000a94 <__fpcmp_parts_f>:
     a94:	1f 93       	push	r17
     a96:	dc 01       	movw	r26, r24
     a98:	fb 01       	movw	r30, r22
     a9a:	9c 91       	ld	r25, X
     a9c:	92 30       	cpi	r25, 0x02	; 2
     a9e:	08 f4       	brcc	.+2      	; 0xaa2 <__fpcmp_parts_f+0xe>
     aa0:	47 c0       	rjmp	.+142    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aa2:	80 81       	ld	r24, Z
     aa4:	82 30       	cpi	r24, 0x02	; 2
     aa6:	08 f4       	brcc	.+2      	; 0xaaa <__fpcmp_parts_f+0x16>
     aa8:	43 c0       	rjmp	.+134    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aaa:	94 30       	cpi	r25, 0x04	; 4
     aac:	51 f4       	brne	.+20     	; 0xac2 <__fpcmp_parts_f+0x2e>
     aae:	11 96       	adiw	r26, 0x01	; 1
     ab0:	1c 91       	ld	r17, X
     ab2:	84 30       	cpi	r24, 0x04	; 4
     ab4:	99 f5       	brne	.+102    	; 0xb1c <__fpcmp_parts_f+0x88>
     ab6:	81 81       	ldd	r24, Z+1	; 0x01
     ab8:	68 2f       	mov	r22, r24
     aba:	70 e0       	ldi	r23, 0x00	; 0
     abc:	61 1b       	sub	r22, r17
     abe:	71 09       	sbc	r23, r1
     ac0:	3f c0       	rjmp	.+126    	; 0xb40 <__fpcmp_parts_f+0xac>
     ac2:	84 30       	cpi	r24, 0x04	; 4
     ac4:	21 f0       	breq	.+8      	; 0xace <__fpcmp_parts_f+0x3a>
     ac6:	92 30       	cpi	r25, 0x02	; 2
     ac8:	31 f4       	brne	.+12     	; 0xad6 <__fpcmp_parts_f+0x42>
     aca:	82 30       	cpi	r24, 0x02	; 2
     acc:	b9 f1       	breq	.+110    	; 0xb3c <__fpcmp_parts_f+0xa8>
     ace:	81 81       	ldd	r24, Z+1	; 0x01
     ad0:	88 23       	and	r24, r24
     ad2:	89 f1       	breq	.+98     	; 0xb36 <__fpcmp_parts_f+0xa2>
     ad4:	2d c0       	rjmp	.+90     	; 0xb30 <__fpcmp_parts_f+0x9c>
     ad6:	11 96       	adiw	r26, 0x01	; 1
     ad8:	1c 91       	ld	r17, X
     ada:	11 97       	sbiw	r26, 0x01	; 1
     adc:	82 30       	cpi	r24, 0x02	; 2
     ade:	f1 f0       	breq	.+60     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae0:	81 81       	ldd	r24, Z+1	; 0x01
     ae2:	18 17       	cp	r17, r24
     ae4:	d9 f4       	brne	.+54     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae6:	12 96       	adiw	r26, 0x02	; 2
     ae8:	2d 91       	ld	r18, X+
     aea:	3c 91       	ld	r19, X
     aec:	13 97       	sbiw	r26, 0x03	; 3
     aee:	82 81       	ldd	r24, Z+2	; 0x02
     af0:	93 81       	ldd	r25, Z+3	; 0x03
     af2:	82 17       	cp	r24, r18
     af4:	93 07       	cpc	r25, r19
     af6:	94 f0       	brlt	.+36     	; 0xb1c <__fpcmp_parts_f+0x88>
     af8:	28 17       	cp	r18, r24
     afa:	39 07       	cpc	r19, r25
     afc:	bc f0       	brlt	.+46     	; 0xb2c <__fpcmp_parts_f+0x98>
     afe:	14 96       	adiw	r26, 0x04	; 4
     b00:	8d 91       	ld	r24, X+
     b02:	9d 91       	ld	r25, X+
     b04:	0d 90       	ld	r0, X+
     b06:	bc 91       	ld	r27, X
     b08:	a0 2d       	mov	r26, r0
     b0a:	24 81       	ldd	r18, Z+4	; 0x04
     b0c:	35 81       	ldd	r19, Z+5	; 0x05
     b0e:	46 81       	ldd	r20, Z+6	; 0x06
     b10:	57 81       	ldd	r21, Z+7	; 0x07
     b12:	28 17       	cp	r18, r24
     b14:	39 07       	cpc	r19, r25
     b16:	4a 07       	cpc	r20, r26
     b18:	5b 07       	cpc	r21, r27
     b1a:	18 f4       	brcc	.+6      	; 0xb22 <__fpcmp_parts_f+0x8e>
     b1c:	11 23       	and	r17, r17
     b1e:	41 f0       	breq	.+16     	; 0xb30 <__fpcmp_parts_f+0x9c>
     b20:	0a c0       	rjmp	.+20     	; 0xb36 <__fpcmp_parts_f+0xa2>
     b22:	82 17       	cp	r24, r18
     b24:	93 07       	cpc	r25, r19
     b26:	a4 07       	cpc	r26, r20
     b28:	b5 07       	cpc	r27, r21
     b2a:	40 f4       	brcc	.+16     	; 0xb3c <__fpcmp_parts_f+0xa8>
     b2c:	11 23       	and	r17, r17
     b2e:	19 f0       	breq	.+6      	; 0xb36 <__fpcmp_parts_f+0xa2>
     b30:	61 e0       	ldi	r22, 0x01	; 1
     b32:	70 e0       	ldi	r23, 0x00	; 0
     b34:	05 c0       	rjmp	.+10     	; 0xb40 <__fpcmp_parts_f+0xac>
     b36:	6f ef       	ldi	r22, 0xFF	; 255
     b38:	7f ef       	ldi	r23, 0xFF	; 255
     b3a:	02 c0       	rjmp	.+4      	; 0xb40 <__fpcmp_parts_f+0xac>
     b3c:	60 e0       	ldi	r22, 0x00	; 0
     b3e:	70 e0       	ldi	r23, 0x00	; 0
     b40:	cb 01       	movw	r24, r22
     b42:	1f 91       	pop	r17
     b44:	08 95       	ret

00000b46 <__vector_6>:

/* global pointer to function for callback*/
static volatile void(*g_callBackPTr)(void) = NULL;

ISR (TIMER1_COMPA_vect)
{
     b46:	1f 92       	push	r1
     b48:	0f 92       	push	r0
     b4a:	0f b6       	in	r0, 0x3f	; 63
     b4c:	0f 92       	push	r0
     b4e:	11 24       	eor	r1, r1
     b50:	2f 93       	push	r18
     b52:	3f 93       	push	r19
     b54:	4f 93       	push	r20
     b56:	5f 93       	push	r21
     b58:	6f 93       	push	r22
     b5a:	7f 93       	push	r23
     b5c:	8f 93       	push	r24
     b5e:	9f 93       	push	r25
     b60:	af 93       	push	r26
     b62:	bf 93       	push	r27
     b64:	ef 93       	push	r30
     b66:	ff 93       	push	r31
     b68:	df 93       	push	r29
     b6a:	cf 93       	push	r28
     b6c:	cd b7       	in	r28, 0x3d	; 61
     b6e:	de b7       	in	r29, 0x3e	; 62
	if (g_callBackPTr != NULL)
     b70:	80 91 f8 00 	lds	r24, 0x00F8
     b74:	90 91 f9 00 	lds	r25, 0x00F9
     b78:	00 97       	sbiw	r24, 0x00	; 0
     b7a:	29 f0       	breq	.+10     	; 0xb86 <__vector_6+0x40>
	{
		(*g_callBackPTr)();
     b7c:	e0 91 f8 00 	lds	r30, 0x00F8
     b80:	f0 91 f9 00 	lds	r31, 0x00F9
     b84:	09 95       	icall
	}

}
     b86:	cf 91       	pop	r28
     b88:	df 91       	pop	r29
     b8a:	ff 91       	pop	r31
     b8c:	ef 91       	pop	r30
     b8e:	bf 91       	pop	r27
     b90:	af 91       	pop	r26
     b92:	9f 91       	pop	r25
     b94:	8f 91       	pop	r24
     b96:	7f 91       	pop	r23
     b98:	6f 91       	pop	r22
     b9a:	5f 91       	pop	r21
     b9c:	4f 91       	pop	r20
     b9e:	3f 91       	pop	r19
     ba0:	2f 91       	pop	r18
     ba2:	0f 90       	pop	r0
     ba4:	0f be       	out	0x3f, r0	; 63
     ba6:	0f 90       	pop	r0
     ba8:	1f 90       	pop	r1
     baa:	18 95       	reti

00000bac <Timer1_init>:

uint8 Timer1_init(const Timer1_config * config_Ptr)
{
     bac:	df 93       	push	r29
     bae:	cf 93       	push	r28
     bb0:	00 d0       	rcall	.+0      	; 0xbb2 <Timer1_init+0x6>
     bb2:	cd b7       	in	r28, 0x3d	; 61
     bb4:	de b7       	in	r29, 0x3e	; 62
     bb6:	9a 83       	std	Y+2, r25	; 0x02
     bb8:	89 83       	std	Y+1, r24	; 0x01
	SREG |= (1 << 7); // I_bit
     bba:	af e5       	ldi	r26, 0x5F	; 95
     bbc:	b0 e0       	ldi	r27, 0x00	; 0
     bbe:	ef e5       	ldi	r30, 0x5F	; 95
     bc0:	f0 e0       	ldi	r31, 0x00	; 0
     bc2:	80 81       	ld	r24, Z
     bc4:	80 68       	ori	r24, 0x80	; 128
     bc6:	8c 93       	st	X, r24

	/* non_PWM mode */
	TCCR1A |= (1 << FOC1A) | (1 << FOC1B);
     bc8:	af e4       	ldi	r26, 0x4F	; 79
     bca:	b0 e0       	ldi	r27, 0x00	; 0
     bcc:	ef e4       	ldi	r30, 0x4F	; 79
     bce:	f0 e0       	ldi	r31, 0x00	; 0
     bd0:	80 81       	ld	r24, Z
     bd2:	8c 60       	ori	r24, 0x0C	; 12
     bd4:	8c 93       	st	X, r24

	/* set initial value */
	TCNT1 = config_Ptr->initial_value;
     bd6:	ac e4       	ldi	r26, 0x4C	; 76
     bd8:	b0 e0       	ldi	r27, 0x00	; 0
     bda:	e9 81       	ldd	r30, Y+1	; 0x01
     bdc:	fa 81       	ldd	r31, Y+2	; 0x02
     bde:	81 81       	ldd	r24, Z+1	; 0x01
     be0:	92 81       	ldd	r25, Z+2	; 0x02
     be2:	11 96       	adiw	r26, 0x01	; 1
     be4:	9c 93       	st	X, r25
     be6:	8e 93       	st	-X, r24

	/* set compare value */
	OCR1A = config_Ptr->compare_value;
     be8:	aa e4       	ldi	r26, 0x4A	; 74
     bea:	b0 e0       	ldi	r27, 0x00	; 0
     bec:	e9 81       	ldd	r30, Y+1	; 0x01
     bee:	fa 81       	ldd	r31, Y+2	; 0x02
     bf0:	83 81       	ldd	r24, Z+3	; 0x03
     bf2:	94 81       	ldd	r25, Z+4	; 0x04
     bf4:	11 96       	adiw	r26, 0x01	; 1
     bf6:	9c 93       	st	X, r25
     bf8:	8e 93       	st	-X, r24

	/* enable timer interrupt  in compare mode */
	TIMSK = (TIMSK & 0xEF) | (1 << OCIE1A);
     bfa:	a9 e5       	ldi	r26, 0x59	; 89
     bfc:	b0 e0       	ldi	r27, 0x00	; 0
     bfe:	e9 e5       	ldi	r30, 0x59	; 89
     c00:	f0 e0       	ldi	r31, 0x00	; 0
     c02:	80 81       	ld	r24, Z
     c04:	80 61       	ori	r24, 0x10	; 16
     c06:	8c 93       	st	X, r24

	/* TCCR1B = (1 << CS10) | (1 << CS12) | (1 << WGM12);
	 * pre_scalar = 8 MHZ / 1028 then interrupt every 0.128 secondS
	 */
	TCCR1B = (TCCR1B & 0xF8) | (config_Ptr->clk);
     c08:	ae e4       	ldi	r26, 0x4E	; 78
     c0a:	b0 e0       	ldi	r27, 0x00	; 0
     c0c:	ee e4       	ldi	r30, 0x4E	; 78
     c0e:	f0 e0       	ldi	r31, 0x00	; 0
     c10:	80 81       	ld	r24, Z
     c12:	98 2f       	mov	r25, r24
     c14:	98 7f       	andi	r25, 0xF8	; 248
     c16:	e9 81       	ldd	r30, Y+1	; 0x01
     c18:	fa 81       	ldd	r31, Y+2	; 0x02
     c1a:	80 81       	ld	r24, Z
     c1c:	89 2b       	or	r24, r25
     c1e:	8c 93       	st	X, r24
	TCCR1B = (TCCR1B & 0xF7) | (1 << WGM12);
     c20:	ae e4       	ldi	r26, 0x4E	; 78
     c22:	b0 e0       	ldi	r27, 0x00	; 0
     c24:	ee e4       	ldi	r30, 0x4E	; 78
     c26:	f0 e0       	ldi	r31, 0x00	; 0
     c28:	80 81       	ld	r24, Z
     c2a:	88 60       	ori	r24, 0x08	; 8
     c2c:	8c 93       	st	X, r24
	return E_OK;
     c2e:	80 e0       	ldi	r24, 0x00	; 0

}
     c30:	0f 90       	pop	r0
     c32:	0f 90       	pop	r0
     c34:	cf 91       	pop	r28
     c36:	df 91       	pop	r29
     c38:	08 95       	ret

00000c3a <Timer1_set_CallBack>:

uint8 Timer1_set_CallBack(void(*a_ptr)(void))
{
     c3a:	df 93       	push	r29
     c3c:	cf 93       	push	r28
     c3e:	00 d0       	rcall	.+0      	; 0xc40 <Timer1_set_CallBack+0x6>
     c40:	cd b7       	in	r28, 0x3d	; 61
     c42:	de b7       	in	r29, 0x3e	; 62
     c44:	9a 83       	std	Y+2, r25	; 0x02
     c46:	89 83       	std	Y+1, r24	; 0x01
	g_callBackPTr = a_ptr;
     c48:	89 81       	ldd	r24, Y+1	; 0x01
     c4a:	9a 81       	ldd	r25, Y+2	; 0x02
     c4c:	90 93 f9 00 	sts	0x00F9, r25
     c50:	80 93 f8 00 	sts	0x00F8, r24
	return E_OK;
     c54:	80 e0       	ldi	r24, 0x00	; 0

}
     c56:	0f 90       	pop	r0
     c58:	0f 90       	pop	r0
     c5a:	cf 91       	pop	r28
     c5c:	df 91       	pop	r29
     c5e:	08 95       	ret

00000c60 <uart_init>:
 *******************************************************************************/
#include "uart.h"


void uart_init(const UART_config * cofig_Ptr)
{
     c60:	0f 93       	push	r16
     c62:	1f 93       	push	r17
     c64:	df 93       	push	r29
     c66:	cf 93       	push	r28
     c68:	00 d0       	rcall	.+0      	; 0xc6a <uart_init+0xa>
     c6a:	cd b7       	in	r28, 0x3d	; 61
     c6c:	de b7       	in	r29, 0x3e	; 62
     c6e:	9a 83       	std	Y+2, r25	; 0x02
     c70:	89 83       	std	Y+1, r24	; 0x01

	UCSRB |= (1 << RXEN) | (1 << TXEN); // enable Tx, Rx
     c72:	aa e2       	ldi	r26, 0x2A	; 42
     c74:	b0 e0       	ldi	r27, 0x00	; 0
     c76:	ea e2       	ldi	r30, 0x2A	; 42
     c78:	f0 e0       	ldi	r31, 0x00	; 0
     c7a:	80 81       	ld	r24, Z
     c7c:	88 61       	ori	r24, 0x18	; 24
     c7e:	8c 93       	st	X, r24
	UCSRC |= (1 << URSEL) ;
     c80:	a0 e4       	ldi	r26, 0x40	; 64
     c82:	b0 e0       	ldi	r27, 0x00	; 0
     c84:	e0 e4       	ldi	r30, 0x40	; 64
     c86:	f0 e0       	ldi	r31, 0x00	; 0
     c88:	80 81       	ld	r24, Z
     c8a:	80 68       	ori	r24, 0x80	; 128
     c8c:	8c 93       	st	X, r24

	/*double speed*/
	UCSRA = (UCSRA & 0xFD) | (DOUBLE_SPEED << 1);
     c8e:	ab e2       	ldi	r26, 0x2B	; 43
     c90:	b0 e0       	ldi	r27, 0x00	; 0
     c92:	eb e2       	ldi	r30, 0x2B	; 43
     c94:	f0 e0       	ldi	r31, 0x00	; 0
     c96:	80 81       	ld	r24, Z
     c98:	82 60       	ori	r24, 0x02	; 2
     c9a:	8c 93       	st	X, r24

	UCSRC = (UCSRC & 0xF9) | ((cofig_Ptr->data_bits & 0x03)<<1);
     c9c:	a0 e4       	ldi	r26, 0x40	; 64
     c9e:	b0 e0       	ldi	r27, 0x00	; 0
     ca0:	e0 e4       	ldi	r30, 0x40	; 64
     ca2:	f0 e0       	ldi	r31, 0x00	; 0
     ca4:	80 81       	ld	r24, Z
     ca6:	28 2f       	mov	r18, r24
     ca8:	29 7f       	andi	r18, 0xF9	; 249
     caa:	e9 81       	ldd	r30, Y+1	; 0x01
     cac:	fa 81       	ldd	r31, Y+2	; 0x02
     cae:	80 81       	ld	r24, Z
     cb0:	88 2f       	mov	r24, r24
     cb2:	90 e0       	ldi	r25, 0x00	; 0
     cb4:	83 70       	andi	r24, 0x03	; 3
     cb6:	90 70       	andi	r25, 0x00	; 0
     cb8:	88 0f       	add	r24, r24
     cba:	99 1f       	adc	r25, r25
     cbc:	82 2b       	or	r24, r18
     cbe:	8c 93       	st	X, r24
	UCSRB = (UCSRB & 0xFB) | (cofig_Ptr->data_bits & 0x04);
     cc0:	aa e2       	ldi	r26, 0x2A	; 42
     cc2:	b0 e0       	ldi	r27, 0x00	; 0
     cc4:	ea e2       	ldi	r30, 0x2A	; 42
     cc6:	f0 e0       	ldi	r31, 0x00	; 0
     cc8:	80 81       	ld	r24, Z
     cca:	98 2f       	mov	r25, r24
     ccc:	9b 7f       	andi	r25, 0xFB	; 251
     cce:	e9 81       	ldd	r30, Y+1	; 0x01
     cd0:	fa 81       	ldd	r31, Y+2	; 0x02
     cd2:	80 81       	ld	r24, Z
     cd4:	84 70       	andi	r24, 0x04	; 4
     cd6:	89 2b       	or	r24, r25
     cd8:	8c 93       	st	X, r24

	/*parity*/
	UCSRC = (UCSRC & 0xCF) | (cofig_Ptr->parity << 4);
     cda:	a0 e4       	ldi	r26, 0x40	; 64
     cdc:	b0 e0       	ldi	r27, 0x00	; 0
     cde:	e0 e4       	ldi	r30, 0x40	; 64
     ce0:	f0 e0       	ldi	r31, 0x00	; 0
     ce2:	80 81       	ld	r24, Z
     ce4:	28 2f       	mov	r18, r24
     ce6:	2f 7c       	andi	r18, 0xCF	; 207
     ce8:	e9 81       	ldd	r30, Y+1	; 0x01
     cea:	fa 81       	ldd	r31, Y+2	; 0x02
     cec:	81 81       	ldd	r24, Z+1	; 0x01
     cee:	88 2f       	mov	r24, r24
     cf0:	90 e0       	ldi	r25, 0x00	; 0
     cf2:	82 95       	swap	r24
     cf4:	92 95       	swap	r25
     cf6:	90 7f       	andi	r25, 0xF0	; 240
     cf8:	98 27       	eor	r25, r24
     cfa:	80 7f       	andi	r24, 0xF0	; 240
     cfc:	98 27       	eor	r25, r24
     cfe:	82 2b       	or	r24, r18
     d00:	8c 93       	st	X, r24

	/* stop_bit*/
	UCSRC = (UCSRC & 0xF7) | (cofig_Ptr->stop_bit << 3);
     d02:	a0 e4       	ldi	r26, 0x40	; 64
     d04:	b0 e0       	ldi	r27, 0x00	; 0
     d06:	e0 e4       	ldi	r30, 0x40	; 64
     d08:	f0 e0       	ldi	r31, 0x00	; 0
     d0a:	80 81       	ld	r24, Z
     d0c:	28 2f       	mov	r18, r24
     d0e:	27 7f       	andi	r18, 0xF7	; 247
     d10:	e9 81       	ldd	r30, Y+1	; 0x01
     d12:	fa 81       	ldd	r31, Y+2	; 0x02
     d14:	82 81       	ldd	r24, Z+2	; 0x02
     d16:	88 2f       	mov	r24, r24
     d18:	90 e0       	ldi	r25, 0x00	; 0
     d1a:	88 0f       	add	r24, r24
     d1c:	99 1f       	adc	r25, r25
     d1e:	88 0f       	add	r24, r24
     d20:	99 1f       	adc	r25, r25
     d22:	88 0f       	add	r24, r24
     d24:	99 1f       	adc	r25, r25
     d26:	82 2b       	or	r24, r18
     d28:	8c 93       	st	X, r24

	/*mode*/
	UCSRC = (UCSRC & 0xBF) | (MODE_BIT << 6);
     d2a:	a0 e4       	ldi	r26, 0x40	; 64
     d2c:	b0 e0       	ldi	r27, 0x00	; 0
     d2e:	e0 e4       	ldi	r30, 0x40	; 64
     d30:	f0 e0       	ldi	r31, 0x00	; 0
     d32:	80 81       	ld	r24, Z
     d34:	8f 7b       	andi	r24, 0xBF	; 191
     d36:	8c 93       	st	X, r24

	UBRRL = BAUD_PRESCALE(cofig_Ptr->rate);
     d38:	09 e2       	ldi	r16, 0x29	; 41
     d3a:	10 e0       	ldi	r17, 0x00	; 0
     d3c:	e9 81       	ldd	r30, Y+1	; 0x01
     d3e:	fa 81       	ldd	r31, Y+2	; 0x02
     d40:	83 81       	ldd	r24, Z+3	; 0x03
     d42:	94 81       	ldd	r25, Z+4	; 0x04
     d44:	cc 01       	movw	r24, r24
     d46:	a0 e0       	ldi	r26, 0x00	; 0
     d48:	b0 e0       	ldi	r27, 0x00	; 0
     d4a:	88 0f       	add	r24, r24
     d4c:	99 1f       	adc	r25, r25
     d4e:	aa 1f       	adc	r26, r26
     d50:	bb 1f       	adc	r27, r27
     d52:	88 0f       	add	r24, r24
     d54:	99 1f       	adc	r25, r25
     d56:	aa 1f       	adc	r26, r26
     d58:	bb 1f       	adc	r27, r27
     d5a:	88 0f       	add	r24, r24
     d5c:	99 1f       	adc	r25, r25
     d5e:	aa 1f       	adc	r26, r26
     d60:	bb 1f       	adc	r27, r27
     d62:	9c 01       	movw	r18, r24
     d64:	ad 01       	movw	r20, r26
     d66:	80 e0       	ldi	r24, 0x00	; 0
     d68:	92 e1       	ldi	r25, 0x12	; 18
     d6a:	aa e7       	ldi	r26, 0x7A	; 122
     d6c:	b0 e0       	ldi	r27, 0x00	; 0
     d6e:	bc 01       	movw	r22, r24
     d70:	cd 01       	movw	r24, r26
     d72:	0e 94 54 15 	call	0x2aa8	; 0x2aa8 <__udivmodsi4>
     d76:	da 01       	movw	r26, r20
     d78:	c9 01       	movw	r24, r18
     d7a:	81 50       	subi	r24, 0x01	; 1
     d7c:	f8 01       	movw	r30, r16
     d7e:	80 83       	st	Z, r24
	UBRRH = BAUD_PRESCALE(cofig_Ptr->rate) >> 8;
     d80:	00 e4       	ldi	r16, 0x40	; 64
     d82:	10 e0       	ldi	r17, 0x00	; 0
     d84:	e9 81       	ldd	r30, Y+1	; 0x01
     d86:	fa 81       	ldd	r31, Y+2	; 0x02
     d88:	83 81       	ldd	r24, Z+3	; 0x03
     d8a:	94 81       	ldd	r25, Z+4	; 0x04
     d8c:	cc 01       	movw	r24, r24
     d8e:	a0 e0       	ldi	r26, 0x00	; 0
     d90:	b0 e0       	ldi	r27, 0x00	; 0
     d92:	88 0f       	add	r24, r24
     d94:	99 1f       	adc	r25, r25
     d96:	aa 1f       	adc	r26, r26
     d98:	bb 1f       	adc	r27, r27
     d9a:	88 0f       	add	r24, r24
     d9c:	99 1f       	adc	r25, r25
     d9e:	aa 1f       	adc	r26, r26
     da0:	bb 1f       	adc	r27, r27
     da2:	88 0f       	add	r24, r24
     da4:	99 1f       	adc	r25, r25
     da6:	aa 1f       	adc	r26, r26
     da8:	bb 1f       	adc	r27, r27
     daa:	9c 01       	movw	r18, r24
     dac:	ad 01       	movw	r20, r26
     dae:	80 e0       	ldi	r24, 0x00	; 0
     db0:	92 e1       	ldi	r25, 0x12	; 18
     db2:	aa e7       	ldi	r26, 0x7A	; 122
     db4:	b0 e0       	ldi	r27, 0x00	; 0
     db6:	bc 01       	movw	r22, r24
     db8:	cd 01       	movw	r24, r26
     dba:	0e 94 54 15 	call	0x2aa8	; 0x2aa8 <__udivmodsi4>
     dbe:	da 01       	movw	r26, r20
     dc0:	c9 01       	movw	r24, r18
     dc2:	01 97       	sbiw	r24, 0x01	; 1
     dc4:	a1 09       	sbc	r26, r1
     dc6:	b1 09       	sbc	r27, r1
     dc8:	89 2f       	mov	r24, r25
     dca:	9a 2f       	mov	r25, r26
     dcc:	ab 2f       	mov	r26, r27
     dce:	bb 27       	eor	r27, r27
     dd0:	f8 01       	movw	r30, r16
     dd2:	80 83       	st	Z, r24
}
     dd4:	0f 90       	pop	r0
     dd6:	0f 90       	pop	r0
     dd8:	cf 91       	pop	r28
     dda:	df 91       	pop	r29
     ddc:	1f 91       	pop	r17
     dde:	0f 91       	pop	r16
     de0:	08 95       	ret

00000de2 <uart_sendByte>:


void uart_sendByte(uint8 data)
{
     de2:	df 93       	push	r29
     de4:	cf 93       	push	r28
     de6:	0f 92       	push	r0
     de8:	cd b7       	in	r28, 0x3d	; 61
     dea:	de b7       	in	r29, 0x3e	; 62
     dec:	89 83       	std	Y+1, r24	; 0x01
	while (BIT_IS_CLEAR(UCSRA ,UDRE)){};
     dee:	eb e2       	ldi	r30, 0x2B	; 43
     df0:	f0 e0       	ldi	r31, 0x00	; 0
     df2:	80 81       	ld	r24, Z
     df4:	88 2f       	mov	r24, r24
     df6:	90 e0       	ldi	r25, 0x00	; 0
     df8:	80 72       	andi	r24, 0x20	; 32
     dfa:	90 70       	andi	r25, 0x00	; 0
     dfc:	00 97       	sbiw	r24, 0x00	; 0
     dfe:	b9 f3       	breq	.-18     	; 0xdee <uart_sendByte+0xc>
	UDR = data;
     e00:	ec e2       	ldi	r30, 0x2C	; 44
     e02:	f0 e0       	ldi	r31, 0x00	; 0
     e04:	89 81       	ldd	r24, Y+1	; 0x01
     e06:	80 83       	st	Z, r24
}
     e08:	0f 90       	pop	r0
     e0a:	cf 91       	pop	r28
     e0c:	df 91       	pop	r29
     e0e:	08 95       	ret

00000e10 <uart_recieveByte>:

uint8 uart_recieveByte(void)
{
     e10:	df 93       	push	r29
     e12:	cf 93       	push	r28
     e14:	cd b7       	in	r28, 0x3d	; 61
     e16:	de b7       	in	r29, 0x3e	; 62
	while (BIT_IS_CLEAR(UCSRA ,RXC)){};
     e18:	eb e2       	ldi	r30, 0x2B	; 43
     e1a:	f0 e0       	ldi	r31, 0x00	; 0
     e1c:	80 81       	ld	r24, Z
     e1e:	88 23       	and	r24, r24
     e20:	dc f7       	brge	.-10     	; 0xe18 <uart_recieveByte+0x8>
	return UDR;
     e22:	ec e2       	ldi	r30, 0x2C	; 44
     e24:	f0 e0       	ldi	r31, 0x00	; 0
     e26:	80 81       	ld	r24, Z
}
     e28:	cf 91       	pop	r28
     e2a:	df 91       	pop	r29
     e2c:	08 95       	ret

00000e2e <uart_sendString>:

void uart_sendString(const uint8 *str)
{
     e2e:	df 93       	push	r29
     e30:	cf 93       	push	r28
     e32:	00 d0       	rcall	.+0      	; 0xe34 <uart_sendString+0x6>
     e34:	0f 92       	push	r0
     e36:	cd b7       	in	r28, 0x3d	; 61
     e38:	de b7       	in	r29, 0x3e	; 62
     e3a:	9b 83       	std	Y+3, r25	; 0x03
     e3c:	8a 83       	std	Y+2, r24	; 0x02
	uint8 i = 0;
     e3e:	19 82       	std	Y+1, r1	; 0x01
     e40:	0e c0       	rjmp	.+28     	; 0xe5e <uart_sendString+0x30>
	while (str[i] != '\0')
	{
		uart_sendByte(str[i]);
     e42:	89 81       	ldd	r24, Y+1	; 0x01
     e44:	28 2f       	mov	r18, r24
     e46:	30 e0       	ldi	r19, 0x00	; 0
     e48:	8a 81       	ldd	r24, Y+2	; 0x02
     e4a:	9b 81       	ldd	r25, Y+3	; 0x03
     e4c:	fc 01       	movw	r30, r24
     e4e:	e2 0f       	add	r30, r18
     e50:	f3 1f       	adc	r31, r19
     e52:	80 81       	ld	r24, Z
     e54:	0e 94 f1 06 	call	0xde2	; 0xde2 <uart_sendByte>
		i++;
     e58:	89 81       	ldd	r24, Y+1	; 0x01
     e5a:	8f 5f       	subi	r24, 0xFF	; 255
     e5c:	89 83       	std	Y+1, r24	; 0x01
}

void uart_sendString(const uint8 *str)
{
	uint8 i = 0;
	while (str[i] != '\0')
     e5e:	89 81       	ldd	r24, Y+1	; 0x01
     e60:	28 2f       	mov	r18, r24
     e62:	30 e0       	ldi	r19, 0x00	; 0
     e64:	8a 81       	ldd	r24, Y+2	; 0x02
     e66:	9b 81       	ldd	r25, Y+3	; 0x03
     e68:	fc 01       	movw	r30, r24
     e6a:	e2 0f       	add	r30, r18
     e6c:	f3 1f       	adc	r31, r19
     e6e:	80 81       	ld	r24, Z
     e70:	88 23       	and	r24, r24
     e72:	39 f7       	brne	.-50     	; 0xe42 <uart_sendString+0x14>
	{
		uart_sendByte(str[i]);
		i++;
	}
}
     e74:	0f 90       	pop	r0
     e76:	0f 90       	pop	r0
     e78:	0f 90       	pop	r0
     e7a:	cf 91       	pop	r28
     e7c:	df 91       	pop	r29
     e7e:	08 95       	ret

00000e80 <uart_recieveString>:

void uart_recieveString(uint8 *str)
{
     e80:	0f 93       	push	r16
     e82:	1f 93       	push	r17
     e84:	df 93       	push	r29
     e86:	cf 93       	push	r28
     e88:	00 d0       	rcall	.+0      	; 0xe8a <uart_recieveString+0xa>
     e8a:	0f 92       	push	r0
     e8c:	cd b7       	in	r28, 0x3d	; 61
     e8e:	de b7       	in	r29, 0x3e	; 62
     e90:	9b 83       	std	Y+3, r25	; 0x03
     e92:	8a 83       	std	Y+2, r24	; 0x02
	uint8 i = 0;
     e94:	19 82       	std	Y+1, r1	; 0x01
	str[i] = uart_recieveByte();
     e96:	89 81       	ldd	r24, Y+1	; 0x01
     e98:	28 2f       	mov	r18, r24
     e9a:	30 e0       	ldi	r19, 0x00	; 0
     e9c:	8a 81       	ldd	r24, Y+2	; 0x02
     e9e:	9b 81       	ldd	r25, Y+3	; 0x03
     ea0:	8c 01       	movw	r16, r24
     ea2:	02 0f       	add	r16, r18
     ea4:	13 1f       	adc	r17, r19
     ea6:	0e 94 08 07 	call	0xe10	; 0xe10 <uart_recieveByte>
     eaa:	f8 01       	movw	r30, r16
     eac:	80 83       	st	Z, r24
     eae:	0f c0       	rjmp	.+30     	; 0xece <uart_recieveString+0x4e>
	while (str[i] != '#')
	{
		i++;
     eb0:	89 81       	ldd	r24, Y+1	; 0x01
     eb2:	8f 5f       	subi	r24, 0xFF	; 255
     eb4:	89 83       	std	Y+1, r24	; 0x01
		str[i] = uart_recieveByte();
     eb6:	89 81       	ldd	r24, Y+1	; 0x01
     eb8:	28 2f       	mov	r18, r24
     eba:	30 e0       	ldi	r19, 0x00	; 0
     ebc:	8a 81       	ldd	r24, Y+2	; 0x02
     ebe:	9b 81       	ldd	r25, Y+3	; 0x03
     ec0:	8c 01       	movw	r16, r24
     ec2:	02 0f       	add	r16, r18
     ec4:	13 1f       	adc	r17, r19
     ec6:	0e 94 08 07 	call	0xe10	; 0xe10 <uart_recieveByte>
     eca:	f8 01       	movw	r30, r16
     ecc:	80 83       	st	Z, r24

void uart_recieveString(uint8 *str)
{
	uint8 i = 0;
	str[i] = uart_recieveByte();
	while (str[i] != '#')
     ece:	89 81       	ldd	r24, Y+1	; 0x01
     ed0:	28 2f       	mov	r18, r24
     ed2:	30 e0       	ldi	r19, 0x00	; 0
     ed4:	8a 81       	ldd	r24, Y+2	; 0x02
     ed6:	9b 81       	ldd	r25, Y+3	; 0x03
     ed8:	fc 01       	movw	r30, r24
     eda:	e2 0f       	add	r30, r18
     edc:	f3 1f       	adc	r31, r19
     ede:	80 81       	ld	r24, Z
     ee0:	83 32       	cpi	r24, 0x23	; 35
     ee2:	31 f7       	brne	.-52     	; 0xeb0 <uart_recieveString+0x30>
	{
		i++;
		str[i] = uart_recieveByte();
	}
	str[i] = '\0';
     ee4:	89 81       	ldd	r24, Y+1	; 0x01
     ee6:	28 2f       	mov	r18, r24
     ee8:	30 e0       	ldi	r19, 0x00	; 0
     eea:	8a 81       	ldd	r24, Y+2	; 0x02
     eec:	9b 81       	ldd	r25, Y+3	; 0x03
     eee:	fc 01       	movw	r30, r24
     ef0:	e2 0f       	add	r30, r18
     ef2:	f3 1f       	adc	r31, r19
     ef4:	10 82       	st	Z, r1
}
     ef6:	0f 90       	pop	r0
     ef8:	0f 90       	pop	r0
     efa:	0f 90       	pop	r0
     efc:	cf 91       	pop	r28
     efe:	df 91       	pop	r29
     f00:	1f 91       	pop	r17
     f02:	0f 91       	pop	r16
     f04:	08 95       	ret

00000f06 <KeyPad_getPressedKey>:
#endif

/*******************************************************************************
 *                      Functions Definitions                                  *
 *******************************************************************************/
uint8 KeyPad_getPressedKey(void){
     f06:	df 93       	push	r29
     f08:	cf 93       	push	r28
     f0a:	00 d0       	rcall	.+0      	; 0xf0c <KeyPad_getPressedKey+0x6>
     f0c:	cd b7       	in	r28, 0x3d	; 61
     f0e:	de b7       	in	r29, 0x3e	; 62
	uint8 col,row;
	while(1)
	{
		for(col=0;col<N_col;col++)
     f10:	1a 82       	std	Y+2, r1	; 0x02
     f12:	4c c0       	rjmp	.+152    	; 0xfac <KeyPad_getPressedKey+0xa6>
		{

			KEYPAD_PORT_DIR = (0b00010000<<col); 
     f14:	ea e3       	ldi	r30, 0x3A	; 58
     f16:	f0 e0       	ldi	r31, 0x00	; 0
     f18:	8a 81       	ldd	r24, Y+2	; 0x02
     f1a:	28 2f       	mov	r18, r24
     f1c:	30 e0       	ldi	r19, 0x00	; 0
     f1e:	80 e1       	ldi	r24, 0x10	; 16
     f20:	90 e0       	ldi	r25, 0x00	; 0
     f22:	02 c0       	rjmp	.+4      	; 0xf28 <KeyPad_getPressedKey+0x22>
     f24:	88 0f       	add	r24, r24
     f26:	99 1f       	adc	r25, r25
     f28:	2a 95       	dec	r18
     f2a:	e2 f7       	brpl	.-8      	; 0xf24 <KeyPad_getPressedKey+0x1e>
     f2c:	80 83       	st	Z, r24

			KEYPAD_PORT_OUT = (~(0b00010000<<col)); 
     f2e:	eb e3       	ldi	r30, 0x3B	; 59
     f30:	f0 e0       	ldi	r31, 0x00	; 0
     f32:	8a 81       	ldd	r24, Y+2	; 0x02
     f34:	28 2f       	mov	r18, r24
     f36:	30 e0       	ldi	r19, 0x00	; 0
     f38:	80 e1       	ldi	r24, 0x10	; 16
     f3a:	90 e0       	ldi	r25, 0x00	; 0
     f3c:	02 2e       	mov	r0, r18
     f3e:	02 c0       	rjmp	.+4      	; 0xf44 <KeyPad_getPressedKey+0x3e>
     f40:	88 0f       	add	r24, r24
     f42:	99 1f       	adc	r25, r25
     f44:	0a 94       	dec	r0
     f46:	e2 f7       	brpl	.-8      	; 0xf40 <KeyPad_getPressedKey+0x3a>
     f48:	80 95       	com	r24
     f4a:	80 83       	st	Z, r24
			for(row=0;row<N_row;row++)
     f4c:	19 82       	std	Y+1, r1	; 0x01
     f4e:	28 c0       	rjmp	.+80     	; 0xfa0 <KeyPad_getPressedKey+0x9a>
			{
				if(BIT_IS_CLEAR(KEYPAD_PORT_IN,row))
     f50:	e9 e3       	ldi	r30, 0x39	; 57
     f52:	f0 e0       	ldi	r31, 0x00	; 0
     f54:	80 81       	ld	r24, Z
     f56:	28 2f       	mov	r18, r24
     f58:	30 e0       	ldi	r19, 0x00	; 0
     f5a:	89 81       	ldd	r24, Y+1	; 0x01
     f5c:	88 2f       	mov	r24, r24
     f5e:	90 e0       	ldi	r25, 0x00	; 0
     f60:	a9 01       	movw	r20, r18
     f62:	02 c0       	rjmp	.+4      	; 0xf68 <KeyPad_getPressedKey+0x62>
     f64:	55 95       	asr	r21
     f66:	47 95       	ror	r20
     f68:	8a 95       	dec	r24
     f6a:	e2 f7       	brpl	.-8      	; 0xf64 <KeyPad_getPressedKey+0x5e>
     f6c:	ca 01       	movw	r24, r20
     f6e:	81 70       	andi	r24, 0x01	; 1
     f70:	90 70       	andi	r25, 0x00	; 0
     f72:	00 97       	sbiw	r24, 0x00	; 0
     f74:	91 f4       	brne	.+36     	; 0xf9a <KeyPad_getPressedKey+0x94>
				{
					#if (N_col == 3)  
						return KeyPad_4x3_adjustKeyNumber((row*N_col)+col+1); 
					#elif (N_col == 4)
						return KeyPad_4x4_adjustKeyNumber((row*N_col)+col+1);
     f76:	89 81       	ldd	r24, Y+1	; 0x01
     f78:	88 2f       	mov	r24, r24
     f7a:	90 e0       	ldi	r25, 0x00	; 0
     f7c:	88 0f       	add	r24, r24
     f7e:	99 1f       	adc	r25, r25
     f80:	88 0f       	add	r24, r24
     f82:	99 1f       	adc	r25, r25
     f84:	98 2f       	mov	r25, r24
     f86:	8a 81       	ldd	r24, Y+2	; 0x02
     f88:	89 0f       	add	r24, r25
     f8a:	8f 5f       	subi	r24, 0xFF	; 255
     f8c:	0e 94 db 07 	call	0xfb6	; 0xfb6 <KeyPad_4x4_adjustKeyNumber>
					#endif				
				}
			}
		}
	}	
}
     f90:	0f 90       	pop	r0
     f92:	0f 90       	pop	r0
     f94:	cf 91       	pop	r28
     f96:	df 91       	pop	r29
     f98:	08 95       	ret
		{

			KEYPAD_PORT_DIR = (0b00010000<<col); 

			KEYPAD_PORT_OUT = (~(0b00010000<<col)); 
			for(row=0;row<N_row;row++)
     f9a:	89 81       	ldd	r24, Y+1	; 0x01
     f9c:	8f 5f       	subi	r24, 0xFF	; 255
     f9e:	89 83       	std	Y+1, r24	; 0x01
     fa0:	89 81       	ldd	r24, Y+1	; 0x01
     fa2:	84 30       	cpi	r24, 0x04	; 4
     fa4:	a8 f2       	brcs	.-86     	; 0xf50 <KeyPad_getPressedKey+0x4a>
 *******************************************************************************/
uint8 KeyPad_getPressedKey(void){
	uint8 col,row;
	while(1)
	{
		for(col=0;col<N_col;col++)
     fa6:	8a 81       	ldd	r24, Y+2	; 0x02
     fa8:	8f 5f       	subi	r24, 0xFF	; 255
     faa:	8a 83       	std	Y+2, r24	; 0x02
     fac:	8a 81       	ldd	r24, Y+2	; 0x02
     fae:	84 30       	cpi	r24, 0x04	; 4
     fb0:	08 f4       	brcc	.+2      	; 0xfb4 <KeyPad_getPressedKey+0xae>
     fb2:	b0 cf       	rjmp	.-160    	; 0xf14 <KeyPad_getPressedKey+0xe>
     fb4:	ad cf       	rjmp	.-166    	; 0xf10 <KeyPad_getPressedKey+0xa>

00000fb6 <KeyPad_4x4_adjustKeyNumber>:
} 

#elif (N_col == 4)
 
static uint8 KeyPad_4x4_adjustKeyNumber(uint8 button_number)
{
     fb6:	df 93       	push	r29
     fb8:	cf 93       	push	r28
     fba:	00 d0       	rcall	.+0      	; 0xfbc <KeyPad_4x4_adjustKeyNumber+0x6>
     fbc:	00 d0       	rcall	.+0      	; 0xfbe <KeyPad_4x4_adjustKeyNumber+0x8>
     fbe:	cd b7       	in	r28, 0x3d	; 61
     fc0:	de b7       	in	r29, 0x3e	; 62
     fc2:	89 83       	std	Y+1, r24	; 0x01
	switch(button_number)
     fc4:	89 81       	ldd	r24, Y+1	; 0x01
     fc6:	28 2f       	mov	r18, r24
     fc8:	30 e0       	ldi	r19, 0x00	; 0
     fca:	3c 83       	std	Y+4, r19	; 0x04
     fcc:	2b 83       	std	Y+3, r18	; 0x03
     fce:	8b 81       	ldd	r24, Y+3	; 0x03
     fd0:	9c 81       	ldd	r25, Y+4	; 0x04
     fd2:	88 30       	cpi	r24, 0x08	; 8
     fd4:	91 05       	cpc	r25, r1
     fd6:	09 f4       	brne	.+2      	; 0xfda <KeyPad_4x4_adjustKeyNumber+0x24>
     fd8:	70 c0       	rjmp	.+224    	; 0x10ba <KeyPad_4x4_adjustKeyNumber+0x104>
     fda:	2b 81       	ldd	r18, Y+3	; 0x03
     fdc:	3c 81       	ldd	r19, Y+4	; 0x04
     fde:	29 30       	cpi	r18, 0x09	; 9
     fe0:	31 05       	cpc	r19, r1
     fe2:	5c f5       	brge	.+86     	; 0x103a <KeyPad_4x4_adjustKeyNumber+0x84>
     fe4:	8b 81       	ldd	r24, Y+3	; 0x03
     fe6:	9c 81       	ldd	r25, Y+4	; 0x04
     fe8:	84 30       	cpi	r24, 0x04	; 4
     fea:	91 05       	cpc	r25, r1
     fec:	09 f4       	brne	.+2      	; 0xff0 <KeyPad_4x4_adjustKeyNumber+0x3a>
     fee:	59 c0       	rjmp	.+178    	; 0x10a2 <KeyPad_4x4_adjustKeyNumber+0xec>
     ff0:	2b 81       	ldd	r18, Y+3	; 0x03
     ff2:	3c 81       	ldd	r19, Y+4	; 0x04
     ff4:	25 30       	cpi	r18, 0x05	; 5
     ff6:	31 05       	cpc	r19, r1
     ff8:	9c f4       	brge	.+38     	; 0x1020 <KeyPad_4x4_adjustKeyNumber+0x6a>
     ffa:	8b 81       	ldd	r24, Y+3	; 0x03
     ffc:	9c 81       	ldd	r25, Y+4	; 0x04
     ffe:	82 30       	cpi	r24, 0x02	; 2
    1000:	91 05       	cpc	r25, r1
    1002:	09 f4       	brne	.+2      	; 0x1006 <KeyPad_4x4_adjustKeyNumber+0x50>
    1004:	48 c0       	rjmp	.+144    	; 0x1096 <KeyPad_4x4_adjustKeyNumber+0xe0>
    1006:	2b 81       	ldd	r18, Y+3	; 0x03
    1008:	3c 81       	ldd	r19, Y+4	; 0x04
    100a:	23 30       	cpi	r18, 0x03	; 3
    100c:	31 05       	cpc	r19, r1
    100e:	0c f0       	brlt	.+2      	; 0x1012 <KeyPad_4x4_adjustKeyNumber+0x5c>
    1010:	45 c0       	rjmp	.+138    	; 0x109c <KeyPad_4x4_adjustKeyNumber+0xe6>
    1012:	8b 81       	ldd	r24, Y+3	; 0x03
    1014:	9c 81       	ldd	r25, Y+4	; 0x04
    1016:	81 30       	cpi	r24, 0x01	; 1
    1018:	91 05       	cpc	r25, r1
    101a:	09 f4       	brne	.+2      	; 0x101e <KeyPad_4x4_adjustKeyNumber+0x68>
    101c:	39 c0       	rjmp	.+114    	; 0x1090 <KeyPad_4x4_adjustKeyNumber+0xda>
    101e:	67 c0       	rjmp	.+206    	; 0x10ee <KeyPad_4x4_adjustKeyNumber+0x138>
    1020:	2b 81       	ldd	r18, Y+3	; 0x03
    1022:	3c 81       	ldd	r19, Y+4	; 0x04
    1024:	26 30       	cpi	r18, 0x06	; 6
    1026:	31 05       	cpc	r19, r1
    1028:	09 f4       	brne	.+2      	; 0x102c <KeyPad_4x4_adjustKeyNumber+0x76>
    102a:	41 c0       	rjmp	.+130    	; 0x10ae <KeyPad_4x4_adjustKeyNumber+0xf8>
    102c:	8b 81       	ldd	r24, Y+3	; 0x03
    102e:	9c 81       	ldd	r25, Y+4	; 0x04
    1030:	87 30       	cpi	r24, 0x07	; 7
    1032:	91 05       	cpc	r25, r1
    1034:	0c f0       	brlt	.+2      	; 0x1038 <KeyPad_4x4_adjustKeyNumber+0x82>
    1036:	3e c0       	rjmp	.+124    	; 0x10b4 <KeyPad_4x4_adjustKeyNumber+0xfe>
    1038:	37 c0       	rjmp	.+110    	; 0x10a8 <KeyPad_4x4_adjustKeyNumber+0xf2>
    103a:	2b 81       	ldd	r18, Y+3	; 0x03
    103c:	3c 81       	ldd	r19, Y+4	; 0x04
    103e:	2c 30       	cpi	r18, 0x0C	; 12
    1040:	31 05       	cpc	r19, r1
    1042:	09 f4       	brne	.+2      	; 0x1046 <KeyPad_4x4_adjustKeyNumber+0x90>
    1044:	46 c0       	rjmp	.+140    	; 0x10d2 <KeyPad_4x4_adjustKeyNumber+0x11c>
    1046:	8b 81       	ldd	r24, Y+3	; 0x03
    1048:	9c 81       	ldd	r25, Y+4	; 0x04
    104a:	8d 30       	cpi	r24, 0x0D	; 13
    104c:	91 05       	cpc	r25, r1
    104e:	5c f4       	brge	.+22     	; 0x1066 <KeyPad_4x4_adjustKeyNumber+0xb0>
    1050:	2b 81       	ldd	r18, Y+3	; 0x03
    1052:	3c 81       	ldd	r19, Y+4	; 0x04
    1054:	2a 30       	cpi	r18, 0x0A	; 10
    1056:	31 05       	cpc	r19, r1
    1058:	b1 f1       	breq	.+108    	; 0x10c6 <KeyPad_4x4_adjustKeyNumber+0x110>
    105a:	8b 81       	ldd	r24, Y+3	; 0x03
    105c:	9c 81       	ldd	r25, Y+4	; 0x04
    105e:	8b 30       	cpi	r24, 0x0B	; 11
    1060:	91 05       	cpc	r25, r1
    1062:	a4 f5       	brge	.+104    	; 0x10cc <KeyPad_4x4_adjustKeyNumber+0x116>
    1064:	2d c0       	rjmp	.+90     	; 0x10c0 <KeyPad_4x4_adjustKeyNumber+0x10a>
    1066:	2b 81       	ldd	r18, Y+3	; 0x03
    1068:	3c 81       	ldd	r19, Y+4	; 0x04
    106a:	2e 30       	cpi	r18, 0x0E	; 14
    106c:	31 05       	cpc	r19, r1
    106e:	b9 f1       	breq	.+110    	; 0x10de <KeyPad_4x4_adjustKeyNumber+0x128>
    1070:	8b 81       	ldd	r24, Y+3	; 0x03
    1072:	9c 81       	ldd	r25, Y+4	; 0x04
    1074:	8e 30       	cpi	r24, 0x0E	; 14
    1076:	91 05       	cpc	r25, r1
    1078:	7c f1       	brlt	.+94     	; 0x10d8 <KeyPad_4x4_adjustKeyNumber+0x122>
    107a:	2b 81       	ldd	r18, Y+3	; 0x03
    107c:	3c 81       	ldd	r19, Y+4	; 0x04
    107e:	2f 30       	cpi	r18, 0x0F	; 15
    1080:	31 05       	cpc	r19, r1
    1082:	79 f1       	breq	.+94     	; 0x10e2 <KeyPad_4x4_adjustKeyNumber+0x12c>
    1084:	8b 81       	ldd	r24, Y+3	; 0x03
    1086:	9c 81       	ldd	r25, Y+4	; 0x04
    1088:	80 31       	cpi	r24, 0x10	; 16
    108a:	91 05       	cpc	r25, r1
    108c:	69 f1       	breq	.+90     	; 0x10e8 <KeyPad_4x4_adjustKeyNumber+0x132>
    108e:	2f c0       	rjmp	.+94     	; 0x10ee <KeyPad_4x4_adjustKeyNumber+0x138>
	{
		case 1: return 7; 
    1090:	97 e0       	ldi	r25, 0x07	; 7
    1092:	9a 83       	std	Y+2, r25	; 0x02
    1094:	2e c0       	rjmp	.+92     	; 0x10f2 <KeyPad_4x4_adjustKeyNumber+0x13c>
				break;
		case 2: return 8; 
    1096:	28 e0       	ldi	r18, 0x08	; 8
    1098:	2a 83       	std	Y+2, r18	; 0x02
    109a:	2b c0       	rjmp	.+86     	; 0x10f2 <KeyPad_4x4_adjustKeyNumber+0x13c>
				break;
		case 3: return 9; 
    109c:	39 e0       	ldi	r19, 0x09	; 9
    109e:	3a 83       	std	Y+2, r19	; 0x02
    10a0:	28 c0       	rjmp	.+80     	; 0x10f2 <KeyPad_4x4_adjustKeyNumber+0x13c>
				break;
		case 4: return '%';
    10a2:	85 e2       	ldi	r24, 0x25	; 37
    10a4:	8a 83       	std	Y+2, r24	; 0x02
    10a6:	25 c0       	rjmp	.+74     	; 0x10f2 <KeyPad_4x4_adjustKeyNumber+0x13c>
				break;
		case 5: return 4; 
    10a8:	94 e0       	ldi	r25, 0x04	; 4
    10aa:	9a 83       	std	Y+2, r25	; 0x02
    10ac:	22 c0       	rjmp	.+68     	; 0x10f2 <KeyPad_4x4_adjustKeyNumber+0x13c>
				break;
		case 6: return 5;
    10ae:	25 e0       	ldi	r18, 0x05	; 5
    10b0:	2a 83       	std	Y+2, r18	; 0x02
    10b2:	1f c0       	rjmp	.+62     	; 0x10f2 <KeyPad_4x4_adjustKeyNumber+0x13c>
				break;
		case 7: return 6; 
    10b4:	36 e0       	ldi	r19, 0x06	; 6
    10b6:	3a 83       	std	Y+2, r19	; 0x02
    10b8:	1c c0       	rjmp	.+56     	; 0x10f2 <KeyPad_4x4_adjustKeyNumber+0x13c>
				break;
		case 8: return '*';
    10ba:	8a e2       	ldi	r24, 0x2A	; 42
    10bc:	8a 83       	std	Y+2, r24	; 0x02
    10be:	19 c0       	rjmp	.+50     	; 0x10f2 <KeyPad_4x4_adjustKeyNumber+0x13c>
				break;		
		case 9: return 1; 
    10c0:	91 e0       	ldi	r25, 0x01	; 1
    10c2:	9a 83       	std	Y+2, r25	; 0x02
    10c4:	16 c0       	rjmp	.+44     	; 0x10f2 <KeyPad_4x4_adjustKeyNumber+0x13c>
				break;
		case 10: return 2; 
    10c6:	22 e0       	ldi	r18, 0x02	; 2
    10c8:	2a 83       	std	Y+2, r18	; 0x02
    10ca:	13 c0       	rjmp	.+38     	; 0x10f2 <KeyPad_4x4_adjustKeyNumber+0x13c>
				break;
		case 11: return 3; 
    10cc:	33 e0       	ldi	r19, 0x03	; 3
    10ce:	3a 83       	std	Y+2, r19	; 0x02
    10d0:	10 c0       	rjmp	.+32     	; 0x10f2 <KeyPad_4x4_adjustKeyNumber+0x13c>
				break;
		case 12: return '-';
    10d2:	8d e2       	ldi	r24, 0x2D	; 45
    10d4:	8a 83       	std	Y+2, r24	; 0x02
    10d6:	0d c0       	rjmp	.+26     	; 0x10f2 <KeyPad_4x4_adjustKeyNumber+0x13c>
				break;
		case 13: return 13;
    10d8:	9d e0       	ldi	r25, 0x0D	; 13
    10da:	9a 83       	std	Y+2, r25	; 0x02
    10dc:	0a c0       	rjmp	.+20     	; 0x10f2 <KeyPad_4x4_adjustKeyNumber+0x13c>
				break;			
		case 14: return 0; 
    10de:	1a 82       	std	Y+2, r1	; 0x02
    10e0:	08 c0       	rjmp	.+16     	; 0x10f2 <KeyPad_4x4_adjustKeyNumber+0x13c>
				break;
		case 15: return '=';
    10e2:	2d e3       	ldi	r18, 0x3D	; 61
    10e4:	2a 83       	std	Y+2, r18	; 0x02
    10e6:	05 c0       	rjmp	.+10     	; 0x10f2 <KeyPad_4x4_adjustKeyNumber+0x13c>
				break;
		case 16: return '+';
    10e8:	3b e2       	ldi	r19, 0x2B	; 43
    10ea:	3a 83       	std	Y+2, r19	; 0x02
    10ec:	02 c0       	rjmp	.+4      	; 0x10f2 <KeyPad_4x4_adjustKeyNumber+0x13c>
				break;
		default: return button_number;
    10ee:	89 81       	ldd	r24, Y+1	; 0x01
    10f0:	8a 83       	std	Y+2, r24	; 0x02
    10f2:	8a 81       	ldd	r24, Y+2	; 0x02
	}
} 
    10f4:	0f 90       	pop	r0
    10f6:	0f 90       	pop	r0
    10f8:	0f 90       	pop	r0
    10fa:	0f 90       	pop	r0
    10fc:	cf 91       	pop	r28
    10fe:	df 91       	pop	r29
    1100:	08 95       	ret

00001102 <LCD_init>:

/*******************************************************************************
 *                      Functions Definitions                                  *
 *******************************************************************************/
void LCD_init(void)
{
    1102:	df 93       	push	r29
    1104:	cf 93       	push	r28
    1106:	cd b7       	in	r28, 0x3d	; 61
    1108:	de b7       	in	r29, 0x3e	; 62
	LCD_DATA_PORT_DIR = 0xFF;
    110a:	e4 e3       	ldi	r30, 0x34	; 52
    110c:	f0 e0       	ldi	r31, 0x00	; 0
    110e:	8f ef       	ldi	r24, 0xFF	; 255
    1110:	80 83       	st	Z, r24
	LCD_CTRL_PORT_DIR |= (1<<E) | (1<<RS) | (1<<RW);
    1112:	a7 e3       	ldi	r26, 0x37	; 55
    1114:	b0 e0       	ldi	r27, 0x00	; 0
    1116:	e7 e3       	ldi	r30, 0x37	; 55
    1118:	f0 e0       	ldi	r31, 0x00	; 0
    111a:	80 81       	ld	r24, Z
    111c:	8e 60       	ori	r24, 0x0E	; 14
    111e:	8c 93       	st	X, r24
	LCD_sendCommand(TWO_LINE_LCD_Eight_BIT_MODE);
    1120:	88 e3       	ldi	r24, 0x38	; 56
    1122:	0e 94 9c 08 	call	0x1138	; 0x1138 <LCD_sendCommand>
	LCD_sendCommand(CURSOR_OFF);
    1126:	8c e0       	ldi	r24, 0x0C	; 12
    1128:	0e 94 9c 08 	call	0x1138	; 0x1138 <LCD_sendCommand>
	LCD_sendCommand(CLEAR_COMMAND);
    112c:	81 e0       	ldi	r24, 0x01	; 1
    112e:	0e 94 9c 08 	call	0x1138	; 0x1138 <LCD_sendCommand>
}
    1132:	cf 91       	pop	r28
    1134:	df 91       	pop	r29
    1136:	08 95       	ret

00001138 <LCD_sendCommand>:

void LCD_sendCommand(uint8 command)
{
    1138:	df 93       	push	r29
    113a:	cf 93       	push	r28
    113c:	cd b7       	in	r28, 0x3d	; 61
    113e:	de b7       	in	r29, 0x3e	; 62
    1140:	e9 97       	sbiw	r28, 0x39	; 57
    1142:	0f b6       	in	r0, 0x3f	; 63
    1144:	f8 94       	cli
    1146:	de bf       	out	0x3e, r29	; 62
    1148:	0f be       	out	0x3f, r0	; 63
    114a:	cd bf       	out	0x3d, r28	; 61
    114c:	89 af       	std	Y+57, r24	; 0x39
	CLEAR_BIT(LCD_CTRL_PORT,RS);
    114e:	a8 e3       	ldi	r26, 0x38	; 56
    1150:	b0 e0       	ldi	r27, 0x00	; 0
    1152:	e8 e3       	ldi	r30, 0x38	; 56
    1154:	f0 e0       	ldi	r31, 0x00	; 0
    1156:	80 81       	ld	r24, Z
    1158:	8d 7f       	andi	r24, 0xFD	; 253
    115a:	8c 93       	st	X, r24
	CLEAR_BIT(LCD_CTRL_PORT,RW);
    115c:	a8 e3       	ldi	r26, 0x38	; 56
    115e:	b0 e0       	ldi	r27, 0x00	; 0
    1160:	e8 e3       	ldi	r30, 0x38	; 56
    1162:	f0 e0       	ldi	r31, 0x00	; 0
    1164:	80 81       	ld	r24, Z
    1166:	8b 7f       	andi	r24, 0xFB	; 251
    1168:	8c 93       	st	X, r24
    116a:	80 e0       	ldi	r24, 0x00	; 0
    116c:	90 e0       	ldi	r25, 0x00	; 0
    116e:	a0 e8       	ldi	r26, 0x80	; 128
    1170:	bf e3       	ldi	r27, 0x3F	; 63
    1172:	8d ab       	std	Y+53, r24	; 0x35
    1174:	9e ab       	std	Y+54, r25	; 0x36
    1176:	af ab       	std	Y+55, r26	; 0x37
    1178:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    117a:	6d a9       	ldd	r22, Y+53	; 0x35
    117c:	7e a9       	ldd	r23, Y+54	; 0x36
    117e:	8f a9       	ldd	r24, Y+55	; 0x37
    1180:	98 ad       	ldd	r25, Y+56	; 0x38
    1182:	20 e0       	ldi	r18, 0x00	; 0
    1184:	30 e0       	ldi	r19, 0x00	; 0
    1186:	4a ef       	ldi	r20, 0xFA	; 250
    1188:	54 e4       	ldi	r21, 0x44	; 68
    118a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    118e:	dc 01       	movw	r26, r24
    1190:	cb 01       	movw	r24, r22
    1192:	89 ab       	std	Y+49, r24	; 0x31
    1194:	9a ab       	std	Y+50, r25	; 0x32
    1196:	ab ab       	std	Y+51, r26	; 0x33
    1198:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    119a:	69 a9       	ldd	r22, Y+49	; 0x31
    119c:	7a a9       	ldd	r23, Y+50	; 0x32
    119e:	8b a9       	ldd	r24, Y+51	; 0x33
    11a0:	9c a9       	ldd	r25, Y+52	; 0x34
    11a2:	20 e0       	ldi	r18, 0x00	; 0
    11a4:	30 e0       	ldi	r19, 0x00	; 0
    11a6:	40 e8       	ldi	r20, 0x80	; 128
    11a8:	5f e3       	ldi	r21, 0x3F	; 63
    11aa:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    11ae:	88 23       	and	r24, r24
    11b0:	2c f4       	brge	.+10     	; 0x11bc <LCD_sendCommand+0x84>
		__ticks = 1;
    11b2:	81 e0       	ldi	r24, 0x01	; 1
    11b4:	90 e0       	ldi	r25, 0x00	; 0
    11b6:	98 ab       	std	Y+48, r25	; 0x30
    11b8:	8f a7       	std	Y+47, r24	; 0x2f
    11ba:	3f c0       	rjmp	.+126    	; 0x123a <LCD_sendCommand+0x102>
	else if (__tmp > 65535)
    11bc:	69 a9       	ldd	r22, Y+49	; 0x31
    11be:	7a a9       	ldd	r23, Y+50	; 0x32
    11c0:	8b a9       	ldd	r24, Y+51	; 0x33
    11c2:	9c a9       	ldd	r25, Y+52	; 0x34
    11c4:	20 e0       	ldi	r18, 0x00	; 0
    11c6:	3f ef       	ldi	r19, 0xFF	; 255
    11c8:	4f e7       	ldi	r20, 0x7F	; 127
    11ca:	57 e4       	ldi	r21, 0x47	; 71
    11cc:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    11d0:	18 16       	cp	r1, r24
    11d2:	4c f5       	brge	.+82     	; 0x1226 <LCD_sendCommand+0xee>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    11d4:	6d a9       	ldd	r22, Y+53	; 0x35
    11d6:	7e a9       	ldd	r23, Y+54	; 0x36
    11d8:	8f a9       	ldd	r24, Y+55	; 0x37
    11da:	98 ad       	ldd	r25, Y+56	; 0x38
    11dc:	20 e0       	ldi	r18, 0x00	; 0
    11de:	30 e0       	ldi	r19, 0x00	; 0
    11e0:	40 e2       	ldi	r20, 0x20	; 32
    11e2:	51 e4       	ldi	r21, 0x41	; 65
    11e4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    11e8:	dc 01       	movw	r26, r24
    11ea:	cb 01       	movw	r24, r22
    11ec:	bc 01       	movw	r22, r24
    11ee:	cd 01       	movw	r24, r26
    11f0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    11f4:	dc 01       	movw	r26, r24
    11f6:	cb 01       	movw	r24, r22
    11f8:	98 ab       	std	Y+48, r25	; 0x30
    11fa:	8f a7       	std	Y+47, r24	; 0x2f
    11fc:	0f c0       	rjmp	.+30     	; 0x121c <LCD_sendCommand+0xe4>
    11fe:	88 ec       	ldi	r24, 0xC8	; 200
    1200:	90 e0       	ldi	r25, 0x00	; 0
    1202:	9e a7       	std	Y+46, r25	; 0x2e
    1204:	8d a7       	std	Y+45, r24	; 0x2d
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    1206:	8d a5       	ldd	r24, Y+45	; 0x2d
    1208:	9e a5       	ldd	r25, Y+46	; 0x2e
    120a:	01 97       	sbiw	r24, 0x01	; 1
    120c:	f1 f7       	brne	.-4      	; 0x120a <LCD_sendCommand+0xd2>
    120e:	9e a7       	std	Y+46, r25	; 0x2e
    1210:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1212:	8f a5       	ldd	r24, Y+47	; 0x2f
    1214:	98 a9       	ldd	r25, Y+48	; 0x30
    1216:	01 97       	sbiw	r24, 0x01	; 1
    1218:	98 ab       	std	Y+48, r25	; 0x30
    121a:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    121c:	8f a5       	ldd	r24, Y+47	; 0x2f
    121e:	98 a9       	ldd	r25, Y+48	; 0x30
    1220:	00 97       	sbiw	r24, 0x00	; 0
    1222:	69 f7       	brne	.-38     	; 0x11fe <LCD_sendCommand+0xc6>
    1224:	14 c0       	rjmp	.+40     	; 0x124e <LCD_sendCommand+0x116>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1226:	69 a9       	ldd	r22, Y+49	; 0x31
    1228:	7a a9       	ldd	r23, Y+50	; 0x32
    122a:	8b a9       	ldd	r24, Y+51	; 0x33
    122c:	9c a9       	ldd	r25, Y+52	; 0x34
    122e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1232:	dc 01       	movw	r26, r24
    1234:	cb 01       	movw	r24, r22
    1236:	98 ab       	std	Y+48, r25	; 0x30
    1238:	8f a7       	std	Y+47, r24	; 0x2f
    123a:	8f a5       	ldd	r24, Y+47	; 0x2f
    123c:	98 a9       	ldd	r25, Y+48	; 0x30
    123e:	9c a7       	std	Y+44, r25	; 0x2c
    1240:	8b a7       	std	Y+43, r24	; 0x2b
    1242:	8b a5       	ldd	r24, Y+43	; 0x2b
    1244:	9c a5       	ldd	r25, Y+44	; 0x2c
    1246:	01 97       	sbiw	r24, 0x01	; 1
    1248:	f1 f7       	brne	.-4      	; 0x1246 <LCD_sendCommand+0x10e>
    124a:	9c a7       	std	Y+44, r25	; 0x2c
    124c:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(1);
	SET_BIT(LCD_CTRL_PORT,E);
    124e:	a8 e3       	ldi	r26, 0x38	; 56
    1250:	b0 e0       	ldi	r27, 0x00	; 0
    1252:	e8 e3       	ldi	r30, 0x38	; 56
    1254:	f0 e0       	ldi	r31, 0x00	; 0
    1256:	80 81       	ld	r24, Z
    1258:	88 60       	ori	r24, 0x08	; 8
    125a:	8c 93       	st	X, r24
    125c:	80 e0       	ldi	r24, 0x00	; 0
    125e:	90 e0       	ldi	r25, 0x00	; 0
    1260:	a0 e8       	ldi	r26, 0x80	; 128
    1262:	bf e3       	ldi	r27, 0x3F	; 63
    1264:	8f a3       	std	Y+39, r24	; 0x27
    1266:	98 a7       	std	Y+40, r25	; 0x28
    1268:	a9 a7       	std	Y+41, r26	; 0x29
    126a:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    126c:	6f a1       	ldd	r22, Y+39	; 0x27
    126e:	78 a5       	ldd	r23, Y+40	; 0x28
    1270:	89 a5       	ldd	r24, Y+41	; 0x29
    1272:	9a a5       	ldd	r25, Y+42	; 0x2a
    1274:	20 e0       	ldi	r18, 0x00	; 0
    1276:	30 e0       	ldi	r19, 0x00	; 0
    1278:	4a ef       	ldi	r20, 0xFA	; 250
    127a:	54 e4       	ldi	r21, 0x44	; 68
    127c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1280:	dc 01       	movw	r26, r24
    1282:	cb 01       	movw	r24, r22
    1284:	8b a3       	std	Y+35, r24	; 0x23
    1286:	9c a3       	std	Y+36, r25	; 0x24
    1288:	ad a3       	std	Y+37, r26	; 0x25
    128a:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    128c:	6b a1       	ldd	r22, Y+35	; 0x23
    128e:	7c a1       	ldd	r23, Y+36	; 0x24
    1290:	8d a1       	ldd	r24, Y+37	; 0x25
    1292:	9e a1       	ldd	r25, Y+38	; 0x26
    1294:	20 e0       	ldi	r18, 0x00	; 0
    1296:	30 e0       	ldi	r19, 0x00	; 0
    1298:	40 e8       	ldi	r20, 0x80	; 128
    129a:	5f e3       	ldi	r21, 0x3F	; 63
    129c:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    12a0:	88 23       	and	r24, r24
    12a2:	2c f4       	brge	.+10     	; 0x12ae <LCD_sendCommand+0x176>
		__ticks = 1;
    12a4:	81 e0       	ldi	r24, 0x01	; 1
    12a6:	90 e0       	ldi	r25, 0x00	; 0
    12a8:	9a a3       	std	Y+34, r25	; 0x22
    12aa:	89 a3       	std	Y+33, r24	; 0x21
    12ac:	3f c0       	rjmp	.+126    	; 0x132c <LCD_sendCommand+0x1f4>
	else if (__tmp > 65535)
    12ae:	6b a1       	ldd	r22, Y+35	; 0x23
    12b0:	7c a1       	ldd	r23, Y+36	; 0x24
    12b2:	8d a1       	ldd	r24, Y+37	; 0x25
    12b4:	9e a1       	ldd	r25, Y+38	; 0x26
    12b6:	20 e0       	ldi	r18, 0x00	; 0
    12b8:	3f ef       	ldi	r19, 0xFF	; 255
    12ba:	4f e7       	ldi	r20, 0x7F	; 127
    12bc:	57 e4       	ldi	r21, 0x47	; 71
    12be:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    12c2:	18 16       	cp	r1, r24
    12c4:	4c f5       	brge	.+82     	; 0x1318 <LCD_sendCommand+0x1e0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    12c6:	6f a1       	ldd	r22, Y+39	; 0x27
    12c8:	78 a5       	ldd	r23, Y+40	; 0x28
    12ca:	89 a5       	ldd	r24, Y+41	; 0x29
    12cc:	9a a5       	ldd	r25, Y+42	; 0x2a
    12ce:	20 e0       	ldi	r18, 0x00	; 0
    12d0:	30 e0       	ldi	r19, 0x00	; 0
    12d2:	40 e2       	ldi	r20, 0x20	; 32
    12d4:	51 e4       	ldi	r21, 0x41	; 65
    12d6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    12da:	dc 01       	movw	r26, r24
    12dc:	cb 01       	movw	r24, r22
    12de:	bc 01       	movw	r22, r24
    12e0:	cd 01       	movw	r24, r26
    12e2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    12e6:	dc 01       	movw	r26, r24
    12e8:	cb 01       	movw	r24, r22
    12ea:	9a a3       	std	Y+34, r25	; 0x22
    12ec:	89 a3       	std	Y+33, r24	; 0x21
    12ee:	0f c0       	rjmp	.+30     	; 0x130e <LCD_sendCommand+0x1d6>
    12f0:	88 ec       	ldi	r24, 0xC8	; 200
    12f2:	90 e0       	ldi	r25, 0x00	; 0
    12f4:	98 a3       	std	Y+32, r25	; 0x20
    12f6:	8f 8f       	std	Y+31, r24	; 0x1f
    12f8:	8f 8d       	ldd	r24, Y+31	; 0x1f
    12fa:	98 a1       	ldd	r25, Y+32	; 0x20
    12fc:	01 97       	sbiw	r24, 0x01	; 1
    12fe:	f1 f7       	brne	.-4      	; 0x12fc <LCD_sendCommand+0x1c4>
    1300:	98 a3       	std	Y+32, r25	; 0x20
    1302:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1304:	89 a1       	ldd	r24, Y+33	; 0x21
    1306:	9a a1       	ldd	r25, Y+34	; 0x22
    1308:	01 97       	sbiw	r24, 0x01	; 1
    130a:	9a a3       	std	Y+34, r25	; 0x22
    130c:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    130e:	89 a1       	ldd	r24, Y+33	; 0x21
    1310:	9a a1       	ldd	r25, Y+34	; 0x22
    1312:	00 97       	sbiw	r24, 0x00	; 0
    1314:	69 f7       	brne	.-38     	; 0x12f0 <LCD_sendCommand+0x1b8>
    1316:	14 c0       	rjmp	.+40     	; 0x1340 <LCD_sendCommand+0x208>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1318:	6b a1       	ldd	r22, Y+35	; 0x23
    131a:	7c a1       	ldd	r23, Y+36	; 0x24
    131c:	8d a1       	ldd	r24, Y+37	; 0x25
    131e:	9e a1       	ldd	r25, Y+38	; 0x26
    1320:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1324:	dc 01       	movw	r26, r24
    1326:	cb 01       	movw	r24, r22
    1328:	9a a3       	std	Y+34, r25	; 0x22
    132a:	89 a3       	std	Y+33, r24	; 0x21
    132c:	89 a1       	ldd	r24, Y+33	; 0x21
    132e:	9a a1       	ldd	r25, Y+34	; 0x22
    1330:	9e 8f       	std	Y+30, r25	; 0x1e
    1332:	8d 8f       	std	Y+29, r24	; 0x1d
    1334:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1336:	9e 8d       	ldd	r25, Y+30	; 0x1e
    1338:	01 97       	sbiw	r24, 0x01	; 1
    133a:	f1 f7       	brne	.-4      	; 0x1338 <LCD_sendCommand+0x200>
    133c:	9e 8f       	std	Y+30, r25	; 0x1e
    133e:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(1);
	LCD_DATA_PORT = command;
    1340:	e5 e3       	ldi	r30, 0x35	; 53
    1342:	f0 e0       	ldi	r31, 0x00	; 0
    1344:	89 ad       	ldd	r24, Y+57	; 0x39
    1346:	80 83       	st	Z, r24
    1348:	80 e0       	ldi	r24, 0x00	; 0
    134a:	90 e0       	ldi	r25, 0x00	; 0
    134c:	a0 e8       	ldi	r26, 0x80	; 128
    134e:	bf e3       	ldi	r27, 0x3F	; 63
    1350:	89 8f       	std	Y+25, r24	; 0x19
    1352:	9a 8f       	std	Y+26, r25	; 0x1a
    1354:	ab 8f       	std	Y+27, r26	; 0x1b
    1356:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1358:	69 8d       	ldd	r22, Y+25	; 0x19
    135a:	7a 8d       	ldd	r23, Y+26	; 0x1a
    135c:	8b 8d       	ldd	r24, Y+27	; 0x1b
    135e:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1360:	20 e0       	ldi	r18, 0x00	; 0
    1362:	30 e0       	ldi	r19, 0x00	; 0
    1364:	4a ef       	ldi	r20, 0xFA	; 250
    1366:	54 e4       	ldi	r21, 0x44	; 68
    1368:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    136c:	dc 01       	movw	r26, r24
    136e:	cb 01       	movw	r24, r22
    1370:	8d 8b       	std	Y+21, r24	; 0x15
    1372:	9e 8b       	std	Y+22, r25	; 0x16
    1374:	af 8b       	std	Y+23, r26	; 0x17
    1376:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    1378:	6d 89       	ldd	r22, Y+21	; 0x15
    137a:	7e 89       	ldd	r23, Y+22	; 0x16
    137c:	8f 89       	ldd	r24, Y+23	; 0x17
    137e:	98 8d       	ldd	r25, Y+24	; 0x18
    1380:	20 e0       	ldi	r18, 0x00	; 0
    1382:	30 e0       	ldi	r19, 0x00	; 0
    1384:	40 e8       	ldi	r20, 0x80	; 128
    1386:	5f e3       	ldi	r21, 0x3F	; 63
    1388:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    138c:	88 23       	and	r24, r24
    138e:	2c f4       	brge	.+10     	; 0x139a <LCD_sendCommand+0x262>
		__ticks = 1;
    1390:	81 e0       	ldi	r24, 0x01	; 1
    1392:	90 e0       	ldi	r25, 0x00	; 0
    1394:	9c 8b       	std	Y+20, r25	; 0x14
    1396:	8b 8b       	std	Y+19, r24	; 0x13
    1398:	3f c0       	rjmp	.+126    	; 0x1418 <LCD_sendCommand+0x2e0>
	else if (__tmp > 65535)
    139a:	6d 89       	ldd	r22, Y+21	; 0x15
    139c:	7e 89       	ldd	r23, Y+22	; 0x16
    139e:	8f 89       	ldd	r24, Y+23	; 0x17
    13a0:	98 8d       	ldd	r25, Y+24	; 0x18
    13a2:	20 e0       	ldi	r18, 0x00	; 0
    13a4:	3f ef       	ldi	r19, 0xFF	; 255
    13a6:	4f e7       	ldi	r20, 0x7F	; 127
    13a8:	57 e4       	ldi	r21, 0x47	; 71
    13aa:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    13ae:	18 16       	cp	r1, r24
    13b0:	4c f5       	brge	.+82     	; 0x1404 <LCD_sendCommand+0x2cc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    13b2:	69 8d       	ldd	r22, Y+25	; 0x19
    13b4:	7a 8d       	ldd	r23, Y+26	; 0x1a
    13b6:	8b 8d       	ldd	r24, Y+27	; 0x1b
    13b8:	9c 8d       	ldd	r25, Y+28	; 0x1c
    13ba:	20 e0       	ldi	r18, 0x00	; 0
    13bc:	30 e0       	ldi	r19, 0x00	; 0
    13be:	40 e2       	ldi	r20, 0x20	; 32
    13c0:	51 e4       	ldi	r21, 0x41	; 65
    13c2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    13c6:	dc 01       	movw	r26, r24
    13c8:	cb 01       	movw	r24, r22
    13ca:	bc 01       	movw	r22, r24
    13cc:	cd 01       	movw	r24, r26
    13ce:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    13d2:	dc 01       	movw	r26, r24
    13d4:	cb 01       	movw	r24, r22
    13d6:	9c 8b       	std	Y+20, r25	; 0x14
    13d8:	8b 8b       	std	Y+19, r24	; 0x13
    13da:	0f c0       	rjmp	.+30     	; 0x13fa <LCD_sendCommand+0x2c2>
    13dc:	88 ec       	ldi	r24, 0xC8	; 200
    13de:	90 e0       	ldi	r25, 0x00	; 0
    13e0:	9a 8b       	std	Y+18, r25	; 0x12
    13e2:	89 8b       	std	Y+17, r24	; 0x11
    13e4:	89 89       	ldd	r24, Y+17	; 0x11
    13e6:	9a 89       	ldd	r25, Y+18	; 0x12
    13e8:	01 97       	sbiw	r24, 0x01	; 1
    13ea:	f1 f7       	brne	.-4      	; 0x13e8 <LCD_sendCommand+0x2b0>
    13ec:	9a 8b       	std	Y+18, r25	; 0x12
    13ee:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    13f0:	8b 89       	ldd	r24, Y+19	; 0x13
    13f2:	9c 89       	ldd	r25, Y+20	; 0x14
    13f4:	01 97       	sbiw	r24, 0x01	; 1
    13f6:	9c 8b       	std	Y+20, r25	; 0x14
    13f8:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    13fa:	8b 89       	ldd	r24, Y+19	; 0x13
    13fc:	9c 89       	ldd	r25, Y+20	; 0x14
    13fe:	00 97       	sbiw	r24, 0x00	; 0
    1400:	69 f7       	brne	.-38     	; 0x13dc <LCD_sendCommand+0x2a4>
    1402:	14 c0       	rjmp	.+40     	; 0x142c <LCD_sendCommand+0x2f4>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1404:	6d 89       	ldd	r22, Y+21	; 0x15
    1406:	7e 89       	ldd	r23, Y+22	; 0x16
    1408:	8f 89       	ldd	r24, Y+23	; 0x17
    140a:	98 8d       	ldd	r25, Y+24	; 0x18
    140c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1410:	dc 01       	movw	r26, r24
    1412:	cb 01       	movw	r24, r22
    1414:	9c 8b       	std	Y+20, r25	; 0x14
    1416:	8b 8b       	std	Y+19, r24	; 0x13
    1418:	8b 89       	ldd	r24, Y+19	; 0x13
    141a:	9c 89       	ldd	r25, Y+20	; 0x14
    141c:	98 8b       	std	Y+16, r25	; 0x10
    141e:	8f 87       	std	Y+15, r24	; 0x0f
    1420:	8f 85       	ldd	r24, Y+15	; 0x0f
    1422:	98 89       	ldd	r25, Y+16	; 0x10
    1424:	01 97       	sbiw	r24, 0x01	; 1
    1426:	f1 f7       	brne	.-4      	; 0x1424 <LCD_sendCommand+0x2ec>
    1428:	98 8b       	std	Y+16, r25	; 0x10
    142a:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(1);
	CLEAR_BIT(LCD_CTRL_PORT,E);
    142c:	a8 e3       	ldi	r26, 0x38	; 56
    142e:	b0 e0       	ldi	r27, 0x00	; 0
    1430:	e8 e3       	ldi	r30, 0x38	; 56
    1432:	f0 e0       	ldi	r31, 0x00	; 0
    1434:	80 81       	ld	r24, Z
    1436:	87 7f       	andi	r24, 0xF7	; 247
    1438:	8c 93       	st	X, r24
    143a:	80 e0       	ldi	r24, 0x00	; 0
    143c:	90 e0       	ldi	r25, 0x00	; 0
    143e:	a0 e8       	ldi	r26, 0x80	; 128
    1440:	bf e3       	ldi	r27, 0x3F	; 63
    1442:	8b 87       	std	Y+11, r24	; 0x0b
    1444:	9c 87       	std	Y+12, r25	; 0x0c
    1446:	ad 87       	std	Y+13, r26	; 0x0d
    1448:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    144a:	6b 85       	ldd	r22, Y+11	; 0x0b
    144c:	7c 85       	ldd	r23, Y+12	; 0x0c
    144e:	8d 85       	ldd	r24, Y+13	; 0x0d
    1450:	9e 85       	ldd	r25, Y+14	; 0x0e
    1452:	20 e0       	ldi	r18, 0x00	; 0
    1454:	30 e0       	ldi	r19, 0x00	; 0
    1456:	4a ef       	ldi	r20, 0xFA	; 250
    1458:	54 e4       	ldi	r21, 0x44	; 68
    145a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    145e:	dc 01       	movw	r26, r24
    1460:	cb 01       	movw	r24, r22
    1462:	8f 83       	std	Y+7, r24	; 0x07
    1464:	98 87       	std	Y+8, r25	; 0x08
    1466:	a9 87       	std	Y+9, r26	; 0x09
    1468:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    146a:	6f 81       	ldd	r22, Y+7	; 0x07
    146c:	78 85       	ldd	r23, Y+8	; 0x08
    146e:	89 85       	ldd	r24, Y+9	; 0x09
    1470:	9a 85       	ldd	r25, Y+10	; 0x0a
    1472:	20 e0       	ldi	r18, 0x00	; 0
    1474:	30 e0       	ldi	r19, 0x00	; 0
    1476:	40 e8       	ldi	r20, 0x80	; 128
    1478:	5f e3       	ldi	r21, 0x3F	; 63
    147a:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    147e:	88 23       	and	r24, r24
    1480:	2c f4       	brge	.+10     	; 0x148c <LCD_sendCommand+0x354>
		__ticks = 1;
    1482:	81 e0       	ldi	r24, 0x01	; 1
    1484:	90 e0       	ldi	r25, 0x00	; 0
    1486:	9e 83       	std	Y+6, r25	; 0x06
    1488:	8d 83       	std	Y+5, r24	; 0x05
    148a:	3f c0       	rjmp	.+126    	; 0x150a <LCD_sendCommand+0x3d2>
	else if (__tmp > 65535)
    148c:	6f 81       	ldd	r22, Y+7	; 0x07
    148e:	78 85       	ldd	r23, Y+8	; 0x08
    1490:	89 85       	ldd	r24, Y+9	; 0x09
    1492:	9a 85       	ldd	r25, Y+10	; 0x0a
    1494:	20 e0       	ldi	r18, 0x00	; 0
    1496:	3f ef       	ldi	r19, 0xFF	; 255
    1498:	4f e7       	ldi	r20, 0x7F	; 127
    149a:	57 e4       	ldi	r21, 0x47	; 71
    149c:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    14a0:	18 16       	cp	r1, r24
    14a2:	4c f5       	brge	.+82     	; 0x14f6 <LCD_sendCommand+0x3be>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    14a4:	6b 85       	ldd	r22, Y+11	; 0x0b
    14a6:	7c 85       	ldd	r23, Y+12	; 0x0c
    14a8:	8d 85       	ldd	r24, Y+13	; 0x0d
    14aa:	9e 85       	ldd	r25, Y+14	; 0x0e
    14ac:	20 e0       	ldi	r18, 0x00	; 0
    14ae:	30 e0       	ldi	r19, 0x00	; 0
    14b0:	40 e2       	ldi	r20, 0x20	; 32
    14b2:	51 e4       	ldi	r21, 0x41	; 65
    14b4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    14b8:	dc 01       	movw	r26, r24
    14ba:	cb 01       	movw	r24, r22
    14bc:	bc 01       	movw	r22, r24
    14be:	cd 01       	movw	r24, r26
    14c0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    14c4:	dc 01       	movw	r26, r24
    14c6:	cb 01       	movw	r24, r22
    14c8:	9e 83       	std	Y+6, r25	; 0x06
    14ca:	8d 83       	std	Y+5, r24	; 0x05
    14cc:	0f c0       	rjmp	.+30     	; 0x14ec <LCD_sendCommand+0x3b4>
    14ce:	88 ec       	ldi	r24, 0xC8	; 200
    14d0:	90 e0       	ldi	r25, 0x00	; 0
    14d2:	9c 83       	std	Y+4, r25	; 0x04
    14d4:	8b 83       	std	Y+3, r24	; 0x03
    14d6:	8b 81       	ldd	r24, Y+3	; 0x03
    14d8:	9c 81       	ldd	r25, Y+4	; 0x04
    14da:	01 97       	sbiw	r24, 0x01	; 1
    14dc:	f1 f7       	brne	.-4      	; 0x14da <LCD_sendCommand+0x3a2>
    14de:	9c 83       	std	Y+4, r25	; 0x04
    14e0:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    14e2:	8d 81       	ldd	r24, Y+5	; 0x05
    14e4:	9e 81       	ldd	r25, Y+6	; 0x06
    14e6:	01 97       	sbiw	r24, 0x01	; 1
    14e8:	9e 83       	std	Y+6, r25	; 0x06
    14ea:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    14ec:	8d 81       	ldd	r24, Y+5	; 0x05
    14ee:	9e 81       	ldd	r25, Y+6	; 0x06
    14f0:	00 97       	sbiw	r24, 0x00	; 0
    14f2:	69 f7       	brne	.-38     	; 0x14ce <LCD_sendCommand+0x396>
    14f4:	14 c0       	rjmp	.+40     	; 0x151e <LCD_sendCommand+0x3e6>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    14f6:	6f 81       	ldd	r22, Y+7	; 0x07
    14f8:	78 85       	ldd	r23, Y+8	; 0x08
    14fa:	89 85       	ldd	r24, Y+9	; 0x09
    14fc:	9a 85       	ldd	r25, Y+10	; 0x0a
    14fe:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1502:	dc 01       	movw	r26, r24
    1504:	cb 01       	movw	r24, r22
    1506:	9e 83       	std	Y+6, r25	; 0x06
    1508:	8d 83       	std	Y+5, r24	; 0x05
    150a:	8d 81       	ldd	r24, Y+5	; 0x05
    150c:	9e 81       	ldd	r25, Y+6	; 0x06
    150e:	9a 83       	std	Y+2, r25	; 0x02
    1510:	89 83       	std	Y+1, r24	; 0x01
    1512:	89 81       	ldd	r24, Y+1	; 0x01
    1514:	9a 81       	ldd	r25, Y+2	; 0x02
    1516:	01 97       	sbiw	r24, 0x01	; 1
    1518:	f1 f7       	brne	.-4      	; 0x1516 <LCD_sendCommand+0x3de>
    151a:	9a 83       	std	Y+2, r25	; 0x02
    151c:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(1);
}
    151e:	e9 96       	adiw	r28, 0x39	; 57
    1520:	0f b6       	in	r0, 0x3f	; 63
    1522:	f8 94       	cli
    1524:	de bf       	out	0x3e, r29	; 62
    1526:	0f be       	out	0x3f, r0	; 63
    1528:	cd bf       	out	0x3d, r28	; 61
    152a:	cf 91       	pop	r28
    152c:	df 91       	pop	r29
    152e:	08 95       	ret

00001530 <LCD_displayCharacter>:

void LCD_displayCharacter(uint8 data)
{
    1530:	df 93       	push	r29
    1532:	cf 93       	push	r28
    1534:	cd b7       	in	r28, 0x3d	; 61
    1536:	de b7       	in	r29, 0x3e	; 62
    1538:	e9 97       	sbiw	r28, 0x39	; 57
    153a:	0f b6       	in	r0, 0x3f	; 63
    153c:	f8 94       	cli
    153e:	de bf       	out	0x3e, r29	; 62
    1540:	0f be       	out	0x3f, r0	; 63
    1542:	cd bf       	out	0x3d, r28	; 61
    1544:	89 af       	std	Y+57, r24	; 0x39
	SET_BIT(LCD_CTRL_PORT,RS);
    1546:	a8 e3       	ldi	r26, 0x38	; 56
    1548:	b0 e0       	ldi	r27, 0x00	; 0
    154a:	e8 e3       	ldi	r30, 0x38	; 56
    154c:	f0 e0       	ldi	r31, 0x00	; 0
    154e:	80 81       	ld	r24, Z
    1550:	82 60       	ori	r24, 0x02	; 2
    1552:	8c 93       	st	X, r24
	CLEAR_BIT(LCD_CTRL_PORT,RW);
    1554:	a8 e3       	ldi	r26, 0x38	; 56
    1556:	b0 e0       	ldi	r27, 0x00	; 0
    1558:	e8 e3       	ldi	r30, 0x38	; 56
    155a:	f0 e0       	ldi	r31, 0x00	; 0
    155c:	80 81       	ld	r24, Z
    155e:	8b 7f       	andi	r24, 0xFB	; 251
    1560:	8c 93       	st	X, r24
    1562:	80 e0       	ldi	r24, 0x00	; 0
    1564:	90 e0       	ldi	r25, 0x00	; 0
    1566:	a0 e8       	ldi	r26, 0x80	; 128
    1568:	bf e3       	ldi	r27, 0x3F	; 63
    156a:	8d ab       	std	Y+53, r24	; 0x35
    156c:	9e ab       	std	Y+54, r25	; 0x36
    156e:	af ab       	std	Y+55, r26	; 0x37
    1570:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1572:	6d a9       	ldd	r22, Y+53	; 0x35
    1574:	7e a9       	ldd	r23, Y+54	; 0x36
    1576:	8f a9       	ldd	r24, Y+55	; 0x37
    1578:	98 ad       	ldd	r25, Y+56	; 0x38
    157a:	20 e0       	ldi	r18, 0x00	; 0
    157c:	30 e0       	ldi	r19, 0x00	; 0
    157e:	4a ef       	ldi	r20, 0xFA	; 250
    1580:	54 e4       	ldi	r21, 0x44	; 68
    1582:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1586:	dc 01       	movw	r26, r24
    1588:	cb 01       	movw	r24, r22
    158a:	89 ab       	std	Y+49, r24	; 0x31
    158c:	9a ab       	std	Y+50, r25	; 0x32
    158e:	ab ab       	std	Y+51, r26	; 0x33
    1590:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    1592:	69 a9       	ldd	r22, Y+49	; 0x31
    1594:	7a a9       	ldd	r23, Y+50	; 0x32
    1596:	8b a9       	ldd	r24, Y+51	; 0x33
    1598:	9c a9       	ldd	r25, Y+52	; 0x34
    159a:	20 e0       	ldi	r18, 0x00	; 0
    159c:	30 e0       	ldi	r19, 0x00	; 0
    159e:	40 e8       	ldi	r20, 0x80	; 128
    15a0:	5f e3       	ldi	r21, 0x3F	; 63
    15a2:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    15a6:	88 23       	and	r24, r24
    15a8:	2c f4       	brge	.+10     	; 0x15b4 <LCD_displayCharacter+0x84>
		__ticks = 1;
    15aa:	81 e0       	ldi	r24, 0x01	; 1
    15ac:	90 e0       	ldi	r25, 0x00	; 0
    15ae:	98 ab       	std	Y+48, r25	; 0x30
    15b0:	8f a7       	std	Y+47, r24	; 0x2f
    15b2:	3f c0       	rjmp	.+126    	; 0x1632 <LCD_displayCharacter+0x102>
	else if (__tmp > 65535)
    15b4:	69 a9       	ldd	r22, Y+49	; 0x31
    15b6:	7a a9       	ldd	r23, Y+50	; 0x32
    15b8:	8b a9       	ldd	r24, Y+51	; 0x33
    15ba:	9c a9       	ldd	r25, Y+52	; 0x34
    15bc:	20 e0       	ldi	r18, 0x00	; 0
    15be:	3f ef       	ldi	r19, 0xFF	; 255
    15c0:	4f e7       	ldi	r20, 0x7F	; 127
    15c2:	57 e4       	ldi	r21, 0x47	; 71
    15c4:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    15c8:	18 16       	cp	r1, r24
    15ca:	4c f5       	brge	.+82     	; 0x161e <LCD_displayCharacter+0xee>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    15cc:	6d a9       	ldd	r22, Y+53	; 0x35
    15ce:	7e a9       	ldd	r23, Y+54	; 0x36
    15d0:	8f a9       	ldd	r24, Y+55	; 0x37
    15d2:	98 ad       	ldd	r25, Y+56	; 0x38
    15d4:	20 e0       	ldi	r18, 0x00	; 0
    15d6:	30 e0       	ldi	r19, 0x00	; 0
    15d8:	40 e2       	ldi	r20, 0x20	; 32
    15da:	51 e4       	ldi	r21, 0x41	; 65
    15dc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    15e0:	dc 01       	movw	r26, r24
    15e2:	cb 01       	movw	r24, r22
    15e4:	bc 01       	movw	r22, r24
    15e6:	cd 01       	movw	r24, r26
    15e8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    15ec:	dc 01       	movw	r26, r24
    15ee:	cb 01       	movw	r24, r22
    15f0:	98 ab       	std	Y+48, r25	; 0x30
    15f2:	8f a7       	std	Y+47, r24	; 0x2f
    15f4:	0f c0       	rjmp	.+30     	; 0x1614 <LCD_displayCharacter+0xe4>
    15f6:	88 ec       	ldi	r24, 0xC8	; 200
    15f8:	90 e0       	ldi	r25, 0x00	; 0
    15fa:	9e a7       	std	Y+46, r25	; 0x2e
    15fc:	8d a7       	std	Y+45, r24	; 0x2d
    15fe:	8d a5       	ldd	r24, Y+45	; 0x2d
    1600:	9e a5       	ldd	r25, Y+46	; 0x2e
    1602:	01 97       	sbiw	r24, 0x01	; 1
    1604:	f1 f7       	brne	.-4      	; 0x1602 <LCD_displayCharacter+0xd2>
    1606:	9e a7       	std	Y+46, r25	; 0x2e
    1608:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    160a:	8f a5       	ldd	r24, Y+47	; 0x2f
    160c:	98 a9       	ldd	r25, Y+48	; 0x30
    160e:	01 97       	sbiw	r24, 0x01	; 1
    1610:	98 ab       	std	Y+48, r25	; 0x30
    1612:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1614:	8f a5       	ldd	r24, Y+47	; 0x2f
    1616:	98 a9       	ldd	r25, Y+48	; 0x30
    1618:	00 97       	sbiw	r24, 0x00	; 0
    161a:	69 f7       	brne	.-38     	; 0x15f6 <LCD_displayCharacter+0xc6>
    161c:	14 c0       	rjmp	.+40     	; 0x1646 <LCD_displayCharacter+0x116>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    161e:	69 a9       	ldd	r22, Y+49	; 0x31
    1620:	7a a9       	ldd	r23, Y+50	; 0x32
    1622:	8b a9       	ldd	r24, Y+51	; 0x33
    1624:	9c a9       	ldd	r25, Y+52	; 0x34
    1626:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    162a:	dc 01       	movw	r26, r24
    162c:	cb 01       	movw	r24, r22
    162e:	98 ab       	std	Y+48, r25	; 0x30
    1630:	8f a7       	std	Y+47, r24	; 0x2f
    1632:	8f a5       	ldd	r24, Y+47	; 0x2f
    1634:	98 a9       	ldd	r25, Y+48	; 0x30
    1636:	9c a7       	std	Y+44, r25	; 0x2c
    1638:	8b a7       	std	Y+43, r24	; 0x2b
    163a:	8b a5       	ldd	r24, Y+43	; 0x2b
    163c:	9c a5       	ldd	r25, Y+44	; 0x2c
    163e:	01 97       	sbiw	r24, 0x01	; 1
    1640:	f1 f7       	brne	.-4      	; 0x163e <LCD_displayCharacter+0x10e>
    1642:	9c a7       	std	Y+44, r25	; 0x2c
    1644:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(1);
	SET_BIT(LCD_CTRL_PORT,E);
    1646:	a8 e3       	ldi	r26, 0x38	; 56
    1648:	b0 e0       	ldi	r27, 0x00	; 0
    164a:	e8 e3       	ldi	r30, 0x38	; 56
    164c:	f0 e0       	ldi	r31, 0x00	; 0
    164e:	80 81       	ld	r24, Z
    1650:	88 60       	ori	r24, 0x08	; 8
    1652:	8c 93       	st	X, r24
    1654:	80 e0       	ldi	r24, 0x00	; 0
    1656:	90 e0       	ldi	r25, 0x00	; 0
    1658:	a0 e8       	ldi	r26, 0x80	; 128
    165a:	bf e3       	ldi	r27, 0x3F	; 63
    165c:	8f a3       	std	Y+39, r24	; 0x27
    165e:	98 a7       	std	Y+40, r25	; 0x28
    1660:	a9 a7       	std	Y+41, r26	; 0x29
    1662:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1664:	6f a1       	ldd	r22, Y+39	; 0x27
    1666:	78 a5       	ldd	r23, Y+40	; 0x28
    1668:	89 a5       	ldd	r24, Y+41	; 0x29
    166a:	9a a5       	ldd	r25, Y+42	; 0x2a
    166c:	20 e0       	ldi	r18, 0x00	; 0
    166e:	30 e0       	ldi	r19, 0x00	; 0
    1670:	4a ef       	ldi	r20, 0xFA	; 250
    1672:	54 e4       	ldi	r21, 0x44	; 68
    1674:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1678:	dc 01       	movw	r26, r24
    167a:	cb 01       	movw	r24, r22
    167c:	8b a3       	std	Y+35, r24	; 0x23
    167e:	9c a3       	std	Y+36, r25	; 0x24
    1680:	ad a3       	std	Y+37, r26	; 0x25
    1682:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    1684:	6b a1       	ldd	r22, Y+35	; 0x23
    1686:	7c a1       	ldd	r23, Y+36	; 0x24
    1688:	8d a1       	ldd	r24, Y+37	; 0x25
    168a:	9e a1       	ldd	r25, Y+38	; 0x26
    168c:	20 e0       	ldi	r18, 0x00	; 0
    168e:	30 e0       	ldi	r19, 0x00	; 0
    1690:	40 e8       	ldi	r20, 0x80	; 128
    1692:	5f e3       	ldi	r21, 0x3F	; 63
    1694:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1698:	88 23       	and	r24, r24
    169a:	2c f4       	brge	.+10     	; 0x16a6 <LCD_displayCharacter+0x176>
		__ticks = 1;
    169c:	81 e0       	ldi	r24, 0x01	; 1
    169e:	90 e0       	ldi	r25, 0x00	; 0
    16a0:	9a a3       	std	Y+34, r25	; 0x22
    16a2:	89 a3       	std	Y+33, r24	; 0x21
    16a4:	3f c0       	rjmp	.+126    	; 0x1724 <LCD_displayCharacter+0x1f4>
	else if (__tmp > 65535)
    16a6:	6b a1       	ldd	r22, Y+35	; 0x23
    16a8:	7c a1       	ldd	r23, Y+36	; 0x24
    16aa:	8d a1       	ldd	r24, Y+37	; 0x25
    16ac:	9e a1       	ldd	r25, Y+38	; 0x26
    16ae:	20 e0       	ldi	r18, 0x00	; 0
    16b0:	3f ef       	ldi	r19, 0xFF	; 255
    16b2:	4f e7       	ldi	r20, 0x7F	; 127
    16b4:	57 e4       	ldi	r21, 0x47	; 71
    16b6:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    16ba:	18 16       	cp	r1, r24
    16bc:	4c f5       	brge	.+82     	; 0x1710 <LCD_displayCharacter+0x1e0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    16be:	6f a1       	ldd	r22, Y+39	; 0x27
    16c0:	78 a5       	ldd	r23, Y+40	; 0x28
    16c2:	89 a5       	ldd	r24, Y+41	; 0x29
    16c4:	9a a5       	ldd	r25, Y+42	; 0x2a
    16c6:	20 e0       	ldi	r18, 0x00	; 0
    16c8:	30 e0       	ldi	r19, 0x00	; 0
    16ca:	40 e2       	ldi	r20, 0x20	; 32
    16cc:	51 e4       	ldi	r21, 0x41	; 65
    16ce:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    16d2:	dc 01       	movw	r26, r24
    16d4:	cb 01       	movw	r24, r22
    16d6:	bc 01       	movw	r22, r24
    16d8:	cd 01       	movw	r24, r26
    16da:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    16de:	dc 01       	movw	r26, r24
    16e0:	cb 01       	movw	r24, r22
    16e2:	9a a3       	std	Y+34, r25	; 0x22
    16e4:	89 a3       	std	Y+33, r24	; 0x21
    16e6:	0f c0       	rjmp	.+30     	; 0x1706 <LCD_displayCharacter+0x1d6>
    16e8:	88 ec       	ldi	r24, 0xC8	; 200
    16ea:	90 e0       	ldi	r25, 0x00	; 0
    16ec:	98 a3       	std	Y+32, r25	; 0x20
    16ee:	8f 8f       	std	Y+31, r24	; 0x1f
    16f0:	8f 8d       	ldd	r24, Y+31	; 0x1f
    16f2:	98 a1       	ldd	r25, Y+32	; 0x20
    16f4:	01 97       	sbiw	r24, 0x01	; 1
    16f6:	f1 f7       	brne	.-4      	; 0x16f4 <LCD_displayCharacter+0x1c4>
    16f8:	98 a3       	std	Y+32, r25	; 0x20
    16fa:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    16fc:	89 a1       	ldd	r24, Y+33	; 0x21
    16fe:	9a a1       	ldd	r25, Y+34	; 0x22
    1700:	01 97       	sbiw	r24, 0x01	; 1
    1702:	9a a3       	std	Y+34, r25	; 0x22
    1704:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1706:	89 a1       	ldd	r24, Y+33	; 0x21
    1708:	9a a1       	ldd	r25, Y+34	; 0x22
    170a:	00 97       	sbiw	r24, 0x00	; 0
    170c:	69 f7       	brne	.-38     	; 0x16e8 <LCD_displayCharacter+0x1b8>
    170e:	14 c0       	rjmp	.+40     	; 0x1738 <LCD_displayCharacter+0x208>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1710:	6b a1       	ldd	r22, Y+35	; 0x23
    1712:	7c a1       	ldd	r23, Y+36	; 0x24
    1714:	8d a1       	ldd	r24, Y+37	; 0x25
    1716:	9e a1       	ldd	r25, Y+38	; 0x26
    1718:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    171c:	dc 01       	movw	r26, r24
    171e:	cb 01       	movw	r24, r22
    1720:	9a a3       	std	Y+34, r25	; 0x22
    1722:	89 a3       	std	Y+33, r24	; 0x21
    1724:	89 a1       	ldd	r24, Y+33	; 0x21
    1726:	9a a1       	ldd	r25, Y+34	; 0x22
    1728:	9e 8f       	std	Y+30, r25	; 0x1e
    172a:	8d 8f       	std	Y+29, r24	; 0x1d
    172c:	8d 8d       	ldd	r24, Y+29	; 0x1d
    172e:	9e 8d       	ldd	r25, Y+30	; 0x1e
    1730:	01 97       	sbiw	r24, 0x01	; 1
    1732:	f1 f7       	brne	.-4      	; 0x1730 <LCD_displayCharacter+0x200>
    1734:	9e 8f       	std	Y+30, r25	; 0x1e
    1736:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(1);
	LCD_DATA_PORT = data;
    1738:	e5 e3       	ldi	r30, 0x35	; 53
    173a:	f0 e0       	ldi	r31, 0x00	; 0
    173c:	89 ad       	ldd	r24, Y+57	; 0x39
    173e:	80 83       	st	Z, r24
    1740:	80 e0       	ldi	r24, 0x00	; 0
    1742:	90 e0       	ldi	r25, 0x00	; 0
    1744:	a0 e8       	ldi	r26, 0x80	; 128
    1746:	bf e3       	ldi	r27, 0x3F	; 63
    1748:	89 8f       	std	Y+25, r24	; 0x19
    174a:	9a 8f       	std	Y+26, r25	; 0x1a
    174c:	ab 8f       	std	Y+27, r26	; 0x1b
    174e:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1750:	69 8d       	ldd	r22, Y+25	; 0x19
    1752:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1754:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1756:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1758:	20 e0       	ldi	r18, 0x00	; 0
    175a:	30 e0       	ldi	r19, 0x00	; 0
    175c:	4a ef       	ldi	r20, 0xFA	; 250
    175e:	54 e4       	ldi	r21, 0x44	; 68
    1760:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1764:	dc 01       	movw	r26, r24
    1766:	cb 01       	movw	r24, r22
    1768:	8d 8b       	std	Y+21, r24	; 0x15
    176a:	9e 8b       	std	Y+22, r25	; 0x16
    176c:	af 8b       	std	Y+23, r26	; 0x17
    176e:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    1770:	6d 89       	ldd	r22, Y+21	; 0x15
    1772:	7e 89       	ldd	r23, Y+22	; 0x16
    1774:	8f 89       	ldd	r24, Y+23	; 0x17
    1776:	98 8d       	ldd	r25, Y+24	; 0x18
    1778:	20 e0       	ldi	r18, 0x00	; 0
    177a:	30 e0       	ldi	r19, 0x00	; 0
    177c:	40 e8       	ldi	r20, 0x80	; 128
    177e:	5f e3       	ldi	r21, 0x3F	; 63
    1780:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1784:	88 23       	and	r24, r24
    1786:	2c f4       	brge	.+10     	; 0x1792 <LCD_displayCharacter+0x262>
		__ticks = 1;
    1788:	81 e0       	ldi	r24, 0x01	; 1
    178a:	90 e0       	ldi	r25, 0x00	; 0
    178c:	9c 8b       	std	Y+20, r25	; 0x14
    178e:	8b 8b       	std	Y+19, r24	; 0x13
    1790:	3f c0       	rjmp	.+126    	; 0x1810 <LCD_displayCharacter+0x2e0>
	else if (__tmp > 65535)
    1792:	6d 89       	ldd	r22, Y+21	; 0x15
    1794:	7e 89       	ldd	r23, Y+22	; 0x16
    1796:	8f 89       	ldd	r24, Y+23	; 0x17
    1798:	98 8d       	ldd	r25, Y+24	; 0x18
    179a:	20 e0       	ldi	r18, 0x00	; 0
    179c:	3f ef       	ldi	r19, 0xFF	; 255
    179e:	4f e7       	ldi	r20, 0x7F	; 127
    17a0:	57 e4       	ldi	r21, 0x47	; 71
    17a2:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    17a6:	18 16       	cp	r1, r24
    17a8:	4c f5       	brge	.+82     	; 0x17fc <LCD_displayCharacter+0x2cc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    17aa:	69 8d       	ldd	r22, Y+25	; 0x19
    17ac:	7a 8d       	ldd	r23, Y+26	; 0x1a
    17ae:	8b 8d       	ldd	r24, Y+27	; 0x1b
    17b0:	9c 8d       	ldd	r25, Y+28	; 0x1c
    17b2:	20 e0       	ldi	r18, 0x00	; 0
    17b4:	30 e0       	ldi	r19, 0x00	; 0
    17b6:	40 e2       	ldi	r20, 0x20	; 32
    17b8:	51 e4       	ldi	r21, 0x41	; 65
    17ba:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    17be:	dc 01       	movw	r26, r24
    17c0:	cb 01       	movw	r24, r22
    17c2:	bc 01       	movw	r22, r24
    17c4:	cd 01       	movw	r24, r26
    17c6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    17ca:	dc 01       	movw	r26, r24
    17cc:	cb 01       	movw	r24, r22
    17ce:	9c 8b       	std	Y+20, r25	; 0x14
    17d0:	8b 8b       	std	Y+19, r24	; 0x13
    17d2:	0f c0       	rjmp	.+30     	; 0x17f2 <LCD_displayCharacter+0x2c2>
    17d4:	88 ec       	ldi	r24, 0xC8	; 200
    17d6:	90 e0       	ldi	r25, 0x00	; 0
    17d8:	9a 8b       	std	Y+18, r25	; 0x12
    17da:	89 8b       	std	Y+17, r24	; 0x11
    17dc:	89 89       	ldd	r24, Y+17	; 0x11
    17de:	9a 89       	ldd	r25, Y+18	; 0x12
    17e0:	01 97       	sbiw	r24, 0x01	; 1
    17e2:	f1 f7       	brne	.-4      	; 0x17e0 <LCD_displayCharacter+0x2b0>
    17e4:	9a 8b       	std	Y+18, r25	; 0x12
    17e6:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    17e8:	8b 89       	ldd	r24, Y+19	; 0x13
    17ea:	9c 89       	ldd	r25, Y+20	; 0x14
    17ec:	01 97       	sbiw	r24, 0x01	; 1
    17ee:	9c 8b       	std	Y+20, r25	; 0x14
    17f0:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    17f2:	8b 89       	ldd	r24, Y+19	; 0x13
    17f4:	9c 89       	ldd	r25, Y+20	; 0x14
    17f6:	00 97       	sbiw	r24, 0x00	; 0
    17f8:	69 f7       	brne	.-38     	; 0x17d4 <LCD_displayCharacter+0x2a4>
    17fa:	14 c0       	rjmp	.+40     	; 0x1824 <LCD_displayCharacter+0x2f4>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    17fc:	6d 89       	ldd	r22, Y+21	; 0x15
    17fe:	7e 89       	ldd	r23, Y+22	; 0x16
    1800:	8f 89       	ldd	r24, Y+23	; 0x17
    1802:	98 8d       	ldd	r25, Y+24	; 0x18
    1804:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1808:	dc 01       	movw	r26, r24
    180a:	cb 01       	movw	r24, r22
    180c:	9c 8b       	std	Y+20, r25	; 0x14
    180e:	8b 8b       	std	Y+19, r24	; 0x13
    1810:	8b 89       	ldd	r24, Y+19	; 0x13
    1812:	9c 89       	ldd	r25, Y+20	; 0x14
    1814:	98 8b       	std	Y+16, r25	; 0x10
    1816:	8f 87       	std	Y+15, r24	; 0x0f
    1818:	8f 85       	ldd	r24, Y+15	; 0x0f
    181a:	98 89       	ldd	r25, Y+16	; 0x10
    181c:	01 97       	sbiw	r24, 0x01	; 1
    181e:	f1 f7       	brne	.-4      	; 0x181c <LCD_displayCharacter+0x2ec>
    1820:	98 8b       	std	Y+16, r25	; 0x10
    1822:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(1);
	CLEAR_BIT(LCD_CTRL_PORT,E);
    1824:	a8 e3       	ldi	r26, 0x38	; 56
    1826:	b0 e0       	ldi	r27, 0x00	; 0
    1828:	e8 e3       	ldi	r30, 0x38	; 56
    182a:	f0 e0       	ldi	r31, 0x00	; 0
    182c:	80 81       	ld	r24, Z
    182e:	87 7f       	andi	r24, 0xF7	; 247
    1830:	8c 93       	st	X, r24
    1832:	80 e0       	ldi	r24, 0x00	; 0
    1834:	90 e0       	ldi	r25, 0x00	; 0
    1836:	a0 e8       	ldi	r26, 0x80	; 128
    1838:	bf e3       	ldi	r27, 0x3F	; 63
    183a:	8b 87       	std	Y+11, r24	; 0x0b
    183c:	9c 87       	std	Y+12, r25	; 0x0c
    183e:	ad 87       	std	Y+13, r26	; 0x0d
    1840:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1842:	6b 85       	ldd	r22, Y+11	; 0x0b
    1844:	7c 85       	ldd	r23, Y+12	; 0x0c
    1846:	8d 85       	ldd	r24, Y+13	; 0x0d
    1848:	9e 85       	ldd	r25, Y+14	; 0x0e
    184a:	20 e0       	ldi	r18, 0x00	; 0
    184c:	30 e0       	ldi	r19, 0x00	; 0
    184e:	4a ef       	ldi	r20, 0xFA	; 250
    1850:	54 e4       	ldi	r21, 0x44	; 68
    1852:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1856:	dc 01       	movw	r26, r24
    1858:	cb 01       	movw	r24, r22
    185a:	8f 83       	std	Y+7, r24	; 0x07
    185c:	98 87       	std	Y+8, r25	; 0x08
    185e:	a9 87       	std	Y+9, r26	; 0x09
    1860:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1862:	6f 81       	ldd	r22, Y+7	; 0x07
    1864:	78 85       	ldd	r23, Y+8	; 0x08
    1866:	89 85       	ldd	r24, Y+9	; 0x09
    1868:	9a 85       	ldd	r25, Y+10	; 0x0a
    186a:	20 e0       	ldi	r18, 0x00	; 0
    186c:	30 e0       	ldi	r19, 0x00	; 0
    186e:	40 e8       	ldi	r20, 0x80	; 128
    1870:	5f e3       	ldi	r21, 0x3F	; 63
    1872:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1876:	88 23       	and	r24, r24
    1878:	2c f4       	brge	.+10     	; 0x1884 <LCD_displayCharacter+0x354>
		__ticks = 1;
    187a:	81 e0       	ldi	r24, 0x01	; 1
    187c:	90 e0       	ldi	r25, 0x00	; 0
    187e:	9e 83       	std	Y+6, r25	; 0x06
    1880:	8d 83       	std	Y+5, r24	; 0x05
    1882:	3f c0       	rjmp	.+126    	; 0x1902 <LCD_displayCharacter+0x3d2>
	else if (__tmp > 65535)
    1884:	6f 81       	ldd	r22, Y+7	; 0x07
    1886:	78 85       	ldd	r23, Y+8	; 0x08
    1888:	89 85       	ldd	r24, Y+9	; 0x09
    188a:	9a 85       	ldd	r25, Y+10	; 0x0a
    188c:	20 e0       	ldi	r18, 0x00	; 0
    188e:	3f ef       	ldi	r19, 0xFF	; 255
    1890:	4f e7       	ldi	r20, 0x7F	; 127
    1892:	57 e4       	ldi	r21, 0x47	; 71
    1894:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1898:	18 16       	cp	r1, r24
    189a:	4c f5       	brge	.+82     	; 0x18ee <LCD_displayCharacter+0x3be>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    189c:	6b 85       	ldd	r22, Y+11	; 0x0b
    189e:	7c 85       	ldd	r23, Y+12	; 0x0c
    18a0:	8d 85       	ldd	r24, Y+13	; 0x0d
    18a2:	9e 85       	ldd	r25, Y+14	; 0x0e
    18a4:	20 e0       	ldi	r18, 0x00	; 0
    18a6:	30 e0       	ldi	r19, 0x00	; 0
    18a8:	40 e2       	ldi	r20, 0x20	; 32
    18aa:	51 e4       	ldi	r21, 0x41	; 65
    18ac:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    18b0:	dc 01       	movw	r26, r24
    18b2:	cb 01       	movw	r24, r22
    18b4:	bc 01       	movw	r22, r24
    18b6:	cd 01       	movw	r24, r26
    18b8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    18bc:	dc 01       	movw	r26, r24
    18be:	cb 01       	movw	r24, r22
    18c0:	9e 83       	std	Y+6, r25	; 0x06
    18c2:	8d 83       	std	Y+5, r24	; 0x05
    18c4:	0f c0       	rjmp	.+30     	; 0x18e4 <LCD_displayCharacter+0x3b4>
    18c6:	88 ec       	ldi	r24, 0xC8	; 200
    18c8:	90 e0       	ldi	r25, 0x00	; 0
    18ca:	9c 83       	std	Y+4, r25	; 0x04
    18cc:	8b 83       	std	Y+3, r24	; 0x03
    18ce:	8b 81       	ldd	r24, Y+3	; 0x03
    18d0:	9c 81       	ldd	r25, Y+4	; 0x04
    18d2:	01 97       	sbiw	r24, 0x01	; 1
    18d4:	f1 f7       	brne	.-4      	; 0x18d2 <LCD_displayCharacter+0x3a2>
    18d6:	9c 83       	std	Y+4, r25	; 0x04
    18d8:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    18da:	8d 81       	ldd	r24, Y+5	; 0x05
    18dc:	9e 81       	ldd	r25, Y+6	; 0x06
    18de:	01 97       	sbiw	r24, 0x01	; 1
    18e0:	9e 83       	std	Y+6, r25	; 0x06
    18e2:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    18e4:	8d 81       	ldd	r24, Y+5	; 0x05
    18e6:	9e 81       	ldd	r25, Y+6	; 0x06
    18e8:	00 97       	sbiw	r24, 0x00	; 0
    18ea:	69 f7       	brne	.-38     	; 0x18c6 <LCD_displayCharacter+0x396>
    18ec:	14 c0       	rjmp	.+40     	; 0x1916 <LCD_displayCharacter+0x3e6>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    18ee:	6f 81       	ldd	r22, Y+7	; 0x07
    18f0:	78 85       	ldd	r23, Y+8	; 0x08
    18f2:	89 85       	ldd	r24, Y+9	; 0x09
    18f4:	9a 85       	ldd	r25, Y+10	; 0x0a
    18f6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    18fa:	dc 01       	movw	r26, r24
    18fc:	cb 01       	movw	r24, r22
    18fe:	9e 83       	std	Y+6, r25	; 0x06
    1900:	8d 83       	std	Y+5, r24	; 0x05
    1902:	8d 81       	ldd	r24, Y+5	; 0x05
    1904:	9e 81       	ldd	r25, Y+6	; 0x06
    1906:	9a 83       	std	Y+2, r25	; 0x02
    1908:	89 83       	std	Y+1, r24	; 0x01
    190a:	89 81       	ldd	r24, Y+1	; 0x01
    190c:	9a 81       	ldd	r25, Y+2	; 0x02
    190e:	01 97       	sbiw	r24, 0x01	; 1
    1910:	f1 f7       	brne	.-4      	; 0x190e <LCD_displayCharacter+0x3de>
    1912:	9a 83       	std	Y+2, r25	; 0x02
    1914:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(1);
}
    1916:	e9 96       	adiw	r28, 0x39	; 57
    1918:	0f b6       	in	r0, 0x3f	; 63
    191a:	f8 94       	cli
    191c:	de bf       	out	0x3e, r29	; 62
    191e:	0f be       	out	0x3f, r0	; 63
    1920:	cd bf       	out	0x3d, r28	; 61
    1922:	cf 91       	pop	r28
    1924:	df 91       	pop	r29
    1926:	08 95       	ret

00001928 <LCD_displayString>:

void LCD_displayString(const char *Str)
{
    1928:	df 93       	push	r29
    192a:	cf 93       	push	r28
    192c:	00 d0       	rcall	.+0      	; 0x192e <LCD_displayString+0x6>
    192e:	0f 92       	push	r0
    1930:	cd b7       	in	r28, 0x3d	; 61
    1932:	de b7       	in	r29, 0x3e	; 62
    1934:	9b 83       	std	Y+3, r25	; 0x03
    1936:	8a 83       	std	Y+2, r24	; 0x02
	uint8 i = 0;
    1938:	19 82       	std	Y+1, r1	; 0x01
    193a:	0e c0       	rjmp	.+28     	; 0x1958 <LCD_displayString+0x30>
	while(Str[i] != '\0')
	{
		LCD_displayCharacter(Str[i]);
    193c:	89 81       	ldd	r24, Y+1	; 0x01
    193e:	28 2f       	mov	r18, r24
    1940:	30 e0       	ldi	r19, 0x00	; 0
    1942:	8a 81       	ldd	r24, Y+2	; 0x02
    1944:	9b 81       	ldd	r25, Y+3	; 0x03
    1946:	fc 01       	movw	r30, r24
    1948:	e2 0f       	add	r30, r18
    194a:	f3 1f       	adc	r31, r19
    194c:	80 81       	ld	r24, Z
    194e:	0e 94 98 0a 	call	0x1530	; 0x1530 <LCD_displayCharacter>
		i++;
    1952:	89 81       	ldd	r24, Y+1	; 0x01
    1954:	8f 5f       	subi	r24, 0xFF	; 255
    1956:	89 83       	std	Y+1, r24	; 0x01
}

void LCD_displayString(const char *Str)
{
	uint8 i = 0;
	while(Str[i] != '\0')
    1958:	89 81       	ldd	r24, Y+1	; 0x01
    195a:	28 2f       	mov	r18, r24
    195c:	30 e0       	ldi	r19, 0x00	; 0
    195e:	8a 81       	ldd	r24, Y+2	; 0x02
    1960:	9b 81       	ldd	r25, Y+3	; 0x03
    1962:	fc 01       	movw	r30, r24
    1964:	e2 0f       	add	r30, r18
    1966:	f3 1f       	adc	r31, r19
    1968:	80 81       	ld	r24, Z
    196a:	88 23       	and	r24, r24
    196c:	39 f7       	brne	.-50     	; 0x193c <LCD_displayString+0x14>
	{
		LCD_displayCharacter(Str[i]);
		i++;
	}
}
    196e:	0f 90       	pop	r0
    1970:	0f 90       	pop	r0
    1972:	0f 90       	pop	r0
    1974:	cf 91       	pop	r28
    1976:	df 91       	pop	r29
    1978:	08 95       	ret

0000197a <LCD_goToRowColumn>:

void LCD_goToRowColumn(uint8 row,uint8 col)
{
    197a:	df 93       	push	r29
    197c:	cf 93       	push	r28
    197e:	00 d0       	rcall	.+0      	; 0x1980 <LCD_goToRowColumn+0x6>
    1980:	00 d0       	rcall	.+0      	; 0x1982 <LCD_goToRowColumn+0x8>
    1982:	0f 92       	push	r0
    1984:	cd b7       	in	r28, 0x3d	; 61
    1986:	de b7       	in	r29, 0x3e	; 62
    1988:	8a 83       	std	Y+2, r24	; 0x02
    198a:	6b 83       	std	Y+3, r22	; 0x03
	uint8 Address;
	
	switch(row)
    198c:	8a 81       	ldd	r24, Y+2	; 0x02
    198e:	28 2f       	mov	r18, r24
    1990:	30 e0       	ldi	r19, 0x00	; 0
    1992:	3d 83       	std	Y+5, r19	; 0x05
    1994:	2c 83       	std	Y+4, r18	; 0x04
    1996:	8c 81       	ldd	r24, Y+4	; 0x04
    1998:	9d 81       	ldd	r25, Y+5	; 0x05
    199a:	81 30       	cpi	r24, 0x01	; 1
    199c:	91 05       	cpc	r25, r1
    199e:	c1 f0       	breq	.+48     	; 0x19d0 <LCD_goToRowColumn+0x56>
    19a0:	2c 81       	ldd	r18, Y+4	; 0x04
    19a2:	3d 81       	ldd	r19, Y+5	; 0x05
    19a4:	22 30       	cpi	r18, 0x02	; 2
    19a6:	31 05       	cpc	r19, r1
    19a8:	2c f4       	brge	.+10     	; 0x19b4 <LCD_goToRowColumn+0x3a>
    19aa:	8c 81       	ldd	r24, Y+4	; 0x04
    19ac:	9d 81       	ldd	r25, Y+5	; 0x05
    19ae:	00 97       	sbiw	r24, 0x00	; 0
    19b0:	61 f0       	breq	.+24     	; 0x19ca <LCD_goToRowColumn+0x50>
    19b2:	19 c0       	rjmp	.+50     	; 0x19e6 <LCD_goToRowColumn+0x6c>
    19b4:	2c 81       	ldd	r18, Y+4	; 0x04
    19b6:	3d 81       	ldd	r19, Y+5	; 0x05
    19b8:	22 30       	cpi	r18, 0x02	; 2
    19ba:	31 05       	cpc	r19, r1
    19bc:	69 f0       	breq	.+26     	; 0x19d8 <LCD_goToRowColumn+0x5e>
    19be:	8c 81       	ldd	r24, Y+4	; 0x04
    19c0:	9d 81       	ldd	r25, Y+5	; 0x05
    19c2:	83 30       	cpi	r24, 0x03	; 3
    19c4:	91 05       	cpc	r25, r1
    19c6:	61 f0       	breq	.+24     	; 0x19e0 <LCD_goToRowColumn+0x66>
    19c8:	0e c0       	rjmp	.+28     	; 0x19e6 <LCD_goToRowColumn+0x6c>
	{
		case 0:
				Address=col;
    19ca:	8b 81       	ldd	r24, Y+3	; 0x03
    19cc:	89 83       	std	Y+1, r24	; 0x01
    19ce:	0b c0       	rjmp	.+22     	; 0x19e6 <LCD_goToRowColumn+0x6c>
				break;
		case 1:
				Address=col+0x40;
    19d0:	8b 81       	ldd	r24, Y+3	; 0x03
    19d2:	80 5c       	subi	r24, 0xC0	; 192
    19d4:	89 83       	std	Y+1, r24	; 0x01
    19d6:	07 c0       	rjmp	.+14     	; 0x19e6 <LCD_goToRowColumn+0x6c>
				break;
		case 2:
				Address=col+0x10;
    19d8:	8b 81       	ldd	r24, Y+3	; 0x03
    19da:	80 5f       	subi	r24, 0xF0	; 240
    19dc:	89 83       	std	Y+1, r24	; 0x01
    19de:	03 c0       	rjmp	.+6      	; 0x19e6 <LCD_goToRowColumn+0x6c>
				break;
		case 3:
				Address=col+0x50;
    19e0:	8b 81       	ldd	r24, Y+3	; 0x03
    19e2:	80 5b       	subi	r24, 0xB0	; 176
    19e4:	89 83       	std	Y+1, r24	; 0x01
				break;
	}					
	LCD_sendCommand(Address | SET_CURSOR_LOCATION); 
    19e6:	89 81       	ldd	r24, Y+1	; 0x01
    19e8:	80 68       	ori	r24, 0x80	; 128
    19ea:	0e 94 9c 08 	call	0x1138	; 0x1138 <LCD_sendCommand>
}
    19ee:	0f 90       	pop	r0
    19f0:	0f 90       	pop	r0
    19f2:	0f 90       	pop	r0
    19f4:	0f 90       	pop	r0
    19f6:	0f 90       	pop	r0
    19f8:	cf 91       	pop	r28
    19fa:	df 91       	pop	r29
    19fc:	08 95       	ret

000019fe <LCD_displayStringRowColumn>:

void LCD_displayStringRowColumn(uint8 row,uint8 col,const char *Str)
{
    19fe:	df 93       	push	r29
    1a00:	cf 93       	push	r28
    1a02:	00 d0       	rcall	.+0      	; 0x1a04 <LCD_displayStringRowColumn+0x6>
    1a04:	00 d0       	rcall	.+0      	; 0x1a06 <LCD_displayStringRowColumn+0x8>
    1a06:	cd b7       	in	r28, 0x3d	; 61
    1a08:	de b7       	in	r29, 0x3e	; 62
    1a0a:	89 83       	std	Y+1, r24	; 0x01
    1a0c:	6a 83       	std	Y+2, r22	; 0x02
    1a0e:	5c 83       	std	Y+4, r21	; 0x04
    1a10:	4b 83       	std	Y+3, r20	; 0x03
	LCD_goToRowColumn(row,col);
    1a12:	89 81       	ldd	r24, Y+1	; 0x01
    1a14:	6a 81       	ldd	r22, Y+2	; 0x02
    1a16:	0e 94 bd 0c 	call	0x197a	; 0x197a <LCD_goToRowColumn>
	LCD_displayString(Str);
    1a1a:	8b 81       	ldd	r24, Y+3	; 0x03
    1a1c:	9c 81       	ldd	r25, Y+4	; 0x04
    1a1e:	0e 94 94 0c 	call	0x1928	; 0x1928 <LCD_displayString>
}
    1a22:	0f 90       	pop	r0
    1a24:	0f 90       	pop	r0
    1a26:	0f 90       	pop	r0
    1a28:	0f 90       	pop	r0
    1a2a:	cf 91       	pop	r28
    1a2c:	df 91       	pop	r29
    1a2e:	08 95       	ret

00001a30 <LCD_intgerToString>:

void LCD_intgerToString(int data)
{
    1a30:	df 93       	push	r29
    1a32:	cf 93       	push	r28
    1a34:	cd b7       	in	r28, 0x3d	; 61
    1a36:	de b7       	in	r29, 0x3e	; 62
    1a38:	62 97       	sbiw	r28, 0x12	; 18
    1a3a:	0f b6       	in	r0, 0x3f	; 63
    1a3c:	f8 94       	cli
    1a3e:	de bf       	out	0x3e, r29	; 62
    1a40:	0f be       	out	0x3f, r0	; 63
    1a42:	cd bf       	out	0x3d, r28	; 61
    1a44:	9a 8b       	std	Y+18, r25	; 0x12
    1a46:	89 8b       	std	Y+17, r24	; 0x11
   char buff[16];
   itoa(data,buff,10);
    1a48:	89 89       	ldd	r24, Y+17	; 0x11
    1a4a:	9a 89       	ldd	r25, Y+18	; 0x12
    1a4c:	9e 01       	movw	r18, r28
    1a4e:	2f 5f       	subi	r18, 0xFF	; 255
    1a50:	3f 4f       	sbci	r19, 0xFF	; 255
    1a52:	b9 01       	movw	r22, r18
    1a54:	4a e0       	ldi	r20, 0x0A	; 10
    1a56:	50 e0       	ldi	r21, 0x00	; 0
    1a58:	0e 94 ad 15 	call	0x2b5a	; 0x2b5a <itoa>
   LCD_displayString(buff);
    1a5c:	ce 01       	movw	r24, r28
    1a5e:	01 96       	adiw	r24, 0x01	; 1
    1a60:	0e 94 94 0c 	call	0x1928	; 0x1928 <LCD_displayString>
}
    1a64:	62 96       	adiw	r28, 0x12	; 18
    1a66:	0f b6       	in	r0, 0x3f	; 63
    1a68:	f8 94       	cli
    1a6a:	de bf       	out	0x3e, r29	; 62
    1a6c:	0f be       	out	0x3f, r0	; 63
    1a6e:	cd bf       	out	0x3d, r28	; 61
    1a70:	cf 91       	pop	r28
    1a72:	df 91       	pop	r29
    1a74:	08 95       	ret

00001a76 <LCD_clearScreen>:

void LCD_clearScreen(void)
{
    1a76:	df 93       	push	r29
    1a78:	cf 93       	push	r28
    1a7a:	cd b7       	in	r28, 0x3d	; 61
    1a7c:	de b7       	in	r29, 0x3e	; 62
	LCD_sendCommand(CLEAR_COMMAND);
    1a7e:	81 e0       	ldi	r24, 0x01	; 1
    1a80:	0e 94 9c 08 	call	0x1138	; 0x1138 <LCD_sendCommand>
}
    1a84:	cf 91       	pop	r28
    1a86:	df 91       	pop	r29
    1a88:	08 95       	ret

00001a8a <get_password>:


uint8 g_clear = 0;

void get_password(uint8 password[])
{
    1a8a:	0f 93       	push	r16
    1a8c:	1f 93       	push	r17
    1a8e:	df 93       	push	r29
    1a90:	cf 93       	push	r28
    1a92:	cd b7       	in	r28, 0x3d	; 61
    1a94:	de b7       	in	r29, 0x3e	; 62
    1a96:	61 97       	sbiw	r28, 0x11	; 17
    1a98:	0f b6       	in	r0, 0x3f	; 63
    1a9a:	f8 94       	cli
    1a9c:	de bf       	out	0x3e, r29	; 62
    1a9e:	0f be       	out	0x3f, r0	; 63
    1aa0:	cd bf       	out	0x3d, r28	; 61
    1aa2:	99 8b       	std	Y+17, r25	; 0x11
    1aa4:	88 8b       	std	Y+16, r24	; 0x10
	uint8 i = 0;
    1aa6:	1f 86       	std	Y+15, r1	; 0x0f
	for (i = 0; i < PASSWORD_LEN ; i++)
    1aa8:	1f 86       	std	Y+15, r1	; 0x0f
    1aaa:	88 c0       	rjmp	.+272    	; 0x1bbc <get_password+0x132>
	{
		password[i] = KeyPad_getPressedKey();
    1aac:	8f 85       	ldd	r24, Y+15	; 0x0f
    1aae:	28 2f       	mov	r18, r24
    1ab0:	30 e0       	ldi	r19, 0x00	; 0
    1ab2:	88 89       	ldd	r24, Y+16	; 0x10
    1ab4:	99 89       	ldd	r25, Y+17	; 0x11
    1ab6:	8c 01       	movw	r16, r24
    1ab8:	02 0f       	add	r16, r18
    1aba:	13 1f       	adc	r17, r19
    1abc:	0e 94 83 07 	call	0xf06	; 0xf06 <KeyPad_getPressedKey>
    1ac0:	f8 01       	movw	r30, r16
    1ac2:	80 83       	st	Z, r24
    1ac4:	80 e0       	ldi	r24, 0x00	; 0
    1ac6:	90 e0       	ldi	r25, 0x00	; 0
    1ac8:	a6 e1       	ldi	r26, 0x16	; 22
    1aca:	b3 e4       	ldi	r27, 0x43	; 67
    1acc:	8b 87       	std	Y+11, r24	; 0x0b
    1ace:	9c 87       	std	Y+12, r25	; 0x0c
    1ad0:	ad 87       	std	Y+13, r26	; 0x0d
    1ad2:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1ad4:	6b 85       	ldd	r22, Y+11	; 0x0b
    1ad6:	7c 85       	ldd	r23, Y+12	; 0x0c
    1ad8:	8d 85       	ldd	r24, Y+13	; 0x0d
    1ada:	9e 85       	ldd	r25, Y+14	; 0x0e
    1adc:	20 e0       	ldi	r18, 0x00	; 0
    1ade:	30 e0       	ldi	r19, 0x00	; 0
    1ae0:	4a ef       	ldi	r20, 0xFA	; 250
    1ae2:	54 e4       	ldi	r21, 0x44	; 68
    1ae4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1ae8:	dc 01       	movw	r26, r24
    1aea:	cb 01       	movw	r24, r22
    1aec:	8f 83       	std	Y+7, r24	; 0x07
    1aee:	98 87       	std	Y+8, r25	; 0x08
    1af0:	a9 87       	std	Y+9, r26	; 0x09
    1af2:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1af4:	6f 81       	ldd	r22, Y+7	; 0x07
    1af6:	78 85       	ldd	r23, Y+8	; 0x08
    1af8:	89 85       	ldd	r24, Y+9	; 0x09
    1afa:	9a 85       	ldd	r25, Y+10	; 0x0a
    1afc:	20 e0       	ldi	r18, 0x00	; 0
    1afe:	30 e0       	ldi	r19, 0x00	; 0
    1b00:	40 e8       	ldi	r20, 0x80	; 128
    1b02:	5f e3       	ldi	r21, 0x3F	; 63
    1b04:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1b08:	88 23       	and	r24, r24
    1b0a:	2c f4       	brge	.+10     	; 0x1b16 <get_password+0x8c>
		__ticks = 1;
    1b0c:	81 e0       	ldi	r24, 0x01	; 1
    1b0e:	90 e0       	ldi	r25, 0x00	; 0
    1b10:	9e 83       	std	Y+6, r25	; 0x06
    1b12:	8d 83       	std	Y+5, r24	; 0x05
    1b14:	3f c0       	rjmp	.+126    	; 0x1b94 <get_password+0x10a>
	else if (__tmp > 65535)
    1b16:	6f 81       	ldd	r22, Y+7	; 0x07
    1b18:	78 85       	ldd	r23, Y+8	; 0x08
    1b1a:	89 85       	ldd	r24, Y+9	; 0x09
    1b1c:	9a 85       	ldd	r25, Y+10	; 0x0a
    1b1e:	20 e0       	ldi	r18, 0x00	; 0
    1b20:	3f ef       	ldi	r19, 0xFF	; 255
    1b22:	4f e7       	ldi	r20, 0x7F	; 127
    1b24:	57 e4       	ldi	r21, 0x47	; 71
    1b26:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1b2a:	18 16       	cp	r1, r24
    1b2c:	4c f5       	brge	.+82     	; 0x1b80 <get_password+0xf6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1b2e:	6b 85       	ldd	r22, Y+11	; 0x0b
    1b30:	7c 85       	ldd	r23, Y+12	; 0x0c
    1b32:	8d 85       	ldd	r24, Y+13	; 0x0d
    1b34:	9e 85       	ldd	r25, Y+14	; 0x0e
    1b36:	20 e0       	ldi	r18, 0x00	; 0
    1b38:	30 e0       	ldi	r19, 0x00	; 0
    1b3a:	40 e2       	ldi	r20, 0x20	; 32
    1b3c:	51 e4       	ldi	r21, 0x41	; 65
    1b3e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1b42:	dc 01       	movw	r26, r24
    1b44:	cb 01       	movw	r24, r22
    1b46:	bc 01       	movw	r22, r24
    1b48:	cd 01       	movw	r24, r26
    1b4a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1b4e:	dc 01       	movw	r26, r24
    1b50:	cb 01       	movw	r24, r22
    1b52:	9e 83       	std	Y+6, r25	; 0x06
    1b54:	8d 83       	std	Y+5, r24	; 0x05
    1b56:	0f c0       	rjmp	.+30     	; 0x1b76 <get_password+0xec>
    1b58:	88 ec       	ldi	r24, 0xC8	; 200
    1b5a:	90 e0       	ldi	r25, 0x00	; 0
    1b5c:	9c 83       	std	Y+4, r25	; 0x04
    1b5e:	8b 83       	std	Y+3, r24	; 0x03
    1b60:	8b 81       	ldd	r24, Y+3	; 0x03
    1b62:	9c 81       	ldd	r25, Y+4	; 0x04
    1b64:	01 97       	sbiw	r24, 0x01	; 1
    1b66:	f1 f7       	brne	.-4      	; 0x1b64 <get_password+0xda>
    1b68:	9c 83       	std	Y+4, r25	; 0x04
    1b6a:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1b6c:	8d 81       	ldd	r24, Y+5	; 0x05
    1b6e:	9e 81       	ldd	r25, Y+6	; 0x06
    1b70:	01 97       	sbiw	r24, 0x01	; 1
    1b72:	9e 83       	std	Y+6, r25	; 0x06
    1b74:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1b76:	8d 81       	ldd	r24, Y+5	; 0x05
    1b78:	9e 81       	ldd	r25, Y+6	; 0x06
    1b7a:	00 97       	sbiw	r24, 0x00	; 0
    1b7c:	69 f7       	brne	.-38     	; 0x1b58 <get_password+0xce>
    1b7e:	14 c0       	rjmp	.+40     	; 0x1ba8 <get_password+0x11e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1b80:	6f 81       	ldd	r22, Y+7	; 0x07
    1b82:	78 85       	ldd	r23, Y+8	; 0x08
    1b84:	89 85       	ldd	r24, Y+9	; 0x09
    1b86:	9a 85       	ldd	r25, Y+10	; 0x0a
    1b88:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1b8c:	dc 01       	movw	r26, r24
    1b8e:	cb 01       	movw	r24, r22
    1b90:	9e 83       	std	Y+6, r25	; 0x06
    1b92:	8d 83       	std	Y+5, r24	; 0x05
    1b94:	8d 81       	ldd	r24, Y+5	; 0x05
    1b96:	9e 81       	ldd	r25, Y+6	; 0x06
    1b98:	9a 83       	std	Y+2, r25	; 0x02
    1b9a:	89 83       	std	Y+1, r24	; 0x01
    1b9c:	89 81       	ldd	r24, Y+1	; 0x01
    1b9e:	9a 81       	ldd	r25, Y+2	; 0x02
    1ba0:	01 97       	sbiw	r24, 0x01	; 1
    1ba2:	f1 f7       	brne	.-4      	; 0x1ba0 <get_password+0x116>
    1ba4:	9a 83       	std	Y+2, r25	; 0x02
    1ba6:	89 83       	std	Y+1, r24	; 0x01
		_delay_ms(150);
		LCD_goToRowColumn(1,i);
    1ba8:	81 e0       	ldi	r24, 0x01	; 1
    1baa:	6f 85       	ldd	r22, Y+15	; 0x0f
    1bac:	0e 94 bd 0c 	call	0x197a	; 0x197a <LCD_goToRowColumn>
		LCD_displayCharacter('*');
    1bb0:	8a e2       	ldi	r24, 0x2A	; 42
    1bb2:	0e 94 98 0a 	call	0x1530	; 0x1530 <LCD_displayCharacter>
uint8 g_clear = 0;

void get_password(uint8 password[])
{
	uint8 i = 0;
	for (i = 0; i < PASSWORD_LEN ; i++)
    1bb6:	8f 85       	ldd	r24, Y+15	; 0x0f
    1bb8:	8f 5f       	subi	r24, 0xFF	; 255
    1bba:	8f 87       	std	Y+15, r24	; 0x0f
    1bbc:	8f 85       	ldd	r24, Y+15	; 0x0f
    1bbe:	85 30       	cpi	r24, 0x05	; 5
    1bc0:	08 f4       	brcc	.+2      	; 0x1bc4 <get_password+0x13a>
    1bc2:	74 cf       	rjmp	.-280    	; 0x1aac <get_password+0x22>
		password[i] = KeyPad_getPressedKey();
		_delay_ms(150);
		LCD_goToRowColumn(1,i);
		LCD_displayCharacter('*');
	}
	KeyPad_getPressedKey();
    1bc4:	0e 94 83 07 	call	0xf06	; 0xf06 <KeyPad_getPressedKey>
	LCD_clearScreen();
    1bc8:	0e 94 3b 0d 	call	0x1a76	; 0x1a76 <LCD_clearScreen>
}
    1bcc:	61 96       	adiw	r28, 0x11	; 17
    1bce:	0f b6       	in	r0, 0x3f	; 63
    1bd0:	f8 94       	cli
    1bd2:	de bf       	out	0x3e, r29	; 62
    1bd4:	0f be       	out	0x3f, r0	; 63
    1bd6:	cd bf       	out	0x3d, r28	; 61
    1bd8:	cf 91       	pop	r28
    1bda:	df 91       	pop	r29
    1bdc:	1f 91       	pop	r17
    1bde:	0f 91       	pop	r16
    1be0:	08 95       	ret

00001be2 <cmp>:

uint8 cmp (uint8 password_1[], uint8 password_2[])
{
    1be2:	df 93       	push	r29
    1be4:	cf 93       	push	r28
    1be6:	00 d0       	rcall	.+0      	; 0x1be8 <cmp+0x6>
    1be8:	00 d0       	rcall	.+0      	; 0x1bea <cmp+0x8>
    1bea:	00 d0       	rcall	.+0      	; 0x1bec <cmp+0xa>
    1bec:	cd b7       	in	r28, 0x3d	; 61
    1bee:	de b7       	in	r29, 0x3e	; 62
    1bf0:	9b 83       	std	Y+3, r25	; 0x03
    1bf2:	8a 83       	std	Y+2, r24	; 0x02
    1bf4:	7d 83       	std	Y+5, r23	; 0x05
    1bf6:	6c 83       	std	Y+4, r22	; 0x04
	for(uint8 i = 0; i < PASSWORD_LEN; i++)
    1bf8:	19 82       	std	Y+1, r1	; 0x01
    1bfa:	19 c0       	rjmp	.+50     	; 0x1c2e <cmp+0x4c>
	{
		if (password_1[i] != password_2[i]) return 0;
    1bfc:	89 81       	ldd	r24, Y+1	; 0x01
    1bfe:	28 2f       	mov	r18, r24
    1c00:	30 e0       	ldi	r19, 0x00	; 0
    1c02:	8a 81       	ldd	r24, Y+2	; 0x02
    1c04:	9b 81       	ldd	r25, Y+3	; 0x03
    1c06:	fc 01       	movw	r30, r24
    1c08:	e2 0f       	add	r30, r18
    1c0a:	f3 1f       	adc	r31, r19
    1c0c:	40 81       	ld	r20, Z
    1c0e:	89 81       	ldd	r24, Y+1	; 0x01
    1c10:	28 2f       	mov	r18, r24
    1c12:	30 e0       	ldi	r19, 0x00	; 0
    1c14:	8c 81       	ldd	r24, Y+4	; 0x04
    1c16:	9d 81       	ldd	r25, Y+5	; 0x05
    1c18:	fc 01       	movw	r30, r24
    1c1a:	e2 0f       	add	r30, r18
    1c1c:	f3 1f       	adc	r31, r19
    1c1e:	80 81       	ld	r24, Z
    1c20:	48 17       	cp	r20, r24
    1c22:	11 f0       	breq	.+4      	; 0x1c28 <cmp+0x46>
    1c24:	1e 82       	std	Y+6, r1	; 0x06
    1c26:	08 c0       	rjmp	.+16     	; 0x1c38 <cmp+0x56>
	LCD_clearScreen();
}

uint8 cmp (uint8 password_1[], uint8 password_2[])
{
	for(uint8 i = 0; i < PASSWORD_LEN; i++)
    1c28:	89 81       	ldd	r24, Y+1	; 0x01
    1c2a:	8f 5f       	subi	r24, 0xFF	; 255
    1c2c:	89 83       	std	Y+1, r24	; 0x01
    1c2e:	89 81       	ldd	r24, Y+1	; 0x01
    1c30:	85 30       	cpi	r24, 0x05	; 5
    1c32:	20 f3       	brcs	.-56     	; 0x1bfc <cmp+0x1a>
	{
		if (password_1[i] != password_2[i]) return 0;
	}

	return 1;
    1c34:	81 e0       	ldi	r24, 0x01	; 1
    1c36:	8e 83       	std	Y+6, r24	; 0x06
    1c38:	8e 81       	ldd	r24, Y+6	; 0x06
}
    1c3a:	26 96       	adiw	r28, 0x06	; 6
    1c3c:	0f b6       	in	r0, 0x3f	; 63
    1c3e:	f8 94       	cli
    1c40:	de bf       	out	0x3e, r29	; 62
    1c42:	0f be       	out	0x3f, r0	; 63
    1c44:	cd bf       	out	0x3d, r28	; 61
    1c46:	cf 91       	pop	r28
    1c48:	df 91       	pop	r29
    1c4a:	08 95       	ret

00001c4c <LCD_clear>:


void LCD_clear(void)
{
    1c4c:	df 93       	push	r29
    1c4e:	cf 93       	push	r28
    1c50:	cd b7       	in	r28, 0x3d	; 61
    1c52:	de b7       	in	r29, 0x3e	; 62
	if (g_clear == 1)
    1c54:	80 91 fa 00 	lds	r24, 0x00FA
    1c58:	81 30       	cpi	r24, 0x01	; 1
    1c5a:	21 f4       	brne	.+8      	; 0x1c64 <LCD_clear+0x18>
	{
		LCD_clearScreen();
    1c5c:	0e 94 3b 0d 	call	0x1a76	; 0x1a76 <LCD_clearScreen>
		g_clear = 0;
    1c60:	10 92 fa 00 	sts	0x00FA, r1
	}
	SREG &= ~(1 << 7);
    1c64:	af e5       	ldi	r26, 0x5F	; 95
    1c66:	b0 e0       	ldi	r27, 0x00	; 0
    1c68:	ef e5       	ldi	r30, 0x5F	; 95
    1c6a:	f0 e0       	ldi	r31, 0x00	; 0
    1c6c:	80 81       	ld	r24, Z
    1c6e:	8f 77       	andi	r24, 0x7F	; 127
    1c70:	8c 93       	st	X, r24
}
    1c72:	cf 91       	pop	r28
    1c74:	df 91       	pop	r29
    1c76:	08 95       	ret

00001c78 <main>:

int main(void)
{
    1c78:	0f 93       	push	r16
    1c7a:	1f 93       	push	r17
    1c7c:	df 93       	push	r29
    1c7e:	cf 93       	push	r28
    1c80:	cd b7       	in	r28, 0x3d	; 61
    1c82:	de b7       	in	r29, 0x3e	; 62
    1c84:	cb 59       	subi	r28, 0x9B	; 155
    1c86:	d0 40       	sbci	r29, 0x00	; 0
    1c88:	0f b6       	in	r0, 0x3f	; 63
    1c8a:	f8 94       	cli
    1c8c:	de bf       	out	0x3e, r29	; 62
    1c8e:	0f be       	out	0x3f, r0	; 63
    1c90:	cd bf       	out	0x3d, r28	; 61
	uint8 comp=1;
    1c92:	fe 01       	movw	r30, r28
    1c94:	e7 59       	subi	r30, 0x97	; 151
    1c96:	ff 4f       	sbci	r31, 0xFF	; 255
    1c98:	81 e0       	ldi	r24, 0x01	; 1
    1c9a:	80 83       	st	Z, r24
	uint8 new_password[PASSWORD_LEN];
	uint8 re_new_password[PASSWORD_LEN];
	uint8 i;
	uint8 s_flag = 0;
    1c9c:	fe 01       	movw	r30, r28
    1c9e:	e9 59       	subi	r30, 0x99	; 153
    1ca0:	ff 4f       	sbci	r31, 0xFF	; 255
    1ca2:	10 82       	st	Z, r1
	uint8 no_of_tries = 0;
    1ca4:	fe 01       	movw	r30, r28
    1ca6:	ea 59       	subi	r30, 0x9A	; 154
    1ca8:	ff 4f       	sbci	r31, 0xFF	; 255
    1caa:	10 82       	st	Z, r1

	LCD_init();
    1cac:	0e 94 81 08 	call	0x1102	; 0x1102 <LCD_init>
	UART_config config = {BIT_8, DISABLE, STOP_BIT_1,9600};
    1cb0:	ce 01       	movw	r24, r28
    1cb2:	8c 58       	subi	r24, 0x8C	; 140
    1cb4:	9f 4f       	sbci	r25, 0xFF	; 255
    1cb6:	c8 57       	subi	r28, 0x78	; 120
    1cb8:	df 4f       	sbci	r29, 0xFF	; 255
    1cba:	99 83       	std	Y+1, r25	; 0x01
    1cbc:	88 83       	st	Y, r24
    1cbe:	c8 58       	subi	r28, 0x88	; 136
    1cc0:	d0 40       	sbci	r29, 0x00	; 0
    1cc2:	83 ef       	ldi	r24, 0xF3	; 243
    1cc4:	90 e0       	ldi	r25, 0x00	; 0
    1cc6:	c6 57       	subi	r28, 0x76	; 118
    1cc8:	df 4f       	sbci	r29, 0xFF	; 255
    1cca:	99 83       	std	Y+1, r25	; 0x01
    1ccc:	88 83       	st	Y, r24
    1cce:	ca 58       	subi	r28, 0x8A	; 138
    1cd0:	d0 40       	sbci	r29, 0x00	; 0
    1cd2:	95 e0       	ldi	r25, 0x05	; 5
    1cd4:	c4 57       	subi	r28, 0x74	; 116
    1cd6:	df 4f       	sbci	r29, 0xFF	; 255
    1cd8:	98 83       	st	Y, r25
    1cda:	cc 58       	subi	r28, 0x8C	; 140
    1cdc:	d0 40       	sbci	r29, 0x00	; 0
    1cde:	c6 57       	subi	r28, 0x76	; 118
    1ce0:	df 4f       	sbci	r29, 0xFF	; 255
    1ce2:	e8 81       	ld	r30, Y
    1ce4:	f9 81       	ldd	r31, Y+1	; 0x01
    1ce6:	ca 58       	subi	r28, 0x8A	; 138
    1ce8:	d0 40       	sbci	r29, 0x00	; 0
    1cea:	00 80       	ld	r0, Z
    1cec:	c6 57       	subi	r28, 0x76	; 118
    1cee:	df 4f       	sbci	r29, 0xFF	; 255
    1cf0:	88 81       	ld	r24, Y
    1cf2:	99 81       	ldd	r25, Y+1	; 0x01
    1cf4:	ca 58       	subi	r28, 0x8A	; 138
    1cf6:	d0 40       	sbci	r29, 0x00	; 0
    1cf8:	01 96       	adiw	r24, 0x01	; 1
    1cfa:	c6 57       	subi	r28, 0x76	; 118
    1cfc:	df 4f       	sbci	r29, 0xFF	; 255
    1cfe:	99 83       	std	Y+1, r25	; 0x01
    1d00:	88 83       	st	Y, r24
    1d02:	ca 58       	subi	r28, 0x8A	; 138
    1d04:	d0 40       	sbci	r29, 0x00	; 0
    1d06:	c8 57       	subi	r28, 0x78	; 120
    1d08:	df 4f       	sbci	r29, 0xFF	; 255
    1d0a:	e8 81       	ld	r30, Y
    1d0c:	f9 81       	ldd	r31, Y+1	; 0x01
    1d0e:	c8 58       	subi	r28, 0x88	; 136
    1d10:	d0 40       	sbci	r29, 0x00	; 0
    1d12:	00 82       	st	Z, r0
    1d14:	c8 57       	subi	r28, 0x78	; 120
    1d16:	df 4f       	sbci	r29, 0xFF	; 255
    1d18:	88 81       	ld	r24, Y
    1d1a:	99 81       	ldd	r25, Y+1	; 0x01
    1d1c:	c8 58       	subi	r28, 0x88	; 136
    1d1e:	d0 40       	sbci	r29, 0x00	; 0
    1d20:	01 96       	adiw	r24, 0x01	; 1
    1d22:	c8 57       	subi	r28, 0x78	; 120
    1d24:	df 4f       	sbci	r29, 0xFF	; 255
    1d26:	99 83       	std	Y+1, r25	; 0x01
    1d28:	88 83       	st	Y, r24
    1d2a:	c8 58       	subi	r28, 0x88	; 136
    1d2c:	d0 40       	sbci	r29, 0x00	; 0
    1d2e:	c4 57       	subi	r28, 0x74	; 116
    1d30:	df 4f       	sbci	r29, 0xFF	; 255
    1d32:	98 81       	ld	r25, Y
    1d34:	cc 58       	subi	r28, 0x8C	; 140
    1d36:	d0 40       	sbci	r29, 0x00	; 0
    1d38:	91 50       	subi	r25, 0x01	; 1
    1d3a:	c4 57       	subi	r28, 0x74	; 116
    1d3c:	df 4f       	sbci	r29, 0xFF	; 255
    1d3e:	98 83       	st	Y, r25
    1d40:	cc 58       	subi	r28, 0x8C	; 140
    1d42:	d0 40       	sbci	r29, 0x00	; 0
    1d44:	c4 57       	subi	r28, 0x74	; 116
    1d46:	df 4f       	sbci	r29, 0xFF	; 255
    1d48:	e8 81       	ld	r30, Y
    1d4a:	cc 58       	subi	r28, 0x8C	; 140
    1d4c:	d0 40       	sbci	r29, 0x00	; 0
    1d4e:	ee 23       	and	r30, r30
    1d50:	31 f6       	brne	.-116    	; 0x1cde <main+0x66>
	uart_init(&config);
    1d52:	ce 01       	movw	r24, r28
    1d54:	8c 58       	subi	r24, 0x8C	; 140
    1d56:	9f 4f       	sbci	r25, 0xFF	; 255
    1d58:	0e 94 30 06 	call	0xc60	; 0xc60 <uart_init>
	 *  re_enter the new password
	 *  check whether they are matching or no
	 *  */
	do
	{
		LCD_displayString("enter new pass: ");
    1d5c:	80 e6       	ldi	r24, 0x60	; 96
    1d5e:	90 e0       	ldi	r25, 0x00	; 0
    1d60:	0e 94 94 0c 	call	0x1928	; 0x1928 <LCD_displayString>
		get_password(new_password);
    1d64:	ce 01       	movw	r24, r28
    1d66:	86 59       	subi	r24, 0x96	; 150
    1d68:	9f 4f       	sbci	r25, 0xFF	; 255
    1d6a:	0e 94 45 0d 	call	0x1a8a	; 0x1a8a <get_password>
		LCD_displayString("enter pass again: ");
    1d6e:	81 e7       	ldi	r24, 0x71	; 113
    1d70:	90 e0       	ldi	r25, 0x00	; 0
    1d72:	0e 94 94 0c 	call	0x1928	; 0x1928 <LCD_displayString>
    1d76:	fe 01       	movw	r30, r28
    1d78:	e1 5a       	subi	r30, 0xA1	; 161
    1d7a:	ff 4f       	sbci	r31, 0xFF	; 255
    1d7c:	80 e0       	ldi	r24, 0x00	; 0
    1d7e:	90 e0       	ldi	r25, 0x00	; 0
    1d80:	a8 e4       	ldi	r26, 0x48	; 72
    1d82:	b2 e4       	ldi	r27, 0x42	; 66
    1d84:	80 83       	st	Z, r24
    1d86:	91 83       	std	Z+1, r25	; 0x01
    1d88:	a2 83       	std	Z+2, r26	; 0x02
    1d8a:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1d8c:	8e 01       	movw	r16, r28
    1d8e:	05 5a       	subi	r16, 0xA5	; 165
    1d90:	1f 4f       	sbci	r17, 0xFF	; 255
    1d92:	fe 01       	movw	r30, r28
    1d94:	e1 5a       	subi	r30, 0xA1	; 161
    1d96:	ff 4f       	sbci	r31, 0xFF	; 255
    1d98:	60 81       	ld	r22, Z
    1d9a:	71 81       	ldd	r23, Z+1	; 0x01
    1d9c:	82 81       	ldd	r24, Z+2	; 0x02
    1d9e:	93 81       	ldd	r25, Z+3	; 0x03
    1da0:	20 e0       	ldi	r18, 0x00	; 0
    1da2:	30 e0       	ldi	r19, 0x00	; 0
    1da4:	4a ef       	ldi	r20, 0xFA	; 250
    1da6:	54 e4       	ldi	r21, 0x44	; 68
    1da8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1dac:	dc 01       	movw	r26, r24
    1dae:	cb 01       	movw	r24, r22
    1db0:	f8 01       	movw	r30, r16
    1db2:	80 83       	st	Z, r24
    1db4:	91 83       	std	Z+1, r25	; 0x01
    1db6:	a2 83       	std	Z+2, r26	; 0x02
    1db8:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    1dba:	fe 01       	movw	r30, r28
    1dbc:	e5 5a       	subi	r30, 0xA5	; 165
    1dbe:	ff 4f       	sbci	r31, 0xFF	; 255
    1dc0:	60 81       	ld	r22, Z
    1dc2:	71 81       	ldd	r23, Z+1	; 0x01
    1dc4:	82 81       	ldd	r24, Z+2	; 0x02
    1dc6:	93 81       	ldd	r25, Z+3	; 0x03
    1dc8:	20 e0       	ldi	r18, 0x00	; 0
    1dca:	30 e0       	ldi	r19, 0x00	; 0
    1dcc:	40 e8       	ldi	r20, 0x80	; 128
    1dce:	5f e3       	ldi	r21, 0x3F	; 63
    1dd0:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1dd4:	88 23       	and	r24, r24
    1dd6:	44 f4       	brge	.+16     	; 0x1de8 <main+0x170>
		__ticks = 1;
    1dd8:	fe 01       	movw	r30, r28
    1dda:	e7 5a       	subi	r30, 0xA7	; 167
    1ddc:	ff 4f       	sbci	r31, 0xFF	; 255
    1dde:	81 e0       	ldi	r24, 0x01	; 1
    1de0:	90 e0       	ldi	r25, 0x00	; 0
    1de2:	91 83       	std	Z+1, r25	; 0x01
    1de4:	80 83       	st	Z, r24
    1de6:	64 c0       	rjmp	.+200    	; 0x1eb0 <main+0x238>
	else if (__tmp > 65535)
    1de8:	fe 01       	movw	r30, r28
    1dea:	e5 5a       	subi	r30, 0xA5	; 165
    1dec:	ff 4f       	sbci	r31, 0xFF	; 255
    1dee:	60 81       	ld	r22, Z
    1df0:	71 81       	ldd	r23, Z+1	; 0x01
    1df2:	82 81       	ldd	r24, Z+2	; 0x02
    1df4:	93 81       	ldd	r25, Z+3	; 0x03
    1df6:	20 e0       	ldi	r18, 0x00	; 0
    1df8:	3f ef       	ldi	r19, 0xFF	; 255
    1dfa:	4f e7       	ldi	r20, 0x7F	; 127
    1dfc:	57 e4       	ldi	r21, 0x47	; 71
    1dfe:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1e02:	18 16       	cp	r1, r24
    1e04:	0c f0       	brlt	.+2      	; 0x1e08 <main+0x190>
    1e06:	43 c0       	rjmp	.+134    	; 0x1e8e <main+0x216>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1e08:	fe 01       	movw	r30, r28
    1e0a:	e1 5a       	subi	r30, 0xA1	; 161
    1e0c:	ff 4f       	sbci	r31, 0xFF	; 255
    1e0e:	60 81       	ld	r22, Z
    1e10:	71 81       	ldd	r23, Z+1	; 0x01
    1e12:	82 81       	ldd	r24, Z+2	; 0x02
    1e14:	93 81       	ldd	r25, Z+3	; 0x03
    1e16:	20 e0       	ldi	r18, 0x00	; 0
    1e18:	30 e0       	ldi	r19, 0x00	; 0
    1e1a:	40 e2       	ldi	r20, 0x20	; 32
    1e1c:	51 e4       	ldi	r21, 0x41	; 65
    1e1e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1e22:	dc 01       	movw	r26, r24
    1e24:	cb 01       	movw	r24, r22
    1e26:	8e 01       	movw	r16, r28
    1e28:	07 5a       	subi	r16, 0xA7	; 167
    1e2a:	1f 4f       	sbci	r17, 0xFF	; 255
    1e2c:	bc 01       	movw	r22, r24
    1e2e:	cd 01       	movw	r24, r26
    1e30:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1e34:	dc 01       	movw	r26, r24
    1e36:	cb 01       	movw	r24, r22
    1e38:	f8 01       	movw	r30, r16
    1e3a:	91 83       	std	Z+1, r25	; 0x01
    1e3c:	80 83       	st	Z, r24
    1e3e:	1f c0       	rjmp	.+62     	; 0x1e7e <main+0x206>
    1e40:	fe 01       	movw	r30, r28
    1e42:	e9 5a       	subi	r30, 0xA9	; 169
    1e44:	ff 4f       	sbci	r31, 0xFF	; 255
    1e46:	88 ec       	ldi	r24, 0xC8	; 200
    1e48:	90 e0       	ldi	r25, 0x00	; 0
    1e4a:	91 83       	std	Z+1, r25	; 0x01
    1e4c:	80 83       	st	Z, r24
    1e4e:	fe 01       	movw	r30, r28
    1e50:	e9 5a       	subi	r30, 0xA9	; 169
    1e52:	ff 4f       	sbci	r31, 0xFF	; 255
    1e54:	80 81       	ld	r24, Z
    1e56:	91 81       	ldd	r25, Z+1	; 0x01
    1e58:	01 97       	sbiw	r24, 0x01	; 1
    1e5a:	f1 f7       	brne	.-4      	; 0x1e58 <main+0x1e0>
    1e5c:	fe 01       	movw	r30, r28
    1e5e:	e9 5a       	subi	r30, 0xA9	; 169
    1e60:	ff 4f       	sbci	r31, 0xFF	; 255
    1e62:	91 83       	std	Z+1, r25	; 0x01
    1e64:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1e66:	de 01       	movw	r26, r28
    1e68:	a7 5a       	subi	r26, 0xA7	; 167
    1e6a:	bf 4f       	sbci	r27, 0xFF	; 255
    1e6c:	fe 01       	movw	r30, r28
    1e6e:	e7 5a       	subi	r30, 0xA7	; 167
    1e70:	ff 4f       	sbci	r31, 0xFF	; 255
    1e72:	80 81       	ld	r24, Z
    1e74:	91 81       	ldd	r25, Z+1	; 0x01
    1e76:	01 97       	sbiw	r24, 0x01	; 1
    1e78:	11 96       	adiw	r26, 0x01	; 1
    1e7a:	9c 93       	st	X, r25
    1e7c:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1e7e:	fe 01       	movw	r30, r28
    1e80:	e7 5a       	subi	r30, 0xA7	; 167
    1e82:	ff 4f       	sbci	r31, 0xFF	; 255
    1e84:	80 81       	ld	r24, Z
    1e86:	91 81       	ldd	r25, Z+1	; 0x01
    1e88:	00 97       	sbiw	r24, 0x00	; 0
    1e8a:	d1 f6       	brne	.-76     	; 0x1e40 <main+0x1c8>
    1e8c:	27 c0       	rjmp	.+78     	; 0x1edc <main+0x264>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1e8e:	8e 01       	movw	r16, r28
    1e90:	07 5a       	subi	r16, 0xA7	; 167
    1e92:	1f 4f       	sbci	r17, 0xFF	; 255
    1e94:	fe 01       	movw	r30, r28
    1e96:	e5 5a       	subi	r30, 0xA5	; 165
    1e98:	ff 4f       	sbci	r31, 0xFF	; 255
    1e9a:	60 81       	ld	r22, Z
    1e9c:	71 81       	ldd	r23, Z+1	; 0x01
    1e9e:	82 81       	ldd	r24, Z+2	; 0x02
    1ea0:	93 81       	ldd	r25, Z+3	; 0x03
    1ea2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1ea6:	dc 01       	movw	r26, r24
    1ea8:	cb 01       	movw	r24, r22
    1eaa:	f8 01       	movw	r30, r16
    1eac:	91 83       	std	Z+1, r25	; 0x01
    1eae:	80 83       	st	Z, r24
    1eb0:	de 01       	movw	r26, r28
    1eb2:	ab 5a       	subi	r26, 0xAB	; 171
    1eb4:	bf 4f       	sbci	r27, 0xFF	; 255
    1eb6:	fe 01       	movw	r30, r28
    1eb8:	e7 5a       	subi	r30, 0xA7	; 167
    1eba:	ff 4f       	sbci	r31, 0xFF	; 255
    1ebc:	80 81       	ld	r24, Z
    1ebe:	91 81       	ldd	r25, Z+1	; 0x01
    1ec0:	8d 93       	st	X+, r24
    1ec2:	9c 93       	st	X, r25
    1ec4:	fe 01       	movw	r30, r28
    1ec6:	eb 5a       	subi	r30, 0xAB	; 171
    1ec8:	ff 4f       	sbci	r31, 0xFF	; 255
    1eca:	80 81       	ld	r24, Z
    1ecc:	91 81       	ldd	r25, Z+1	; 0x01
    1ece:	01 97       	sbiw	r24, 0x01	; 1
    1ed0:	f1 f7       	brne	.-4      	; 0x1ece <main+0x256>
    1ed2:	fe 01       	movw	r30, r28
    1ed4:	eb 5a       	subi	r30, 0xAB	; 171
    1ed6:	ff 4f       	sbci	r31, 0xFF	; 255
    1ed8:	91 83       	std	Z+1, r25	; 0x01
    1eda:	80 83       	st	Z, r24
		_delay_ms(50);
		get_password(re_new_password);
    1edc:	ce 01       	movw	r24, r28
    1ede:	81 59       	subi	r24, 0x91	; 145
    1ee0:	9f 4f       	sbci	r25, 0xFF	; 255
    1ee2:	0e 94 45 0d 	call	0x1a8a	; 0x1a8a <get_password>
		comp = cmp (new_password, re_new_password);
    1ee6:	ce 01       	movw	r24, r28
    1ee8:	86 59       	subi	r24, 0x96	; 150
    1eea:	9f 4f       	sbci	r25, 0xFF	; 255
    1eec:	9e 01       	movw	r18, r28
    1eee:	21 59       	subi	r18, 0x91	; 145
    1ef0:	3f 4f       	sbci	r19, 0xFF	; 255
    1ef2:	b9 01       	movw	r22, r18
    1ef4:	0e 94 f1 0d 	call	0x1be2	; 0x1be2 <cmp>
    1ef8:	fe 01       	movw	r30, r28
    1efa:	e7 59       	subi	r30, 0x97	; 151
    1efc:	ff 4f       	sbci	r31, 0xFF	; 255
    1efe:	80 83       	st	Z, r24
	}while (!comp);
    1f00:	fe 01       	movw	r30, r28
    1f02:	e7 59       	subi	r30, 0x97	; 151
    1f04:	ff 4f       	sbci	r31, 0xFF	; 255
    1f06:	80 81       	ld	r24, Z
    1f08:	88 23       	and	r24, r24
    1f0a:	09 f4       	brne	.+2      	; 0x1f0e <main+0x296>
    1f0c:	27 cf       	rjmp	.-434    	; 0x1d5c <main+0xe4>

	/* send the new password by UART to the Control ECU
	 * the Control ECU receive it and store it in EEPROM */
	uart_sendByte(READY);
    1f0e:	80 e1       	ldi	r24, 0x10	; 16
    1f10:	0e 94 f1 06 	call	0xde2	; 0xde2 <uart_sendByte>
	for (i = 0; i < PASSWORD_LEN; i++)
    1f14:	fe 01       	movw	r30, r28
    1f16:	e8 59       	subi	r30, 0x98	; 152
    1f18:	ff 4f       	sbci	r31, 0xFF	; 255
    1f1a:	10 82       	st	Z, r1
    1f1c:	1c c0       	rjmp	.+56     	; 0x1f56 <main+0x2de>
	{
		while (uart_recieveByte() != READY){};
    1f1e:	0e 94 08 07 	call	0xe10	; 0xe10 <uart_recieveByte>
    1f22:	80 31       	cpi	r24, 0x10	; 16
    1f24:	e1 f7       	brne	.-8      	; 0x1f1e <main+0x2a6>
		uart_sendByte(new_password[i]);
    1f26:	fe 01       	movw	r30, r28
    1f28:	e8 59       	subi	r30, 0x98	; 152
    1f2a:	ff 4f       	sbci	r31, 0xFF	; 255
    1f2c:	80 81       	ld	r24, Z
    1f2e:	28 2f       	mov	r18, r24
    1f30:	30 e0       	ldi	r19, 0x00	; 0
    1f32:	ce 01       	movw	r24, r28
    1f34:	86 59       	subi	r24, 0x96	; 150
    1f36:	9f 4f       	sbci	r25, 0xFF	; 255
    1f38:	fc 01       	movw	r30, r24
    1f3a:	e2 0f       	add	r30, r18
    1f3c:	f3 1f       	adc	r31, r19
    1f3e:	80 81       	ld	r24, Z
    1f40:	0e 94 f1 06 	call	0xde2	; 0xde2 <uart_sendByte>
	}while (!comp);

	/* send the new password by UART to the Control ECU
	 * the Control ECU receive it and store it in EEPROM */
	uart_sendByte(READY);
	for (i = 0; i < PASSWORD_LEN; i++)
    1f44:	de 01       	movw	r26, r28
    1f46:	a8 59       	subi	r26, 0x98	; 152
    1f48:	bf 4f       	sbci	r27, 0xFF	; 255
    1f4a:	fe 01       	movw	r30, r28
    1f4c:	e8 59       	subi	r30, 0x98	; 152
    1f4e:	ff 4f       	sbci	r31, 0xFF	; 255
    1f50:	80 81       	ld	r24, Z
    1f52:	8f 5f       	subi	r24, 0xFF	; 255
    1f54:	8c 93       	st	X, r24
    1f56:	fe 01       	movw	r30, r28
    1f58:	e8 59       	subi	r30, 0x98	; 152
    1f5a:	ff 4f       	sbci	r31, 0xFF	; 255
    1f5c:	80 81       	ld	r24, Z
    1f5e:	85 30       	cpi	r24, 0x05	; 5
    1f60:	f0 f2       	brcs	.-68     	; 0x1f1e <main+0x2a6>


	while (1)
	{
		/* select an option (-) open door or (+) change password */
		while (g_clear != 0) {};
    1f62:	80 91 fa 00 	lds	r24, 0x00FA
    1f66:	88 23       	and	r24, r24
    1f68:	e1 f7       	brne	.-8      	; 0x1f62 <main+0x2ea>
		LCD_displayString("select an option");
    1f6a:	84 e8       	ldi	r24, 0x84	; 132
    1f6c:	90 e0       	ldi	r25, 0x00	; 0
    1f6e:	0e 94 94 0c 	call	0x1928	; 0x1928 <LCD_displayString>
		uint8 option = KeyPad_getPressedKey();
    1f72:	0e 94 83 07 	call	0xf06	; 0xf06 <KeyPad_getPressedKey>
    1f76:	fe 01       	movw	r30, r28
    1f78:	eb 59       	subi	r30, 0x9B	; 155
    1f7a:	ff 4f       	sbci	r31, 0xFF	; 255
    1f7c:	80 83       	st	Z, r24
		LCD_clearScreen();
    1f7e:	0e 94 3b 0d 	call	0x1a76	; 0x1a76 <LCD_clearScreen>
		/* option(-) open door
		 * get password from user
		 * send the password by UART to control ECU
		 * receive the result from control ECU (matching or unmatching)
		 * */
		if (option == '-')
    1f82:	fe 01       	movw	r30, r28
    1f84:	eb 59       	subi	r30, 0x9B	; 155
    1f86:	ff 4f       	sbci	r31, 0xFF	; 255
    1f88:	80 81       	ld	r24, Z
    1f8a:	8d 32       	cpi	r24, 0x2D	; 45
    1f8c:	09 f0       	breq	.+2      	; 0x1f90 <main+0x318>
    1f8e:	85 c2       	rjmp	.+1290   	; 0x249a <main+0x822>
		{
			s_flag = 0;
    1f90:	fe 01       	movw	r30, r28
    1f92:	e9 59       	subi	r30, 0x99	; 153
    1f94:	ff 4f       	sbci	r31, 0xFF	; 255
    1f96:	10 82       	st	Z, r1
			no_of_tries = 0;
    1f98:	fe 01       	movw	r30, r28
    1f9a:	ea 59       	subi	r30, 0x9A	; 154
    1f9c:	ff 4f       	sbci	r31, 0xFF	; 255
    1f9e:	10 82       	st	Z, r1
    1fa0:	00 c2       	rjmp	.+1024   	; 0x23a2 <main+0x72a>
			while(!(s_flag) && no_of_tries != 3)
			{

				LCD_displayString("enter the pass: ");
    1fa2:	85 e9       	ldi	r24, 0x95	; 149
    1fa4:	90 e0       	ldi	r25, 0x00	; 0
    1fa6:	0e 94 94 0c 	call	0x1928	; 0x1928 <LCD_displayString>
    1faa:	fe 01       	movw	r30, r28
    1fac:	ef 5a       	subi	r30, 0xAF	; 175
    1fae:	ff 4f       	sbci	r31, 0xFF	; 255
    1fb0:	80 e0       	ldi	r24, 0x00	; 0
    1fb2:	90 e0       	ldi	r25, 0x00	; 0
    1fb4:	a8 e4       	ldi	r26, 0x48	; 72
    1fb6:	b2 e4       	ldi	r27, 0x42	; 66
    1fb8:	80 83       	st	Z, r24
    1fba:	91 83       	std	Z+1, r25	; 0x01
    1fbc:	a2 83       	std	Z+2, r26	; 0x02
    1fbe:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1fc0:	8e 01       	movw	r16, r28
    1fc2:	03 5b       	subi	r16, 0xB3	; 179
    1fc4:	1f 4f       	sbci	r17, 0xFF	; 255
    1fc6:	fe 01       	movw	r30, r28
    1fc8:	ef 5a       	subi	r30, 0xAF	; 175
    1fca:	ff 4f       	sbci	r31, 0xFF	; 255
    1fcc:	60 81       	ld	r22, Z
    1fce:	71 81       	ldd	r23, Z+1	; 0x01
    1fd0:	82 81       	ldd	r24, Z+2	; 0x02
    1fd2:	93 81       	ldd	r25, Z+3	; 0x03
    1fd4:	20 e0       	ldi	r18, 0x00	; 0
    1fd6:	30 e0       	ldi	r19, 0x00	; 0
    1fd8:	4a ef       	ldi	r20, 0xFA	; 250
    1fda:	54 e4       	ldi	r21, 0x44	; 68
    1fdc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1fe0:	dc 01       	movw	r26, r24
    1fe2:	cb 01       	movw	r24, r22
    1fe4:	f8 01       	movw	r30, r16
    1fe6:	80 83       	st	Z, r24
    1fe8:	91 83       	std	Z+1, r25	; 0x01
    1fea:	a2 83       	std	Z+2, r26	; 0x02
    1fec:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    1fee:	fe 01       	movw	r30, r28
    1ff0:	e3 5b       	subi	r30, 0xB3	; 179
    1ff2:	ff 4f       	sbci	r31, 0xFF	; 255
    1ff4:	60 81       	ld	r22, Z
    1ff6:	71 81       	ldd	r23, Z+1	; 0x01
    1ff8:	82 81       	ldd	r24, Z+2	; 0x02
    1ffa:	93 81       	ldd	r25, Z+3	; 0x03
    1ffc:	20 e0       	ldi	r18, 0x00	; 0
    1ffe:	30 e0       	ldi	r19, 0x00	; 0
    2000:	40 e8       	ldi	r20, 0x80	; 128
    2002:	5f e3       	ldi	r21, 0x3F	; 63
    2004:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2008:	88 23       	and	r24, r24
    200a:	44 f4       	brge	.+16     	; 0x201c <main+0x3a4>
		__ticks = 1;
    200c:	fe 01       	movw	r30, r28
    200e:	e5 5b       	subi	r30, 0xB5	; 181
    2010:	ff 4f       	sbci	r31, 0xFF	; 255
    2012:	81 e0       	ldi	r24, 0x01	; 1
    2014:	90 e0       	ldi	r25, 0x00	; 0
    2016:	91 83       	std	Z+1, r25	; 0x01
    2018:	80 83       	st	Z, r24
    201a:	64 c0       	rjmp	.+200    	; 0x20e4 <main+0x46c>
	else if (__tmp > 65535)
    201c:	fe 01       	movw	r30, r28
    201e:	e3 5b       	subi	r30, 0xB3	; 179
    2020:	ff 4f       	sbci	r31, 0xFF	; 255
    2022:	60 81       	ld	r22, Z
    2024:	71 81       	ldd	r23, Z+1	; 0x01
    2026:	82 81       	ldd	r24, Z+2	; 0x02
    2028:	93 81       	ldd	r25, Z+3	; 0x03
    202a:	20 e0       	ldi	r18, 0x00	; 0
    202c:	3f ef       	ldi	r19, 0xFF	; 255
    202e:	4f e7       	ldi	r20, 0x7F	; 127
    2030:	57 e4       	ldi	r21, 0x47	; 71
    2032:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2036:	18 16       	cp	r1, r24
    2038:	0c f0       	brlt	.+2      	; 0x203c <main+0x3c4>
    203a:	43 c0       	rjmp	.+134    	; 0x20c2 <main+0x44a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    203c:	fe 01       	movw	r30, r28
    203e:	ef 5a       	subi	r30, 0xAF	; 175
    2040:	ff 4f       	sbci	r31, 0xFF	; 255
    2042:	60 81       	ld	r22, Z
    2044:	71 81       	ldd	r23, Z+1	; 0x01
    2046:	82 81       	ldd	r24, Z+2	; 0x02
    2048:	93 81       	ldd	r25, Z+3	; 0x03
    204a:	20 e0       	ldi	r18, 0x00	; 0
    204c:	30 e0       	ldi	r19, 0x00	; 0
    204e:	40 e2       	ldi	r20, 0x20	; 32
    2050:	51 e4       	ldi	r21, 0x41	; 65
    2052:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2056:	dc 01       	movw	r26, r24
    2058:	cb 01       	movw	r24, r22
    205a:	8e 01       	movw	r16, r28
    205c:	05 5b       	subi	r16, 0xB5	; 181
    205e:	1f 4f       	sbci	r17, 0xFF	; 255
    2060:	bc 01       	movw	r22, r24
    2062:	cd 01       	movw	r24, r26
    2064:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2068:	dc 01       	movw	r26, r24
    206a:	cb 01       	movw	r24, r22
    206c:	f8 01       	movw	r30, r16
    206e:	91 83       	std	Z+1, r25	; 0x01
    2070:	80 83       	st	Z, r24
    2072:	1f c0       	rjmp	.+62     	; 0x20b2 <main+0x43a>
    2074:	fe 01       	movw	r30, r28
    2076:	e7 5b       	subi	r30, 0xB7	; 183
    2078:	ff 4f       	sbci	r31, 0xFF	; 255
    207a:	88 ec       	ldi	r24, 0xC8	; 200
    207c:	90 e0       	ldi	r25, 0x00	; 0
    207e:	91 83       	std	Z+1, r25	; 0x01
    2080:	80 83       	st	Z, r24
    2082:	fe 01       	movw	r30, r28
    2084:	e7 5b       	subi	r30, 0xB7	; 183
    2086:	ff 4f       	sbci	r31, 0xFF	; 255
    2088:	80 81       	ld	r24, Z
    208a:	91 81       	ldd	r25, Z+1	; 0x01
    208c:	01 97       	sbiw	r24, 0x01	; 1
    208e:	f1 f7       	brne	.-4      	; 0x208c <main+0x414>
    2090:	fe 01       	movw	r30, r28
    2092:	e7 5b       	subi	r30, 0xB7	; 183
    2094:	ff 4f       	sbci	r31, 0xFF	; 255
    2096:	91 83       	std	Z+1, r25	; 0x01
    2098:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    209a:	de 01       	movw	r26, r28
    209c:	a5 5b       	subi	r26, 0xB5	; 181
    209e:	bf 4f       	sbci	r27, 0xFF	; 255
    20a0:	fe 01       	movw	r30, r28
    20a2:	e5 5b       	subi	r30, 0xB5	; 181
    20a4:	ff 4f       	sbci	r31, 0xFF	; 255
    20a6:	80 81       	ld	r24, Z
    20a8:	91 81       	ldd	r25, Z+1	; 0x01
    20aa:	01 97       	sbiw	r24, 0x01	; 1
    20ac:	11 96       	adiw	r26, 0x01	; 1
    20ae:	9c 93       	st	X, r25
    20b0:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    20b2:	fe 01       	movw	r30, r28
    20b4:	e5 5b       	subi	r30, 0xB5	; 181
    20b6:	ff 4f       	sbci	r31, 0xFF	; 255
    20b8:	80 81       	ld	r24, Z
    20ba:	91 81       	ldd	r25, Z+1	; 0x01
    20bc:	00 97       	sbiw	r24, 0x00	; 0
    20be:	d1 f6       	brne	.-76     	; 0x2074 <main+0x3fc>
    20c0:	27 c0       	rjmp	.+78     	; 0x2110 <main+0x498>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    20c2:	8e 01       	movw	r16, r28
    20c4:	05 5b       	subi	r16, 0xB5	; 181
    20c6:	1f 4f       	sbci	r17, 0xFF	; 255
    20c8:	fe 01       	movw	r30, r28
    20ca:	e3 5b       	subi	r30, 0xB3	; 179
    20cc:	ff 4f       	sbci	r31, 0xFF	; 255
    20ce:	60 81       	ld	r22, Z
    20d0:	71 81       	ldd	r23, Z+1	; 0x01
    20d2:	82 81       	ldd	r24, Z+2	; 0x02
    20d4:	93 81       	ldd	r25, Z+3	; 0x03
    20d6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    20da:	dc 01       	movw	r26, r24
    20dc:	cb 01       	movw	r24, r22
    20de:	f8 01       	movw	r30, r16
    20e0:	91 83       	std	Z+1, r25	; 0x01
    20e2:	80 83       	st	Z, r24
    20e4:	de 01       	movw	r26, r28
    20e6:	a9 5b       	subi	r26, 0xB9	; 185
    20e8:	bf 4f       	sbci	r27, 0xFF	; 255
    20ea:	fe 01       	movw	r30, r28
    20ec:	e5 5b       	subi	r30, 0xB5	; 181
    20ee:	ff 4f       	sbci	r31, 0xFF	; 255
    20f0:	80 81       	ld	r24, Z
    20f2:	91 81       	ldd	r25, Z+1	; 0x01
    20f4:	8d 93       	st	X+, r24
    20f6:	9c 93       	st	X, r25
    20f8:	fe 01       	movw	r30, r28
    20fa:	e9 5b       	subi	r30, 0xB9	; 185
    20fc:	ff 4f       	sbci	r31, 0xFF	; 255
    20fe:	80 81       	ld	r24, Z
    2100:	91 81       	ldd	r25, Z+1	; 0x01
    2102:	01 97       	sbiw	r24, 0x01	; 1
    2104:	f1 f7       	brne	.-4      	; 0x2102 <main+0x48a>
    2106:	fe 01       	movw	r30, r28
    2108:	e9 5b       	subi	r30, 0xB9	; 185
    210a:	ff 4f       	sbci	r31, 0xFF	; 255
    210c:	91 83       	std	Z+1, r25	; 0x01
    210e:	80 83       	st	Z, r24
				_delay_ms(50);
				get_password(new_password);
    2110:	ce 01       	movw	r24, r28
    2112:	86 59       	subi	r24, 0x96	; 150
    2114:	9f 4f       	sbci	r25, 0xFF	; 255
    2116:	0e 94 45 0d 	call	0x1a8a	; 0x1a8a <get_password>

				uart_sendByte(READY);
    211a:	80 e1       	ldi	r24, 0x10	; 16
    211c:	0e 94 f1 06 	call	0xde2	; 0xde2 <uart_sendByte>
				uart_sendByte('-');
    2120:	8d e2       	ldi	r24, 0x2D	; 45
    2122:	0e 94 f1 06 	call	0xde2	; 0xde2 <uart_sendByte>
				for (uint8 i = 0; i < PASSWORD_LEN; i++)
    2126:	fe 01       	movw	r30, r28
    2128:	ec 59       	subi	r30, 0x9C	; 156
    212a:	ff 4f       	sbci	r31, 0xFF	; 255
    212c:	10 82       	st	Z, r1
    212e:	1c c0       	rjmp	.+56     	; 0x2168 <main+0x4f0>
				{
					while (uart_recieveByte() != READY){};
    2130:	0e 94 08 07 	call	0xe10	; 0xe10 <uart_recieveByte>
    2134:	80 31       	cpi	r24, 0x10	; 16
    2136:	e1 f7       	brne	.-8      	; 0x2130 <main+0x4b8>
					uart_sendByte(new_password[i]);
    2138:	fe 01       	movw	r30, r28
    213a:	ec 59       	subi	r30, 0x9C	; 156
    213c:	ff 4f       	sbci	r31, 0xFF	; 255
    213e:	80 81       	ld	r24, Z
    2140:	28 2f       	mov	r18, r24
    2142:	30 e0       	ldi	r19, 0x00	; 0
    2144:	ce 01       	movw	r24, r28
    2146:	86 59       	subi	r24, 0x96	; 150
    2148:	9f 4f       	sbci	r25, 0xFF	; 255
    214a:	fc 01       	movw	r30, r24
    214c:	e2 0f       	add	r30, r18
    214e:	f3 1f       	adc	r31, r19
    2150:	80 81       	ld	r24, Z
    2152:	0e 94 f1 06 	call	0xde2	; 0xde2 <uart_sendByte>
				_delay_ms(50);
				get_password(new_password);

				uart_sendByte(READY);
				uart_sendByte('-');
				for (uint8 i = 0; i < PASSWORD_LEN; i++)
    2156:	de 01       	movw	r26, r28
    2158:	ac 59       	subi	r26, 0x9C	; 156
    215a:	bf 4f       	sbci	r27, 0xFF	; 255
    215c:	fe 01       	movw	r30, r28
    215e:	ec 59       	subi	r30, 0x9C	; 156
    2160:	ff 4f       	sbci	r31, 0xFF	; 255
    2162:	80 81       	ld	r24, Z
    2164:	8f 5f       	subi	r24, 0xFF	; 255
    2166:	8c 93       	st	X, r24
    2168:	fe 01       	movw	r30, r28
    216a:	ec 59       	subi	r30, 0x9C	; 156
    216c:	ff 4f       	sbci	r31, 0xFF	; 255
    216e:	80 81       	ld	r24, Z
    2170:	85 30       	cpi	r24, 0x05	; 5
    2172:	f0 f2       	brcs	.-68     	; 0x2130 <main+0x4b8>
				{
					while (uart_recieveByte() != READY){};
					uart_sendByte(new_password[i]);
				}

				uart_sendByte(READY);
    2174:	80 e1       	ldi	r24, 0x10	; 16
    2176:	0e 94 f1 06 	call	0xde2	; 0xde2 <uart_sendByte>
				/* matching	*/
				if (uart_recieveByte() == MATCHING)
    217a:	0e 94 08 07 	call	0xe10	; 0xe10 <uart_recieveByte>
    217e:	80 32       	cpi	r24, 0x20	; 32
    2180:	09 f0       	breq	.+2      	; 0x2184 <main+0x50c>
    2182:	77 c0       	rjmp	.+238    	; 0x2272 <main+0x5fa>
				{
					LCD_displayString("door unlocking");
    2184:	86 ea       	ldi	r24, 0xA6	; 166
    2186:	90 e0       	ldi	r25, 0x00	; 0
    2188:	0e 94 94 0c 	call	0x1928	; 0x1928 <LCD_displayString>
					g_clear = 1;
    218c:	81 e0       	ldi	r24, 0x01	; 1
    218e:	80 93 fa 00 	sts	0x00FA, r24
					Timer1_set_CallBack(LCD_clear);
    2192:	86 e2       	ldi	r24, 0x26	; 38
    2194:	9e e0       	ldi	r25, 0x0E	; 14
    2196:	0e 94 1d 06 	call	0xc3a	; 0xc3a <Timer1_set_CallBack>
					//for 15 sec
					Timer1_config timer_config = {F_CPU_1024, 0, 117187};
    219a:	ce 01       	movw	r24, r28
    219c:	87 58       	subi	r24, 0x87	; 135
    219e:	9f 4f       	sbci	r25, 0xFF	; 255
    21a0:	c3 57       	subi	r28, 0x73	; 115
    21a2:	df 4f       	sbci	r29, 0xFF	; 255
    21a4:	99 83       	std	Y+1, r25	; 0x01
    21a6:	88 83       	st	Y, r24
    21a8:	cd 58       	subi	r28, 0x8D	; 141
    21aa:	d0 40       	sbci	r29, 0x00	; 0
    21ac:	8e ee       	ldi	r24, 0xEE	; 238
    21ae:	90 e0       	ldi	r25, 0x00	; 0
    21b0:	c1 57       	subi	r28, 0x71	; 113
    21b2:	df 4f       	sbci	r29, 0xFF	; 255
    21b4:	99 83       	std	Y+1, r25	; 0x01
    21b6:	88 83       	st	Y, r24
    21b8:	cf 58       	subi	r28, 0x8F	; 143
    21ba:	d0 40       	sbci	r29, 0x00	; 0
    21bc:	95 e0       	ldi	r25, 0x05	; 5
    21be:	cf 56       	subi	r28, 0x6F	; 111
    21c0:	df 4f       	sbci	r29, 0xFF	; 255
    21c2:	98 83       	st	Y, r25
    21c4:	c1 59       	subi	r28, 0x91	; 145
    21c6:	d0 40       	sbci	r29, 0x00	; 0
    21c8:	c1 57       	subi	r28, 0x71	; 113
    21ca:	df 4f       	sbci	r29, 0xFF	; 255
    21cc:	e8 81       	ld	r30, Y
    21ce:	f9 81       	ldd	r31, Y+1	; 0x01
    21d0:	cf 58       	subi	r28, 0x8F	; 143
    21d2:	d0 40       	sbci	r29, 0x00	; 0
    21d4:	00 80       	ld	r0, Z
    21d6:	c1 57       	subi	r28, 0x71	; 113
    21d8:	df 4f       	sbci	r29, 0xFF	; 255
    21da:	88 81       	ld	r24, Y
    21dc:	99 81       	ldd	r25, Y+1	; 0x01
    21de:	cf 58       	subi	r28, 0x8F	; 143
    21e0:	d0 40       	sbci	r29, 0x00	; 0
    21e2:	01 96       	adiw	r24, 0x01	; 1
    21e4:	c1 57       	subi	r28, 0x71	; 113
    21e6:	df 4f       	sbci	r29, 0xFF	; 255
    21e8:	99 83       	std	Y+1, r25	; 0x01
    21ea:	88 83       	st	Y, r24
    21ec:	cf 58       	subi	r28, 0x8F	; 143
    21ee:	d0 40       	sbci	r29, 0x00	; 0
    21f0:	c3 57       	subi	r28, 0x73	; 115
    21f2:	df 4f       	sbci	r29, 0xFF	; 255
    21f4:	e8 81       	ld	r30, Y
    21f6:	f9 81       	ldd	r31, Y+1	; 0x01
    21f8:	cd 58       	subi	r28, 0x8D	; 141
    21fa:	d0 40       	sbci	r29, 0x00	; 0
    21fc:	00 82       	st	Z, r0
    21fe:	c3 57       	subi	r28, 0x73	; 115
    2200:	df 4f       	sbci	r29, 0xFF	; 255
    2202:	88 81       	ld	r24, Y
    2204:	99 81       	ldd	r25, Y+1	; 0x01
    2206:	cd 58       	subi	r28, 0x8D	; 141
    2208:	d0 40       	sbci	r29, 0x00	; 0
    220a:	01 96       	adiw	r24, 0x01	; 1
    220c:	c3 57       	subi	r28, 0x73	; 115
    220e:	df 4f       	sbci	r29, 0xFF	; 255
    2210:	99 83       	std	Y+1, r25	; 0x01
    2212:	88 83       	st	Y, r24
    2214:	cd 58       	subi	r28, 0x8D	; 141
    2216:	d0 40       	sbci	r29, 0x00	; 0
    2218:	cf 56       	subi	r28, 0x6F	; 111
    221a:	df 4f       	sbci	r29, 0xFF	; 255
    221c:	98 81       	ld	r25, Y
    221e:	c1 59       	subi	r28, 0x91	; 145
    2220:	d0 40       	sbci	r29, 0x00	; 0
    2222:	91 50       	subi	r25, 0x01	; 1
    2224:	cf 56       	subi	r28, 0x6F	; 111
    2226:	df 4f       	sbci	r29, 0xFF	; 255
    2228:	98 83       	st	Y, r25
    222a:	c1 59       	subi	r28, 0x91	; 145
    222c:	d0 40       	sbci	r29, 0x00	; 0
    222e:	cf 56       	subi	r28, 0x6F	; 111
    2230:	df 4f       	sbci	r29, 0xFF	; 255
    2232:	e8 81       	ld	r30, Y
    2234:	c1 59       	subi	r28, 0x91	; 145
    2236:	d0 40       	sbci	r29, 0x00	; 0
    2238:	ee 23       	and	r30, r30
    223a:	31 f6       	brne	.-116    	; 0x21c8 <main+0x550>
					Timer1_init(&timer_config);
    223c:	ce 01       	movw	r24, r28
    223e:	87 58       	subi	r24, 0x87	; 135
    2240:	9f 4f       	sbci	r25, 0xFF	; 255
    2242:	0e 94 d6 05 	call	0xbac	; 0xbac <Timer1_init>
					while(g_clear == 1) {};
    2246:	80 91 fa 00 	lds	r24, 0x00FA
    224a:	81 30       	cpi	r24, 0x01	; 1
    224c:	e1 f3       	breq	.-8      	; 0x2246 <main+0x5ce>
					LCD_displayString("door locking");
    224e:	85 eb       	ldi	r24, 0xB5	; 181
    2250:	90 e0       	ldi	r25, 0x00	; 0
    2252:	0e 94 94 0c 	call	0x1928	; 0x1928 <LCD_displayString>
					g_clear = 1;
    2256:	81 e0       	ldi	r24, 0x01	; 1
    2258:	80 93 fa 00 	sts	0x00FA, r24
					Timer1_init(&timer_config);
    225c:	ce 01       	movw	r24, r28
    225e:	87 58       	subi	r24, 0x87	; 135
    2260:	9f 4f       	sbci	r25, 0xFF	; 255
    2262:	0e 94 d6 05 	call	0xbac	; 0xbac <Timer1_init>
					s_flag = 1;
    2266:	fe 01       	movw	r30, r28
    2268:	e9 59       	subi	r30, 0x99	; 153
    226a:	ff 4f       	sbci	r31, 0xFF	; 255
    226c:	81 e0       	ldi	r24, 0x01	; 1
    226e:	80 83       	st	Z, r24
    2270:	98 c0       	rjmp	.+304    	; 0x23a2 <main+0x72a>

				}
				// unmatching
				else
				{
					LCD_displayString("unmatching");
    2272:	82 ec       	ldi	r24, 0xC2	; 194
    2274:	90 e0       	ldi	r25, 0x00	; 0
    2276:	0e 94 94 0c 	call	0x1928	; 0x1928 <LCD_displayString>
    227a:	fe 01       	movw	r30, r28
    227c:	ed 5b       	subi	r30, 0xBD	; 189
    227e:	ff 4f       	sbci	r31, 0xFF	; 255
    2280:	80 e0       	ldi	r24, 0x00	; 0
    2282:	90 e0       	ldi	r25, 0x00	; 0
    2284:	a8 ec       	ldi	r26, 0xC8	; 200
    2286:	b2 e4       	ldi	r27, 0x42	; 66
    2288:	80 83       	st	Z, r24
    228a:	91 83       	std	Z+1, r25	; 0x01
    228c:	a2 83       	std	Z+2, r26	; 0x02
    228e:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2290:	8e 01       	movw	r16, r28
    2292:	01 5c       	subi	r16, 0xC1	; 193
    2294:	1f 4f       	sbci	r17, 0xFF	; 255
    2296:	fe 01       	movw	r30, r28
    2298:	ed 5b       	subi	r30, 0xBD	; 189
    229a:	ff 4f       	sbci	r31, 0xFF	; 255
    229c:	60 81       	ld	r22, Z
    229e:	71 81       	ldd	r23, Z+1	; 0x01
    22a0:	82 81       	ldd	r24, Z+2	; 0x02
    22a2:	93 81       	ldd	r25, Z+3	; 0x03
    22a4:	20 e0       	ldi	r18, 0x00	; 0
    22a6:	30 e0       	ldi	r19, 0x00	; 0
    22a8:	4a ef       	ldi	r20, 0xFA	; 250
    22aa:	54 e4       	ldi	r21, 0x44	; 68
    22ac:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    22b0:	dc 01       	movw	r26, r24
    22b2:	cb 01       	movw	r24, r22
    22b4:	f8 01       	movw	r30, r16
    22b6:	80 83       	st	Z, r24
    22b8:	91 83       	std	Z+1, r25	; 0x01
    22ba:	a2 83       	std	Z+2, r26	; 0x02
    22bc:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    22be:	fe 01       	movw	r30, r28
    22c0:	ff 96       	adiw	r30, 0x3f	; 63
    22c2:	60 81       	ld	r22, Z
    22c4:	71 81       	ldd	r23, Z+1	; 0x01
    22c6:	82 81       	ldd	r24, Z+2	; 0x02
    22c8:	93 81       	ldd	r25, Z+3	; 0x03
    22ca:	20 e0       	ldi	r18, 0x00	; 0
    22cc:	30 e0       	ldi	r19, 0x00	; 0
    22ce:	40 e8       	ldi	r20, 0x80	; 128
    22d0:	5f e3       	ldi	r21, 0x3F	; 63
    22d2:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    22d6:	88 23       	and	r24, r24
    22d8:	2c f4       	brge	.+10     	; 0x22e4 <main+0x66c>
		__ticks = 1;
    22da:	81 e0       	ldi	r24, 0x01	; 1
    22dc:	90 e0       	ldi	r25, 0x00	; 0
    22de:	9e af       	std	Y+62, r25	; 0x3e
    22e0:	8d af       	std	Y+61, r24	; 0x3d
    22e2:	46 c0       	rjmp	.+140    	; 0x2370 <main+0x6f8>
	else if (__tmp > 65535)
    22e4:	fe 01       	movw	r30, r28
    22e6:	ff 96       	adiw	r30, 0x3f	; 63
    22e8:	60 81       	ld	r22, Z
    22ea:	71 81       	ldd	r23, Z+1	; 0x01
    22ec:	82 81       	ldd	r24, Z+2	; 0x02
    22ee:	93 81       	ldd	r25, Z+3	; 0x03
    22f0:	20 e0       	ldi	r18, 0x00	; 0
    22f2:	3f ef       	ldi	r19, 0xFF	; 255
    22f4:	4f e7       	ldi	r20, 0x7F	; 127
    22f6:	57 e4       	ldi	r21, 0x47	; 71
    22f8:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    22fc:	18 16       	cp	r1, r24
    22fe:	64 f5       	brge	.+88     	; 0x2358 <main+0x6e0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2300:	fe 01       	movw	r30, r28
    2302:	ed 5b       	subi	r30, 0xBD	; 189
    2304:	ff 4f       	sbci	r31, 0xFF	; 255
    2306:	60 81       	ld	r22, Z
    2308:	71 81       	ldd	r23, Z+1	; 0x01
    230a:	82 81       	ldd	r24, Z+2	; 0x02
    230c:	93 81       	ldd	r25, Z+3	; 0x03
    230e:	20 e0       	ldi	r18, 0x00	; 0
    2310:	30 e0       	ldi	r19, 0x00	; 0
    2312:	40 e2       	ldi	r20, 0x20	; 32
    2314:	51 e4       	ldi	r21, 0x41	; 65
    2316:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    231a:	dc 01       	movw	r26, r24
    231c:	cb 01       	movw	r24, r22
    231e:	bc 01       	movw	r22, r24
    2320:	cd 01       	movw	r24, r26
    2322:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2326:	dc 01       	movw	r26, r24
    2328:	cb 01       	movw	r24, r22
    232a:	9e af       	std	Y+62, r25	; 0x3e
    232c:	8d af       	std	Y+61, r24	; 0x3d
    232e:	0f c0       	rjmp	.+30     	; 0x234e <main+0x6d6>
    2330:	88 ec       	ldi	r24, 0xC8	; 200
    2332:	90 e0       	ldi	r25, 0x00	; 0
    2334:	9c af       	std	Y+60, r25	; 0x3c
    2336:	8b af       	std	Y+59, r24	; 0x3b
    2338:	8b ad       	ldd	r24, Y+59	; 0x3b
    233a:	9c ad       	ldd	r25, Y+60	; 0x3c
    233c:	01 97       	sbiw	r24, 0x01	; 1
    233e:	f1 f7       	brne	.-4      	; 0x233c <main+0x6c4>
    2340:	9c af       	std	Y+60, r25	; 0x3c
    2342:	8b af       	std	Y+59, r24	; 0x3b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2344:	8d ad       	ldd	r24, Y+61	; 0x3d
    2346:	9e ad       	ldd	r25, Y+62	; 0x3e
    2348:	01 97       	sbiw	r24, 0x01	; 1
    234a:	9e af       	std	Y+62, r25	; 0x3e
    234c:	8d af       	std	Y+61, r24	; 0x3d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    234e:	8d ad       	ldd	r24, Y+61	; 0x3d
    2350:	9e ad       	ldd	r25, Y+62	; 0x3e
    2352:	00 97       	sbiw	r24, 0x00	; 0
    2354:	69 f7       	brne	.-38     	; 0x2330 <main+0x6b8>
    2356:	16 c0       	rjmp	.+44     	; 0x2384 <main+0x70c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2358:	fe 01       	movw	r30, r28
    235a:	ff 96       	adiw	r30, 0x3f	; 63
    235c:	60 81       	ld	r22, Z
    235e:	71 81       	ldd	r23, Z+1	; 0x01
    2360:	82 81       	ldd	r24, Z+2	; 0x02
    2362:	93 81       	ldd	r25, Z+3	; 0x03
    2364:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2368:	dc 01       	movw	r26, r24
    236a:	cb 01       	movw	r24, r22
    236c:	9e af       	std	Y+62, r25	; 0x3e
    236e:	8d af       	std	Y+61, r24	; 0x3d
    2370:	8d ad       	ldd	r24, Y+61	; 0x3d
    2372:	9e ad       	ldd	r25, Y+62	; 0x3e
    2374:	9a af       	std	Y+58, r25	; 0x3a
    2376:	89 af       	std	Y+57, r24	; 0x39
    2378:	89 ad       	ldd	r24, Y+57	; 0x39
    237a:	9a ad       	ldd	r25, Y+58	; 0x3a
    237c:	01 97       	sbiw	r24, 0x01	; 1
    237e:	f1 f7       	brne	.-4      	; 0x237c <main+0x704>
    2380:	9a af       	std	Y+58, r25	; 0x3a
    2382:	89 af       	std	Y+57, r24	; 0x39
					_delay_ms(100);
					LCD_clearScreen();
    2384:	0e 94 3b 0d 	call	0x1a76	; 0x1a76 <LCD_clearScreen>
					s_flag= 0; // return success to 0 if wrong password
    2388:	fe 01       	movw	r30, r28
    238a:	e9 59       	subi	r30, 0x99	; 153
    238c:	ff 4f       	sbci	r31, 0xFF	; 255
    238e:	10 82       	st	Z, r1
					no_of_tries ++;
    2390:	de 01       	movw	r26, r28
    2392:	aa 59       	subi	r26, 0x9A	; 154
    2394:	bf 4f       	sbci	r27, 0xFF	; 255
    2396:	fe 01       	movw	r30, r28
    2398:	ea 59       	subi	r30, 0x9A	; 154
    239a:	ff 4f       	sbci	r31, 0xFF	; 255
    239c:	80 81       	ld	r24, Z
    239e:	8f 5f       	subi	r24, 0xFF	; 255
    23a0:	8c 93       	st	X, r24
		 * */
		if (option == '-')
		{
			s_flag = 0;
			no_of_tries = 0;
			while(!(s_flag) && no_of_tries != 3)
    23a2:	fe 01       	movw	r30, r28
    23a4:	e9 59       	subi	r30, 0x99	; 153
    23a6:	ff 4f       	sbci	r31, 0xFF	; 255
    23a8:	80 81       	ld	r24, Z
    23aa:	88 23       	and	r24, r24
    23ac:	39 f4       	brne	.+14     	; 0x23bc <main+0x744>
    23ae:	fe 01       	movw	r30, r28
    23b0:	ea 59       	subi	r30, 0x9A	; 154
    23b2:	ff 4f       	sbci	r31, 0xFF	; 255
    23b4:	80 81       	ld	r24, Z
    23b6:	83 30       	cpi	r24, 0x03	; 3
    23b8:	09 f0       	breq	.+2      	; 0x23bc <main+0x744>
    23ba:	f3 cd       	rjmp	.-1050   	; 0x1fa2 <main+0x32a>
			};
            /* if error tries exceed 3 he is thief
             * print Thief on lcd
             * and send it to the control ECU to set buzzer on
             * and wait for 1 min*/
			if (no_of_tries == 3)
    23bc:	fe 01       	movw	r30, r28
    23be:	ea 59       	subi	r30, 0x9A	; 154
    23c0:	ff 4f       	sbci	r31, 0xFF	; 255
    23c2:	80 81       	ld	r24, Z
    23c4:	83 30       	cpi	r24, 0x03	; 3
    23c6:	09 f0       	breq	.+2      	; 0x23ca <main+0x752>
    23c8:	cc cd       	rjmp	.-1128   	; 0x1f62 <main+0x2ea>
			{
				Timer1_set_CallBack(LCD_clear);
    23ca:	86 e2       	ldi	r24, 0x26	; 38
    23cc:	9e e0       	ldi	r25, 0x0E	; 14
    23ce:	0e 94 1d 06 	call	0xc3a	; 0xc3a <Timer1_set_CallBack>
				LCD_displayString("THIEF");
    23d2:	8d ec       	ldi	r24, 0xCD	; 205
    23d4:	90 e0       	ldi	r25, 0x00	; 0
    23d6:	0e 94 94 0c 	call	0x1928	; 0x1928 <LCD_displayString>
				uart_sendByte(READY);
    23da:	80 e1       	ldi	r24, 0x10	; 16
    23dc:	0e 94 f1 06 	call	0xde2	; 0xde2 <uart_sendByte>
				uart_sendByte(THEIF);
    23e0:	80 e4       	ldi	r24, 0x40	; 64
    23e2:	0e 94 f1 06 	call	0xde2	; 0xde2 <uart_sendByte>
				g_clear = 1;
    23e6:	81 e0       	ldi	r24, 0x01	; 1
    23e8:	80 93 fa 00 	sts	0x00FA, r24
				//8 sec
				Timer1_config timer_config = {F_CPU_1024, 0, 65535};
    23ec:	ce 01       	movw	r24, r28
    23ee:	82 58       	subi	r24, 0x82	; 130
    23f0:	9f 4f       	sbci	r25, 0xFF	; 255
    23f2:	ce 56       	subi	r28, 0x6E	; 110
    23f4:	df 4f       	sbci	r29, 0xFF	; 255
    23f6:	99 83       	std	Y+1, r25	; 0x01
    23f8:	88 83       	st	Y, r24
    23fa:	c2 59       	subi	r28, 0x92	; 146
    23fc:	d0 40       	sbci	r29, 0x00	; 0
    23fe:	89 ee       	ldi	r24, 0xE9	; 233
    2400:	90 e0       	ldi	r25, 0x00	; 0
    2402:	cc 56       	subi	r28, 0x6C	; 108
    2404:	df 4f       	sbci	r29, 0xFF	; 255
    2406:	99 83       	std	Y+1, r25	; 0x01
    2408:	88 83       	st	Y, r24
    240a:	c4 59       	subi	r28, 0x94	; 148
    240c:	d0 40       	sbci	r29, 0x00	; 0
    240e:	95 e0       	ldi	r25, 0x05	; 5
    2410:	ca 56       	subi	r28, 0x6A	; 106
    2412:	df 4f       	sbci	r29, 0xFF	; 255
    2414:	98 83       	st	Y, r25
    2416:	c6 59       	subi	r28, 0x96	; 150
    2418:	d0 40       	sbci	r29, 0x00	; 0
    241a:	cc 56       	subi	r28, 0x6C	; 108
    241c:	df 4f       	sbci	r29, 0xFF	; 255
    241e:	e8 81       	ld	r30, Y
    2420:	f9 81       	ldd	r31, Y+1	; 0x01
    2422:	c4 59       	subi	r28, 0x94	; 148
    2424:	d0 40       	sbci	r29, 0x00	; 0
    2426:	00 80       	ld	r0, Z
    2428:	cc 56       	subi	r28, 0x6C	; 108
    242a:	df 4f       	sbci	r29, 0xFF	; 255
    242c:	88 81       	ld	r24, Y
    242e:	99 81       	ldd	r25, Y+1	; 0x01
    2430:	c4 59       	subi	r28, 0x94	; 148
    2432:	d0 40       	sbci	r29, 0x00	; 0
    2434:	01 96       	adiw	r24, 0x01	; 1
    2436:	cc 56       	subi	r28, 0x6C	; 108
    2438:	df 4f       	sbci	r29, 0xFF	; 255
    243a:	99 83       	std	Y+1, r25	; 0x01
    243c:	88 83       	st	Y, r24
    243e:	c4 59       	subi	r28, 0x94	; 148
    2440:	d0 40       	sbci	r29, 0x00	; 0
    2442:	ce 56       	subi	r28, 0x6E	; 110
    2444:	df 4f       	sbci	r29, 0xFF	; 255
    2446:	e8 81       	ld	r30, Y
    2448:	f9 81       	ldd	r31, Y+1	; 0x01
    244a:	c2 59       	subi	r28, 0x92	; 146
    244c:	d0 40       	sbci	r29, 0x00	; 0
    244e:	00 82       	st	Z, r0
    2450:	ce 56       	subi	r28, 0x6E	; 110
    2452:	df 4f       	sbci	r29, 0xFF	; 255
    2454:	88 81       	ld	r24, Y
    2456:	99 81       	ldd	r25, Y+1	; 0x01
    2458:	c2 59       	subi	r28, 0x92	; 146
    245a:	d0 40       	sbci	r29, 0x00	; 0
    245c:	01 96       	adiw	r24, 0x01	; 1
    245e:	ce 56       	subi	r28, 0x6E	; 110
    2460:	df 4f       	sbci	r29, 0xFF	; 255
    2462:	99 83       	std	Y+1, r25	; 0x01
    2464:	88 83       	st	Y, r24
    2466:	c2 59       	subi	r28, 0x92	; 146
    2468:	d0 40       	sbci	r29, 0x00	; 0
    246a:	ca 56       	subi	r28, 0x6A	; 106
    246c:	df 4f       	sbci	r29, 0xFF	; 255
    246e:	98 81       	ld	r25, Y
    2470:	c6 59       	subi	r28, 0x96	; 150
    2472:	d0 40       	sbci	r29, 0x00	; 0
    2474:	91 50       	subi	r25, 0x01	; 1
    2476:	ca 56       	subi	r28, 0x6A	; 106
    2478:	df 4f       	sbci	r29, 0xFF	; 255
    247a:	98 83       	st	Y, r25
    247c:	c6 59       	subi	r28, 0x96	; 150
    247e:	d0 40       	sbci	r29, 0x00	; 0
    2480:	ca 56       	subi	r28, 0x6A	; 106
    2482:	df 4f       	sbci	r29, 0xFF	; 255
    2484:	e8 81       	ld	r30, Y
    2486:	c6 59       	subi	r28, 0x96	; 150
    2488:	d0 40       	sbci	r29, 0x00	; 0
    248a:	ee 23       	and	r30, r30
    248c:	31 f6       	brne	.-116    	; 0x241a <main+0x7a2>
				Timer1_init(&timer_config);
    248e:	ce 01       	movw	r24, r28
    2490:	82 58       	subi	r24, 0x82	; 130
    2492:	9f 4f       	sbci	r25, 0xFF	; 255
    2494:	0e 94 d6 05 	call	0xbac	; 0xbac <Timer1_init>
    2498:	64 cd       	rjmp	.-1336   	; 0x1f62 <main+0x2ea>
		/* option(+) change password
		 * get password from user
		 * send the password by UART
		 * receive the result from control ECU (matching or unmatching)
		 * */
		else if (option == '+')
    249a:	fe 01       	movw	r30, r28
    249c:	eb 59       	subi	r30, 0x9B	; 155
    249e:	ff 4f       	sbci	r31, 0xFF	; 255
    24a0:	80 81       	ld	r24, Z
    24a2:	8b 32       	cpi	r24, 0x2B	; 43
    24a4:	09 f0       	breq	.+2      	; 0x24a8 <main+0x830>
    24a6:	5d cd       	rjmp	.-1350   	; 0x1f62 <main+0x2ea>
		{
			s_flag = 0;
    24a8:	fe 01       	movw	r30, r28
    24aa:	e9 59       	subi	r30, 0x99	; 153
    24ac:	ff 4f       	sbci	r31, 0xFF	; 255
    24ae:	10 82       	st	Z, r1
			no_of_tries = 0;
    24b0:	fe 01       	movw	r30, r28
    24b2:	ea 59       	subi	r30, 0x9A	; 154
    24b4:	ff 4f       	sbci	r31, 0xFF	; 255
    24b6:	10 82       	st	Z, r1
    24b8:	7b c2       	rjmp	.+1270   	; 0x29b0 <main+0xd38>
			while(!(s_flag) && no_of_tries != 3)
			{
				LCD_displayString("enter the pass: ");
    24ba:	85 e9       	ldi	r24, 0x95	; 149
    24bc:	90 e0       	ldi	r25, 0x00	; 0
    24be:	0e 94 94 0c 	call	0x1928	; 0x1928 <LCD_displayString>
    24c2:	80 e0       	ldi	r24, 0x00	; 0
    24c4:	90 e0       	ldi	r25, 0x00	; 0
    24c6:	a8 e4       	ldi	r26, 0x48	; 72
    24c8:	b2 e4       	ldi	r27, 0x42	; 66
    24ca:	8d ab       	std	Y+53, r24	; 0x35
    24cc:	9e ab       	std	Y+54, r25	; 0x36
    24ce:	af ab       	std	Y+55, r26	; 0x37
    24d0:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    24d2:	6d a9       	ldd	r22, Y+53	; 0x35
    24d4:	7e a9       	ldd	r23, Y+54	; 0x36
    24d6:	8f a9       	ldd	r24, Y+55	; 0x37
    24d8:	98 ad       	ldd	r25, Y+56	; 0x38
    24da:	20 e0       	ldi	r18, 0x00	; 0
    24dc:	30 e0       	ldi	r19, 0x00	; 0
    24de:	4a ef       	ldi	r20, 0xFA	; 250
    24e0:	54 e4       	ldi	r21, 0x44	; 68
    24e2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    24e6:	dc 01       	movw	r26, r24
    24e8:	cb 01       	movw	r24, r22
    24ea:	89 ab       	std	Y+49, r24	; 0x31
    24ec:	9a ab       	std	Y+50, r25	; 0x32
    24ee:	ab ab       	std	Y+51, r26	; 0x33
    24f0:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    24f2:	69 a9       	ldd	r22, Y+49	; 0x31
    24f4:	7a a9       	ldd	r23, Y+50	; 0x32
    24f6:	8b a9       	ldd	r24, Y+51	; 0x33
    24f8:	9c a9       	ldd	r25, Y+52	; 0x34
    24fa:	20 e0       	ldi	r18, 0x00	; 0
    24fc:	30 e0       	ldi	r19, 0x00	; 0
    24fe:	40 e8       	ldi	r20, 0x80	; 128
    2500:	5f e3       	ldi	r21, 0x3F	; 63
    2502:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2506:	88 23       	and	r24, r24
    2508:	2c f4       	brge	.+10     	; 0x2514 <main+0x89c>
		__ticks = 1;
    250a:	81 e0       	ldi	r24, 0x01	; 1
    250c:	90 e0       	ldi	r25, 0x00	; 0
    250e:	98 ab       	std	Y+48, r25	; 0x30
    2510:	8f a7       	std	Y+47, r24	; 0x2f
    2512:	3f c0       	rjmp	.+126    	; 0x2592 <main+0x91a>
	else if (__tmp > 65535)
    2514:	69 a9       	ldd	r22, Y+49	; 0x31
    2516:	7a a9       	ldd	r23, Y+50	; 0x32
    2518:	8b a9       	ldd	r24, Y+51	; 0x33
    251a:	9c a9       	ldd	r25, Y+52	; 0x34
    251c:	20 e0       	ldi	r18, 0x00	; 0
    251e:	3f ef       	ldi	r19, 0xFF	; 255
    2520:	4f e7       	ldi	r20, 0x7F	; 127
    2522:	57 e4       	ldi	r21, 0x47	; 71
    2524:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2528:	18 16       	cp	r1, r24
    252a:	4c f5       	brge	.+82     	; 0x257e <main+0x906>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    252c:	6d a9       	ldd	r22, Y+53	; 0x35
    252e:	7e a9       	ldd	r23, Y+54	; 0x36
    2530:	8f a9       	ldd	r24, Y+55	; 0x37
    2532:	98 ad       	ldd	r25, Y+56	; 0x38
    2534:	20 e0       	ldi	r18, 0x00	; 0
    2536:	30 e0       	ldi	r19, 0x00	; 0
    2538:	40 e2       	ldi	r20, 0x20	; 32
    253a:	51 e4       	ldi	r21, 0x41	; 65
    253c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2540:	dc 01       	movw	r26, r24
    2542:	cb 01       	movw	r24, r22
    2544:	bc 01       	movw	r22, r24
    2546:	cd 01       	movw	r24, r26
    2548:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    254c:	dc 01       	movw	r26, r24
    254e:	cb 01       	movw	r24, r22
    2550:	98 ab       	std	Y+48, r25	; 0x30
    2552:	8f a7       	std	Y+47, r24	; 0x2f
    2554:	0f c0       	rjmp	.+30     	; 0x2574 <main+0x8fc>
    2556:	88 ec       	ldi	r24, 0xC8	; 200
    2558:	90 e0       	ldi	r25, 0x00	; 0
    255a:	9e a7       	std	Y+46, r25	; 0x2e
    255c:	8d a7       	std	Y+45, r24	; 0x2d
    255e:	8d a5       	ldd	r24, Y+45	; 0x2d
    2560:	9e a5       	ldd	r25, Y+46	; 0x2e
    2562:	01 97       	sbiw	r24, 0x01	; 1
    2564:	f1 f7       	brne	.-4      	; 0x2562 <main+0x8ea>
    2566:	9e a7       	std	Y+46, r25	; 0x2e
    2568:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    256a:	8f a5       	ldd	r24, Y+47	; 0x2f
    256c:	98 a9       	ldd	r25, Y+48	; 0x30
    256e:	01 97       	sbiw	r24, 0x01	; 1
    2570:	98 ab       	std	Y+48, r25	; 0x30
    2572:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2574:	8f a5       	ldd	r24, Y+47	; 0x2f
    2576:	98 a9       	ldd	r25, Y+48	; 0x30
    2578:	00 97       	sbiw	r24, 0x00	; 0
    257a:	69 f7       	brne	.-38     	; 0x2556 <main+0x8de>
    257c:	14 c0       	rjmp	.+40     	; 0x25a6 <main+0x92e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    257e:	69 a9       	ldd	r22, Y+49	; 0x31
    2580:	7a a9       	ldd	r23, Y+50	; 0x32
    2582:	8b a9       	ldd	r24, Y+51	; 0x33
    2584:	9c a9       	ldd	r25, Y+52	; 0x34
    2586:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    258a:	dc 01       	movw	r26, r24
    258c:	cb 01       	movw	r24, r22
    258e:	98 ab       	std	Y+48, r25	; 0x30
    2590:	8f a7       	std	Y+47, r24	; 0x2f
    2592:	8f a5       	ldd	r24, Y+47	; 0x2f
    2594:	98 a9       	ldd	r25, Y+48	; 0x30
    2596:	9c a7       	std	Y+44, r25	; 0x2c
    2598:	8b a7       	std	Y+43, r24	; 0x2b
    259a:	8b a5       	ldd	r24, Y+43	; 0x2b
    259c:	9c a5       	ldd	r25, Y+44	; 0x2c
    259e:	01 97       	sbiw	r24, 0x01	; 1
    25a0:	f1 f7       	brne	.-4      	; 0x259e <main+0x926>
    25a2:	9c a7       	std	Y+44, r25	; 0x2c
    25a4:	8b a7       	std	Y+43, r24	; 0x2b
				_delay_ms(50);
				get_password(new_password);
    25a6:	ce 01       	movw	r24, r28
    25a8:	86 59       	subi	r24, 0x96	; 150
    25aa:	9f 4f       	sbci	r25, 0xFF	; 255
    25ac:	0e 94 45 0d 	call	0x1a8a	; 0x1a8a <get_password>
				uart_sendByte(READY);
    25b0:	80 e1       	ldi	r24, 0x10	; 16
    25b2:	0e 94 f1 06 	call	0xde2	; 0xde2 <uart_sendByte>
				uart_sendByte('+');
    25b6:	8b e2       	ldi	r24, 0x2B	; 43
    25b8:	0e 94 f1 06 	call	0xde2	; 0xde2 <uart_sendByte>
				for (uint8 i = 0; i < PASSWORD_LEN; i++)
    25bc:	fe 01       	movw	r30, r28
    25be:	ed 59       	subi	r30, 0x9D	; 157
    25c0:	ff 4f       	sbci	r31, 0xFF	; 255
    25c2:	10 82       	st	Z, r1
    25c4:	1c c0       	rjmp	.+56     	; 0x25fe <main+0x986>
				{
					while (uart_recieveByte() != READY){};
    25c6:	0e 94 08 07 	call	0xe10	; 0xe10 <uart_recieveByte>
    25ca:	80 31       	cpi	r24, 0x10	; 16
    25cc:	e1 f7       	brne	.-8      	; 0x25c6 <main+0x94e>
					uart_sendByte(new_password[i]);
    25ce:	fe 01       	movw	r30, r28
    25d0:	ed 59       	subi	r30, 0x9D	; 157
    25d2:	ff 4f       	sbci	r31, 0xFF	; 255
    25d4:	80 81       	ld	r24, Z
    25d6:	28 2f       	mov	r18, r24
    25d8:	30 e0       	ldi	r19, 0x00	; 0
    25da:	ce 01       	movw	r24, r28
    25dc:	86 59       	subi	r24, 0x96	; 150
    25de:	9f 4f       	sbci	r25, 0xFF	; 255
    25e0:	fc 01       	movw	r30, r24
    25e2:	e2 0f       	add	r30, r18
    25e4:	f3 1f       	adc	r31, r19
    25e6:	80 81       	ld	r24, Z
    25e8:	0e 94 f1 06 	call	0xde2	; 0xde2 <uart_sendByte>
				LCD_displayString("enter the pass: ");
				_delay_ms(50);
				get_password(new_password);
				uart_sendByte(READY);
				uart_sendByte('+');
				for (uint8 i = 0; i < PASSWORD_LEN; i++)
    25ec:	de 01       	movw	r26, r28
    25ee:	ad 59       	subi	r26, 0x9D	; 157
    25f0:	bf 4f       	sbci	r27, 0xFF	; 255
    25f2:	fe 01       	movw	r30, r28
    25f4:	ed 59       	subi	r30, 0x9D	; 157
    25f6:	ff 4f       	sbci	r31, 0xFF	; 255
    25f8:	80 81       	ld	r24, Z
    25fa:	8f 5f       	subi	r24, 0xFF	; 255
    25fc:	8c 93       	st	X, r24
    25fe:	fe 01       	movw	r30, r28
    2600:	ed 59       	subi	r30, 0x9D	; 157
    2602:	ff 4f       	sbci	r31, 0xFF	; 255
    2604:	80 81       	ld	r24, Z
    2606:	85 30       	cpi	r24, 0x05	; 5
    2608:	f0 f2       	brcs	.-68     	; 0x25c6 <main+0x94e>
				{
					while (uart_recieveByte() != READY){};
					uart_sendByte(new_password[i]);
				}
				uart_sendByte(READY);
    260a:	80 e1       	ldi	r24, 0x10	; 16
    260c:	0e 94 f1 06 	call	0xde2	; 0xde2 <uart_sendByte>
				 * enter new password
				 * re_enter the new password
				 * check whether they are matching or no
				 * send the new password using uart to the control ECU
				 * */
				if (uart_recieveByte() == MATCHING)
    2610:	0e 94 08 07 	call	0xe10	; 0xe10 <uart_recieveByte>
    2614:	80 32       	cpi	r24, 0x20	; 32
    2616:	09 f0       	breq	.+2      	; 0x261a <main+0x9a2>
    2618:	46 c1       	rjmp	.+652    	; 0x28a6 <main+0xc2e>
				{
					LCD_displayString("matching");
    261a:	83 ed       	ldi	r24, 0xD3	; 211
    261c:	90 e0       	ldi	r25, 0x00	; 0
    261e:	0e 94 94 0c 	call	0x1928	; 0x1928 <LCD_displayString>
    2622:	80 e0       	ldi	r24, 0x00	; 0
    2624:	90 e0       	ldi	r25, 0x00	; 0
    2626:	a8 ec       	ldi	r26, 0xC8	; 200
    2628:	b2 e4       	ldi	r27, 0x42	; 66
    262a:	8f a3       	std	Y+39, r24	; 0x27
    262c:	98 a7       	std	Y+40, r25	; 0x28
    262e:	a9 a7       	std	Y+41, r26	; 0x29
    2630:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2632:	6f a1       	ldd	r22, Y+39	; 0x27
    2634:	78 a5       	ldd	r23, Y+40	; 0x28
    2636:	89 a5       	ldd	r24, Y+41	; 0x29
    2638:	9a a5       	ldd	r25, Y+42	; 0x2a
    263a:	20 e0       	ldi	r18, 0x00	; 0
    263c:	30 e0       	ldi	r19, 0x00	; 0
    263e:	4a ef       	ldi	r20, 0xFA	; 250
    2640:	54 e4       	ldi	r21, 0x44	; 68
    2642:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2646:	dc 01       	movw	r26, r24
    2648:	cb 01       	movw	r24, r22
    264a:	8b a3       	std	Y+35, r24	; 0x23
    264c:	9c a3       	std	Y+36, r25	; 0x24
    264e:	ad a3       	std	Y+37, r26	; 0x25
    2650:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    2652:	6b a1       	ldd	r22, Y+35	; 0x23
    2654:	7c a1       	ldd	r23, Y+36	; 0x24
    2656:	8d a1       	ldd	r24, Y+37	; 0x25
    2658:	9e a1       	ldd	r25, Y+38	; 0x26
    265a:	20 e0       	ldi	r18, 0x00	; 0
    265c:	30 e0       	ldi	r19, 0x00	; 0
    265e:	40 e8       	ldi	r20, 0x80	; 128
    2660:	5f e3       	ldi	r21, 0x3F	; 63
    2662:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2666:	88 23       	and	r24, r24
    2668:	2c f4       	brge	.+10     	; 0x2674 <main+0x9fc>
		__ticks = 1;
    266a:	81 e0       	ldi	r24, 0x01	; 1
    266c:	90 e0       	ldi	r25, 0x00	; 0
    266e:	9a a3       	std	Y+34, r25	; 0x22
    2670:	89 a3       	std	Y+33, r24	; 0x21
    2672:	3f c0       	rjmp	.+126    	; 0x26f2 <main+0xa7a>
	else if (__tmp > 65535)
    2674:	6b a1       	ldd	r22, Y+35	; 0x23
    2676:	7c a1       	ldd	r23, Y+36	; 0x24
    2678:	8d a1       	ldd	r24, Y+37	; 0x25
    267a:	9e a1       	ldd	r25, Y+38	; 0x26
    267c:	20 e0       	ldi	r18, 0x00	; 0
    267e:	3f ef       	ldi	r19, 0xFF	; 255
    2680:	4f e7       	ldi	r20, 0x7F	; 127
    2682:	57 e4       	ldi	r21, 0x47	; 71
    2684:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2688:	18 16       	cp	r1, r24
    268a:	4c f5       	brge	.+82     	; 0x26de <main+0xa66>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    268c:	6f a1       	ldd	r22, Y+39	; 0x27
    268e:	78 a5       	ldd	r23, Y+40	; 0x28
    2690:	89 a5       	ldd	r24, Y+41	; 0x29
    2692:	9a a5       	ldd	r25, Y+42	; 0x2a
    2694:	20 e0       	ldi	r18, 0x00	; 0
    2696:	30 e0       	ldi	r19, 0x00	; 0
    2698:	40 e2       	ldi	r20, 0x20	; 32
    269a:	51 e4       	ldi	r21, 0x41	; 65
    269c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    26a0:	dc 01       	movw	r26, r24
    26a2:	cb 01       	movw	r24, r22
    26a4:	bc 01       	movw	r22, r24
    26a6:	cd 01       	movw	r24, r26
    26a8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    26ac:	dc 01       	movw	r26, r24
    26ae:	cb 01       	movw	r24, r22
    26b0:	9a a3       	std	Y+34, r25	; 0x22
    26b2:	89 a3       	std	Y+33, r24	; 0x21
    26b4:	0f c0       	rjmp	.+30     	; 0x26d4 <main+0xa5c>
    26b6:	88 ec       	ldi	r24, 0xC8	; 200
    26b8:	90 e0       	ldi	r25, 0x00	; 0
    26ba:	98 a3       	std	Y+32, r25	; 0x20
    26bc:	8f 8f       	std	Y+31, r24	; 0x1f
    26be:	8f 8d       	ldd	r24, Y+31	; 0x1f
    26c0:	98 a1       	ldd	r25, Y+32	; 0x20
    26c2:	01 97       	sbiw	r24, 0x01	; 1
    26c4:	f1 f7       	brne	.-4      	; 0x26c2 <main+0xa4a>
    26c6:	98 a3       	std	Y+32, r25	; 0x20
    26c8:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    26ca:	89 a1       	ldd	r24, Y+33	; 0x21
    26cc:	9a a1       	ldd	r25, Y+34	; 0x22
    26ce:	01 97       	sbiw	r24, 0x01	; 1
    26d0:	9a a3       	std	Y+34, r25	; 0x22
    26d2:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    26d4:	89 a1       	ldd	r24, Y+33	; 0x21
    26d6:	9a a1       	ldd	r25, Y+34	; 0x22
    26d8:	00 97       	sbiw	r24, 0x00	; 0
    26da:	69 f7       	brne	.-38     	; 0x26b6 <main+0xa3e>
    26dc:	14 c0       	rjmp	.+40     	; 0x2706 <main+0xa8e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    26de:	6b a1       	ldd	r22, Y+35	; 0x23
    26e0:	7c a1       	ldd	r23, Y+36	; 0x24
    26e2:	8d a1       	ldd	r24, Y+37	; 0x25
    26e4:	9e a1       	ldd	r25, Y+38	; 0x26
    26e6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    26ea:	dc 01       	movw	r26, r24
    26ec:	cb 01       	movw	r24, r22
    26ee:	9a a3       	std	Y+34, r25	; 0x22
    26f0:	89 a3       	std	Y+33, r24	; 0x21
    26f2:	89 a1       	ldd	r24, Y+33	; 0x21
    26f4:	9a a1       	ldd	r25, Y+34	; 0x22
    26f6:	9e 8f       	std	Y+30, r25	; 0x1e
    26f8:	8d 8f       	std	Y+29, r24	; 0x1d
    26fa:	8d 8d       	ldd	r24, Y+29	; 0x1d
    26fc:	9e 8d       	ldd	r25, Y+30	; 0x1e
    26fe:	01 97       	sbiw	r24, 0x01	; 1
    2700:	f1 f7       	brne	.-4      	; 0x26fe <main+0xa86>
    2702:	9e 8f       	std	Y+30, r25	; 0x1e
    2704:	8d 8f       	std	Y+29, r24	; 0x1d
					_delay_ms(100);
					LCD_clearScreen();
    2706:	0e 94 3b 0d 	call	0x1a76	; 0x1a76 <LCD_clearScreen>
					s_flag = 1;
    270a:	fe 01       	movw	r30, r28
    270c:	e9 59       	subi	r30, 0x99	; 153
    270e:	ff 4f       	sbci	r31, 0xFF	; 255
    2710:	81 e0       	ldi	r24, 0x01	; 1
    2712:	80 83       	st	Z, r24
					comp=1;
    2714:	fe 01       	movw	r30, r28
    2716:	e7 59       	subi	r30, 0x97	; 151
    2718:	ff 4f       	sbci	r31, 0xFF	; 255
    271a:	81 e0       	ldi	r24, 0x01	; 1
    271c:	80 83       	st	Z, r24
    271e:	91 c0       	rjmp	.+290    	; 0x2842 <main+0xbca>
					while (comp)
					{
						LCD_displayString("enter new pass: ");
    2720:	80 e6       	ldi	r24, 0x60	; 96
    2722:	90 e0       	ldi	r25, 0x00	; 0
    2724:	0e 94 94 0c 	call	0x1928	; 0x1928 <LCD_displayString>
						get_password(new_password);
    2728:	ce 01       	movw	r24, r28
    272a:	86 59       	subi	r24, 0x96	; 150
    272c:	9f 4f       	sbci	r25, 0xFF	; 255
    272e:	0e 94 45 0d 	call	0x1a8a	; 0x1a8a <get_password>
						LCD_displayString("enter pass again: ");
    2732:	81 e7       	ldi	r24, 0x71	; 113
    2734:	90 e0       	ldi	r25, 0x00	; 0
    2736:	0e 94 94 0c 	call	0x1928	; 0x1928 <LCD_displayString>
    273a:	80 e0       	ldi	r24, 0x00	; 0
    273c:	90 e0       	ldi	r25, 0x00	; 0
    273e:	a8 e4       	ldi	r26, 0x48	; 72
    2740:	b2 e4       	ldi	r27, 0x42	; 66
    2742:	89 8f       	std	Y+25, r24	; 0x19
    2744:	9a 8f       	std	Y+26, r25	; 0x1a
    2746:	ab 8f       	std	Y+27, r26	; 0x1b
    2748:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    274a:	69 8d       	ldd	r22, Y+25	; 0x19
    274c:	7a 8d       	ldd	r23, Y+26	; 0x1a
    274e:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2750:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2752:	20 e0       	ldi	r18, 0x00	; 0
    2754:	30 e0       	ldi	r19, 0x00	; 0
    2756:	4a ef       	ldi	r20, 0xFA	; 250
    2758:	54 e4       	ldi	r21, 0x44	; 68
    275a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    275e:	dc 01       	movw	r26, r24
    2760:	cb 01       	movw	r24, r22
    2762:	8d 8b       	std	Y+21, r24	; 0x15
    2764:	9e 8b       	std	Y+22, r25	; 0x16
    2766:	af 8b       	std	Y+23, r26	; 0x17
    2768:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    276a:	6d 89       	ldd	r22, Y+21	; 0x15
    276c:	7e 89       	ldd	r23, Y+22	; 0x16
    276e:	8f 89       	ldd	r24, Y+23	; 0x17
    2770:	98 8d       	ldd	r25, Y+24	; 0x18
    2772:	20 e0       	ldi	r18, 0x00	; 0
    2774:	30 e0       	ldi	r19, 0x00	; 0
    2776:	40 e8       	ldi	r20, 0x80	; 128
    2778:	5f e3       	ldi	r21, 0x3F	; 63
    277a:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    277e:	88 23       	and	r24, r24
    2780:	2c f4       	brge	.+10     	; 0x278c <main+0xb14>
		__ticks = 1;
    2782:	81 e0       	ldi	r24, 0x01	; 1
    2784:	90 e0       	ldi	r25, 0x00	; 0
    2786:	9c 8b       	std	Y+20, r25	; 0x14
    2788:	8b 8b       	std	Y+19, r24	; 0x13
    278a:	3f c0       	rjmp	.+126    	; 0x280a <main+0xb92>
	else if (__tmp > 65535)
    278c:	6d 89       	ldd	r22, Y+21	; 0x15
    278e:	7e 89       	ldd	r23, Y+22	; 0x16
    2790:	8f 89       	ldd	r24, Y+23	; 0x17
    2792:	98 8d       	ldd	r25, Y+24	; 0x18
    2794:	20 e0       	ldi	r18, 0x00	; 0
    2796:	3f ef       	ldi	r19, 0xFF	; 255
    2798:	4f e7       	ldi	r20, 0x7F	; 127
    279a:	57 e4       	ldi	r21, 0x47	; 71
    279c:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    27a0:	18 16       	cp	r1, r24
    27a2:	4c f5       	brge	.+82     	; 0x27f6 <main+0xb7e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    27a4:	69 8d       	ldd	r22, Y+25	; 0x19
    27a6:	7a 8d       	ldd	r23, Y+26	; 0x1a
    27a8:	8b 8d       	ldd	r24, Y+27	; 0x1b
    27aa:	9c 8d       	ldd	r25, Y+28	; 0x1c
    27ac:	20 e0       	ldi	r18, 0x00	; 0
    27ae:	30 e0       	ldi	r19, 0x00	; 0
    27b0:	40 e2       	ldi	r20, 0x20	; 32
    27b2:	51 e4       	ldi	r21, 0x41	; 65
    27b4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    27b8:	dc 01       	movw	r26, r24
    27ba:	cb 01       	movw	r24, r22
    27bc:	bc 01       	movw	r22, r24
    27be:	cd 01       	movw	r24, r26
    27c0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    27c4:	dc 01       	movw	r26, r24
    27c6:	cb 01       	movw	r24, r22
    27c8:	9c 8b       	std	Y+20, r25	; 0x14
    27ca:	8b 8b       	std	Y+19, r24	; 0x13
    27cc:	0f c0       	rjmp	.+30     	; 0x27ec <main+0xb74>
    27ce:	88 ec       	ldi	r24, 0xC8	; 200
    27d0:	90 e0       	ldi	r25, 0x00	; 0
    27d2:	9a 8b       	std	Y+18, r25	; 0x12
    27d4:	89 8b       	std	Y+17, r24	; 0x11
    27d6:	89 89       	ldd	r24, Y+17	; 0x11
    27d8:	9a 89       	ldd	r25, Y+18	; 0x12
    27da:	01 97       	sbiw	r24, 0x01	; 1
    27dc:	f1 f7       	brne	.-4      	; 0x27da <main+0xb62>
    27de:	9a 8b       	std	Y+18, r25	; 0x12
    27e0:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    27e2:	8b 89       	ldd	r24, Y+19	; 0x13
    27e4:	9c 89       	ldd	r25, Y+20	; 0x14
    27e6:	01 97       	sbiw	r24, 0x01	; 1
    27e8:	9c 8b       	std	Y+20, r25	; 0x14
    27ea:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    27ec:	8b 89       	ldd	r24, Y+19	; 0x13
    27ee:	9c 89       	ldd	r25, Y+20	; 0x14
    27f0:	00 97       	sbiw	r24, 0x00	; 0
    27f2:	69 f7       	brne	.-38     	; 0x27ce <main+0xb56>
    27f4:	14 c0       	rjmp	.+40     	; 0x281e <main+0xba6>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    27f6:	6d 89       	ldd	r22, Y+21	; 0x15
    27f8:	7e 89       	ldd	r23, Y+22	; 0x16
    27fa:	8f 89       	ldd	r24, Y+23	; 0x17
    27fc:	98 8d       	ldd	r25, Y+24	; 0x18
    27fe:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2802:	dc 01       	movw	r26, r24
    2804:	cb 01       	movw	r24, r22
    2806:	9c 8b       	std	Y+20, r25	; 0x14
    2808:	8b 8b       	std	Y+19, r24	; 0x13
    280a:	8b 89       	ldd	r24, Y+19	; 0x13
    280c:	9c 89       	ldd	r25, Y+20	; 0x14
    280e:	98 8b       	std	Y+16, r25	; 0x10
    2810:	8f 87       	std	Y+15, r24	; 0x0f
    2812:	8f 85       	ldd	r24, Y+15	; 0x0f
    2814:	98 89       	ldd	r25, Y+16	; 0x10
    2816:	01 97       	sbiw	r24, 0x01	; 1
    2818:	f1 f7       	brne	.-4      	; 0x2816 <main+0xb9e>
    281a:	98 8b       	std	Y+16, r25	; 0x10
    281c:	8f 87       	std	Y+15, r24	; 0x0f
						_delay_ms(50);
						get_password(re_new_password);
    281e:	ce 01       	movw	r24, r28
    2820:	81 59       	subi	r24, 0x91	; 145
    2822:	9f 4f       	sbci	r25, 0xFF	; 255
    2824:	0e 94 45 0d 	call	0x1a8a	; 0x1a8a <get_password>
						comp = cmp (new_password, re_new_password);
    2828:	ce 01       	movw	r24, r28
    282a:	86 59       	subi	r24, 0x96	; 150
    282c:	9f 4f       	sbci	r25, 0xFF	; 255
    282e:	9e 01       	movw	r18, r28
    2830:	21 59       	subi	r18, 0x91	; 145
    2832:	3f 4f       	sbci	r19, 0xFF	; 255
    2834:	b9 01       	movw	r22, r18
    2836:	0e 94 f1 0d 	call	0x1be2	; 0x1be2 <cmp>
    283a:	fe 01       	movw	r30, r28
    283c:	e7 59       	subi	r30, 0x97	; 151
    283e:	ff 4f       	sbci	r31, 0xFF	; 255
    2840:	80 83       	st	Z, r24
					LCD_displayString("matching");
					_delay_ms(100);
					LCD_clearScreen();
					s_flag = 1;
					comp=1;
					while (comp)
    2842:	fe 01       	movw	r30, r28
    2844:	e7 59       	subi	r30, 0x97	; 151
    2846:	ff 4f       	sbci	r31, 0xFF	; 255
    2848:	80 81       	ld	r24, Z
    284a:	88 23       	and	r24, r24
    284c:	09 f0       	breq	.+2      	; 0x2850 <main+0xbd8>
    284e:	68 cf       	rjmp	.-304    	; 0x2720 <main+0xaa8>
						LCD_displayString("enter pass again: ");
						_delay_ms(50);
						get_password(re_new_password);
						comp = cmp (new_password, re_new_password);
					}
					uart_sendByte(READY);
    2850:	80 e1       	ldi	r24, 0x10	; 16
    2852:	0e 94 f1 06 	call	0xde2	; 0xde2 <uart_sendByte>
					for ( i = 0; i < PASSWORD_LEN; i++)
    2856:	fe 01       	movw	r30, r28
    2858:	e8 59       	subi	r30, 0x98	; 152
    285a:	ff 4f       	sbci	r31, 0xFF	; 255
    285c:	10 82       	st	Z, r1
    285e:	1c c0       	rjmp	.+56     	; 0x2898 <main+0xc20>
					{
						while (uart_recieveByte() != READY){};
    2860:	0e 94 08 07 	call	0xe10	; 0xe10 <uart_recieveByte>
    2864:	80 31       	cpi	r24, 0x10	; 16
    2866:	e1 f7       	brne	.-8      	; 0x2860 <main+0xbe8>
						uart_sendByte(new_password[i]);
    2868:	fe 01       	movw	r30, r28
    286a:	e8 59       	subi	r30, 0x98	; 152
    286c:	ff 4f       	sbci	r31, 0xFF	; 255
    286e:	80 81       	ld	r24, Z
    2870:	28 2f       	mov	r18, r24
    2872:	30 e0       	ldi	r19, 0x00	; 0
    2874:	ce 01       	movw	r24, r28
    2876:	86 59       	subi	r24, 0x96	; 150
    2878:	9f 4f       	sbci	r25, 0xFF	; 255
    287a:	fc 01       	movw	r30, r24
    287c:	e2 0f       	add	r30, r18
    287e:	f3 1f       	adc	r31, r19
    2880:	80 81       	ld	r24, Z
    2882:	0e 94 f1 06 	call	0xde2	; 0xde2 <uart_sendByte>
						_delay_ms(50);
						get_password(re_new_password);
						comp = cmp (new_password, re_new_password);
					}
					uart_sendByte(READY);
					for ( i = 0; i < PASSWORD_LEN; i++)
    2886:	de 01       	movw	r26, r28
    2888:	a8 59       	subi	r26, 0x98	; 152
    288a:	bf 4f       	sbci	r27, 0xFF	; 255
    288c:	fe 01       	movw	r30, r28
    288e:	e8 59       	subi	r30, 0x98	; 152
    2890:	ff 4f       	sbci	r31, 0xFF	; 255
    2892:	80 81       	ld	r24, Z
    2894:	8f 5f       	subi	r24, 0xFF	; 255
    2896:	8c 93       	st	X, r24
    2898:	fe 01       	movw	r30, r28
    289a:	e8 59       	subi	r30, 0x98	; 152
    289c:	ff 4f       	sbci	r31, 0xFF	; 255
    289e:	80 81       	ld	r24, Z
    28a0:	85 30       	cpi	r24, 0x05	; 5
    28a2:	f0 f2       	brcs	.-68     	; 0x2860 <main+0xbe8>
    28a4:	85 c0       	rjmp	.+266    	; 0x29b0 <main+0xd38>

				}
				// unmatching
				else
				{
					LCD_displayString("unmatching");
    28a6:	82 ec       	ldi	r24, 0xC2	; 194
    28a8:	90 e0       	ldi	r25, 0x00	; 0
    28aa:	0e 94 94 0c 	call	0x1928	; 0x1928 <LCD_displayString>
    28ae:	80 e0       	ldi	r24, 0x00	; 0
    28b0:	90 e0       	ldi	r25, 0x00	; 0
    28b2:	a8 ec       	ldi	r26, 0xC8	; 200
    28b4:	b2 e4       	ldi	r27, 0x42	; 66
    28b6:	8b 87       	std	Y+11, r24	; 0x0b
    28b8:	9c 87       	std	Y+12, r25	; 0x0c
    28ba:	ad 87       	std	Y+13, r26	; 0x0d
    28bc:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    28be:	6b 85       	ldd	r22, Y+11	; 0x0b
    28c0:	7c 85       	ldd	r23, Y+12	; 0x0c
    28c2:	8d 85       	ldd	r24, Y+13	; 0x0d
    28c4:	9e 85       	ldd	r25, Y+14	; 0x0e
    28c6:	20 e0       	ldi	r18, 0x00	; 0
    28c8:	30 e0       	ldi	r19, 0x00	; 0
    28ca:	4a ef       	ldi	r20, 0xFA	; 250
    28cc:	54 e4       	ldi	r21, 0x44	; 68
    28ce:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    28d2:	dc 01       	movw	r26, r24
    28d4:	cb 01       	movw	r24, r22
    28d6:	8f 83       	std	Y+7, r24	; 0x07
    28d8:	98 87       	std	Y+8, r25	; 0x08
    28da:	a9 87       	std	Y+9, r26	; 0x09
    28dc:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    28de:	6f 81       	ldd	r22, Y+7	; 0x07
    28e0:	78 85       	ldd	r23, Y+8	; 0x08
    28e2:	89 85       	ldd	r24, Y+9	; 0x09
    28e4:	9a 85       	ldd	r25, Y+10	; 0x0a
    28e6:	20 e0       	ldi	r18, 0x00	; 0
    28e8:	30 e0       	ldi	r19, 0x00	; 0
    28ea:	40 e8       	ldi	r20, 0x80	; 128
    28ec:	5f e3       	ldi	r21, 0x3F	; 63
    28ee:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    28f2:	88 23       	and	r24, r24
    28f4:	2c f4       	brge	.+10     	; 0x2900 <main+0xc88>
		__ticks = 1;
    28f6:	81 e0       	ldi	r24, 0x01	; 1
    28f8:	90 e0       	ldi	r25, 0x00	; 0
    28fa:	9e 83       	std	Y+6, r25	; 0x06
    28fc:	8d 83       	std	Y+5, r24	; 0x05
    28fe:	3f c0       	rjmp	.+126    	; 0x297e <main+0xd06>
	else if (__tmp > 65535)
    2900:	6f 81       	ldd	r22, Y+7	; 0x07
    2902:	78 85       	ldd	r23, Y+8	; 0x08
    2904:	89 85       	ldd	r24, Y+9	; 0x09
    2906:	9a 85       	ldd	r25, Y+10	; 0x0a
    2908:	20 e0       	ldi	r18, 0x00	; 0
    290a:	3f ef       	ldi	r19, 0xFF	; 255
    290c:	4f e7       	ldi	r20, 0x7F	; 127
    290e:	57 e4       	ldi	r21, 0x47	; 71
    2910:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2914:	18 16       	cp	r1, r24
    2916:	4c f5       	brge	.+82     	; 0x296a <main+0xcf2>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2918:	6b 85       	ldd	r22, Y+11	; 0x0b
    291a:	7c 85       	ldd	r23, Y+12	; 0x0c
    291c:	8d 85       	ldd	r24, Y+13	; 0x0d
    291e:	9e 85       	ldd	r25, Y+14	; 0x0e
    2920:	20 e0       	ldi	r18, 0x00	; 0
    2922:	30 e0       	ldi	r19, 0x00	; 0
    2924:	40 e2       	ldi	r20, 0x20	; 32
    2926:	51 e4       	ldi	r21, 0x41	; 65
    2928:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    292c:	dc 01       	movw	r26, r24
    292e:	cb 01       	movw	r24, r22
    2930:	bc 01       	movw	r22, r24
    2932:	cd 01       	movw	r24, r26
    2934:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2938:	dc 01       	movw	r26, r24
    293a:	cb 01       	movw	r24, r22
    293c:	9e 83       	std	Y+6, r25	; 0x06
    293e:	8d 83       	std	Y+5, r24	; 0x05
    2940:	0f c0       	rjmp	.+30     	; 0x2960 <main+0xce8>
    2942:	88 ec       	ldi	r24, 0xC8	; 200
    2944:	90 e0       	ldi	r25, 0x00	; 0
    2946:	9c 83       	std	Y+4, r25	; 0x04
    2948:	8b 83       	std	Y+3, r24	; 0x03
    294a:	8b 81       	ldd	r24, Y+3	; 0x03
    294c:	9c 81       	ldd	r25, Y+4	; 0x04
    294e:	01 97       	sbiw	r24, 0x01	; 1
    2950:	f1 f7       	brne	.-4      	; 0x294e <main+0xcd6>
    2952:	9c 83       	std	Y+4, r25	; 0x04
    2954:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2956:	8d 81       	ldd	r24, Y+5	; 0x05
    2958:	9e 81       	ldd	r25, Y+6	; 0x06
    295a:	01 97       	sbiw	r24, 0x01	; 1
    295c:	9e 83       	std	Y+6, r25	; 0x06
    295e:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2960:	8d 81       	ldd	r24, Y+5	; 0x05
    2962:	9e 81       	ldd	r25, Y+6	; 0x06
    2964:	00 97       	sbiw	r24, 0x00	; 0
    2966:	69 f7       	brne	.-38     	; 0x2942 <main+0xcca>
    2968:	14 c0       	rjmp	.+40     	; 0x2992 <main+0xd1a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    296a:	6f 81       	ldd	r22, Y+7	; 0x07
    296c:	78 85       	ldd	r23, Y+8	; 0x08
    296e:	89 85       	ldd	r24, Y+9	; 0x09
    2970:	9a 85       	ldd	r25, Y+10	; 0x0a
    2972:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2976:	dc 01       	movw	r26, r24
    2978:	cb 01       	movw	r24, r22
    297a:	9e 83       	std	Y+6, r25	; 0x06
    297c:	8d 83       	std	Y+5, r24	; 0x05
    297e:	8d 81       	ldd	r24, Y+5	; 0x05
    2980:	9e 81       	ldd	r25, Y+6	; 0x06
    2982:	9a 83       	std	Y+2, r25	; 0x02
    2984:	89 83       	std	Y+1, r24	; 0x01
    2986:	89 81       	ldd	r24, Y+1	; 0x01
    2988:	9a 81       	ldd	r25, Y+2	; 0x02
    298a:	01 97       	sbiw	r24, 0x01	; 1
    298c:	f1 f7       	brne	.-4      	; 0x298a <main+0xd12>
    298e:	9a 83       	std	Y+2, r25	; 0x02
    2990:	89 83       	std	Y+1, r24	; 0x01
					_delay_ms(100);
					LCD_clearScreen();
    2992:	0e 94 3b 0d 	call	0x1a76	; 0x1a76 <LCD_clearScreen>
					s_flag = 0;
    2996:	fe 01       	movw	r30, r28
    2998:	e9 59       	subi	r30, 0x99	; 153
    299a:	ff 4f       	sbci	r31, 0xFF	; 255
    299c:	10 82       	st	Z, r1
					no_of_tries ++;
    299e:	de 01       	movw	r26, r28
    29a0:	aa 59       	subi	r26, 0x9A	; 154
    29a2:	bf 4f       	sbci	r27, 0xFF	; 255
    29a4:	fe 01       	movw	r30, r28
    29a6:	ea 59       	subi	r30, 0x9A	; 154
    29a8:	ff 4f       	sbci	r31, 0xFF	; 255
    29aa:	80 81       	ld	r24, Z
    29ac:	8f 5f       	subi	r24, 0xFF	; 255
    29ae:	8c 93       	st	X, r24
		 * */
		else if (option == '+')
		{
			s_flag = 0;
			no_of_tries = 0;
			while(!(s_flag) && no_of_tries != 3)
    29b0:	fe 01       	movw	r30, r28
    29b2:	e9 59       	subi	r30, 0x99	; 153
    29b4:	ff 4f       	sbci	r31, 0xFF	; 255
    29b6:	80 81       	ld	r24, Z
    29b8:	88 23       	and	r24, r24
    29ba:	39 f4       	brne	.+14     	; 0x29ca <main+0xd52>
    29bc:	fe 01       	movw	r30, r28
    29be:	ea 59       	subi	r30, 0x9A	; 154
    29c0:	ff 4f       	sbci	r31, 0xFF	; 255
    29c2:	80 81       	ld	r24, Z
    29c4:	83 30       	cpi	r24, 0x03	; 3
    29c6:	09 f0       	breq	.+2      	; 0x29ca <main+0xd52>
    29c8:	78 cd       	rjmp	.-1296   	; 0x24ba <main+0x842>
					no_of_tries ++;
				}

			}

			if (no_of_tries == 3)
    29ca:	fe 01       	movw	r30, r28
    29cc:	ea 59       	subi	r30, 0x9A	; 154
    29ce:	ff 4f       	sbci	r31, 0xFF	; 255
    29d0:	80 81       	ld	r24, Z
    29d2:	83 30       	cpi	r24, 0x03	; 3
    29d4:	09 f0       	breq	.+2      	; 0x29d8 <main+0xd60>
    29d6:	c5 ca       	rjmp	.-2678   	; 0x1f62 <main+0x2ea>
			{
				Timer1_set_CallBack(LCD_clear);
    29d8:	86 e2       	ldi	r24, 0x26	; 38
    29da:	9e e0       	ldi	r25, 0x0E	; 14
    29dc:	0e 94 1d 06 	call	0xc3a	; 0xc3a <Timer1_set_CallBack>
				LCD_displayString("THIEF");
    29e0:	8d ec       	ldi	r24, 0xCD	; 205
    29e2:	90 e0       	ldi	r25, 0x00	; 0
    29e4:	0e 94 94 0c 	call	0x1928	; 0x1928 <LCD_displayString>
				uart_sendByte(READY);
    29e8:	80 e1       	ldi	r24, 0x10	; 16
    29ea:	0e 94 f1 06 	call	0xde2	; 0xde2 <uart_sendByte>
				uart_sendByte(THEIF);
    29ee:	80 e4       	ldi	r24, 0x40	; 64
    29f0:	0e 94 f1 06 	call	0xde2	; 0xde2 <uart_sendByte>
				g_clear = 1;
    29f4:	81 e0       	ldi	r24, 0x01	; 1
    29f6:	80 93 fa 00 	sts	0x00FA, r24
				Timer1_config timer_config = {F_CPU_1024, 0, 65535};
    29fa:	ce 01       	movw	r24, r28
    29fc:	8d 57       	subi	r24, 0x7D	; 125
    29fe:	9f 4f       	sbci	r25, 0xFF	; 255
    2a00:	c9 56       	subi	r28, 0x69	; 105
    2a02:	df 4f       	sbci	r29, 0xFF	; 255
    2a04:	99 83       	std	Y+1, r25	; 0x01
    2a06:	88 83       	st	Y, r24
    2a08:	c7 59       	subi	r28, 0x97	; 151
    2a0a:	d0 40       	sbci	r29, 0x00	; 0
    2a0c:	84 ee       	ldi	r24, 0xE4	; 228
    2a0e:	90 e0       	ldi	r25, 0x00	; 0
    2a10:	c7 56       	subi	r28, 0x67	; 103
    2a12:	df 4f       	sbci	r29, 0xFF	; 255
    2a14:	99 83       	std	Y+1, r25	; 0x01
    2a16:	88 83       	st	Y, r24
    2a18:	c9 59       	subi	r28, 0x99	; 153
    2a1a:	d0 40       	sbci	r29, 0x00	; 0
    2a1c:	95 e0       	ldi	r25, 0x05	; 5
    2a1e:	c5 56       	subi	r28, 0x65	; 101
    2a20:	df 4f       	sbci	r29, 0xFF	; 255
    2a22:	98 83       	st	Y, r25
    2a24:	cb 59       	subi	r28, 0x9B	; 155
    2a26:	d0 40       	sbci	r29, 0x00	; 0
    2a28:	c7 56       	subi	r28, 0x67	; 103
    2a2a:	df 4f       	sbci	r29, 0xFF	; 255
    2a2c:	e8 81       	ld	r30, Y
    2a2e:	f9 81       	ldd	r31, Y+1	; 0x01
    2a30:	c9 59       	subi	r28, 0x99	; 153
    2a32:	d0 40       	sbci	r29, 0x00	; 0
    2a34:	00 80       	ld	r0, Z
    2a36:	c7 56       	subi	r28, 0x67	; 103
    2a38:	df 4f       	sbci	r29, 0xFF	; 255
    2a3a:	88 81       	ld	r24, Y
    2a3c:	99 81       	ldd	r25, Y+1	; 0x01
    2a3e:	c9 59       	subi	r28, 0x99	; 153
    2a40:	d0 40       	sbci	r29, 0x00	; 0
    2a42:	01 96       	adiw	r24, 0x01	; 1
    2a44:	c7 56       	subi	r28, 0x67	; 103
    2a46:	df 4f       	sbci	r29, 0xFF	; 255
    2a48:	99 83       	std	Y+1, r25	; 0x01
    2a4a:	88 83       	st	Y, r24
    2a4c:	c9 59       	subi	r28, 0x99	; 153
    2a4e:	d0 40       	sbci	r29, 0x00	; 0
    2a50:	c9 56       	subi	r28, 0x69	; 105
    2a52:	df 4f       	sbci	r29, 0xFF	; 255
    2a54:	e8 81       	ld	r30, Y
    2a56:	f9 81       	ldd	r31, Y+1	; 0x01
    2a58:	c7 59       	subi	r28, 0x97	; 151
    2a5a:	d0 40       	sbci	r29, 0x00	; 0
    2a5c:	00 82       	st	Z, r0
    2a5e:	c9 56       	subi	r28, 0x69	; 105
    2a60:	df 4f       	sbci	r29, 0xFF	; 255
    2a62:	88 81       	ld	r24, Y
    2a64:	99 81       	ldd	r25, Y+1	; 0x01
    2a66:	c7 59       	subi	r28, 0x97	; 151
    2a68:	d0 40       	sbci	r29, 0x00	; 0
    2a6a:	01 96       	adiw	r24, 0x01	; 1
    2a6c:	c9 56       	subi	r28, 0x69	; 105
    2a6e:	df 4f       	sbci	r29, 0xFF	; 255
    2a70:	99 83       	std	Y+1, r25	; 0x01
    2a72:	88 83       	st	Y, r24
    2a74:	c7 59       	subi	r28, 0x97	; 151
    2a76:	d0 40       	sbci	r29, 0x00	; 0
    2a78:	c5 56       	subi	r28, 0x65	; 101
    2a7a:	df 4f       	sbci	r29, 0xFF	; 255
    2a7c:	98 81       	ld	r25, Y
    2a7e:	cb 59       	subi	r28, 0x9B	; 155
    2a80:	d0 40       	sbci	r29, 0x00	; 0
    2a82:	91 50       	subi	r25, 0x01	; 1
    2a84:	c5 56       	subi	r28, 0x65	; 101
    2a86:	df 4f       	sbci	r29, 0xFF	; 255
    2a88:	98 83       	st	Y, r25
    2a8a:	cb 59       	subi	r28, 0x9B	; 155
    2a8c:	d0 40       	sbci	r29, 0x00	; 0
    2a8e:	c5 56       	subi	r28, 0x65	; 101
    2a90:	df 4f       	sbci	r29, 0xFF	; 255
    2a92:	e8 81       	ld	r30, Y
    2a94:	cb 59       	subi	r28, 0x9B	; 155
    2a96:	d0 40       	sbci	r29, 0x00	; 0
    2a98:	ee 23       	and	r30, r30
    2a9a:	31 f6       	brne	.-116    	; 0x2a28 <main+0xdb0>
				Timer1_init(&timer_config);
    2a9c:	ce 01       	movw	r24, r28
    2a9e:	8d 57       	subi	r24, 0x7D	; 125
    2aa0:	9f 4f       	sbci	r25, 0xFF	; 255
    2aa2:	0e 94 d6 05 	call	0xbac	; 0xbac <Timer1_init>
    2aa6:	5d ca       	rjmp	.-2886   	; 0x1f62 <main+0x2ea>

00002aa8 <__udivmodsi4>:
    2aa8:	a1 e2       	ldi	r26, 0x21	; 33
    2aaa:	1a 2e       	mov	r1, r26
    2aac:	aa 1b       	sub	r26, r26
    2aae:	bb 1b       	sub	r27, r27
    2ab0:	fd 01       	movw	r30, r26
    2ab2:	0d c0       	rjmp	.+26     	; 0x2ace <__udivmodsi4_ep>

00002ab4 <__udivmodsi4_loop>:
    2ab4:	aa 1f       	adc	r26, r26
    2ab6:	bb 1f       	adc	r27, r27
    2ab8:	ee 1f       	adc	r30, r30
    2aba:	ff 1f       	adc	r31, r31
    2abc:	a2 17       	cp	r26, r18
    2abe:	b3 07       	cpc	r27, r19
    2ac0:	e4 07       	cpc	r30, r20
    2ac2:	f5 07       	cpc	r31, r21
    2ac4:	20 f0       	brcs	.+8      	; 0x2ace <__udivmodsi4_ep>
    2ac6:	a2 1b       	sub	r26, r18
    2ac8:	b3 0b       	sbc	r27, r19
    2aca:	e4 0b       	sbc	r30, r20
    2acc:	f5 0b       	sbc	r31, r21

00002ace <__udivmodsi4_ep>:
    2ace:	66 1f       	adc	r22, r22
    2ad0:	77 1f       	adc	r23, r23
    2ad2:	88 1f       	adc	r24, r24
    2ad4:	99 1f       	adc	r25, r25
    2ad6:	1a 94       	dec	r1
    2ad8:	69 f7       	brne	.-38     	; 0x2ab4 <__udivmodsi4_loop>
    2ada:	60 95       	com	r22
    2adc:	70 95       	com	r23
    2ade:	80 95       	com	r24
    2ae0:	90 95       	com	r25
    2ae2:	9b 01       	movw	r18, r22
    2ae4:	ac 01       	movw	r20, r24
    2ae6:	bd 01       	movw	r22, r26
    2ae8:	cf 01       	movw	r24, r30
    2aea:	08 95       	ret

00002aec <__prologue_saves__>:
    2aec:	2f 92       	push	r2
    2aee:	3f 92       	push	r3
    2af0:	4f 92       	push	r4
    2af2:	5f 92       	push	r5
    2af4:	6f 92       	push	r6
    2af6:	7f 92       	push	r7
    2af8:	8f 92       	push	r8
    2afa:	9f 92       	push	r9
    2afc:	af 92       	push	r10
    2afe:	bf 92       	push	r11
    2b00:	cf 92       	push	r12
    2b02:	df 92       	push	r13
    2b04:	ef 92       	push	r14
    2b06:	ff 92       	push	r15
    2b08:	0f 93       	push	r16
    2b0a:	1f 93       	push	r17
    2b0c:	cf 93       	push	r28
    2b0e:	df 93       	push	r29
    2b10:	cd b7       	in	r28, 0x3d	; 61
    2b12:	de b7       	in	r29, 0x3e	; 62
    2b14:	ca 1b       	sub	r28, r26
    2b16:	db 0b       	sbc	r29, r27
    2b18:	0f b6       	in	r0, 0x3f	; 63
    2b1a:	f8 94       	cli
    2b1c:	de bf       	out	0x3e, r29	; 62
    2b1e:	0f be       	out	0x3f, r0	; 63
    2b20:	cd bf       	out	0x3d, r28	; 61
    2b22:	09 94       	ijmp

00002b24 <__epilogue_restores__>:
    2b24:	2a 88       	ldd	r2, Y+18	; 0x12
    2b26:	39 88       	ldd	r3, Y+17	; 0x11
    2b28:	48 88       	ldd	r4, Y+16	; 0x10
    2b2a:	5f 84       	ldd	r5, Y+15	; 0x0f
    2b2c:	6e 84       	ldd	r6, Y+14	; 0x0e
    2b2e:	7d 84       	ldd	r7, Y+13	; 0x0d
    2b30:	8c 84       	ldd	r8, Y+12	; 0x0c
    2b32:	9b 84       	ldd	r9, Y+11	; 0x0b
    2b34:	aa 84       	ldd	r10, Y+10	; 0x0a
    2b36:	b9 84       	ldd	r11, Y+9	; 0x09
    2b38:	c8 84       	ldd	r12, Y+8	; 0x08
    2b3a:	df 80       	ldd	r13, Y+7	; 0x07
    2b3c:	ee 80       	ldd	r14, Y+6	; 0x06
    2b3e:	fd 80       	ldd	r15, Y+5	; 0x05
    2b40:	0c 81       	ldd	r16, Y+4	; 0x04
    2b42:	1b 81       	ldd	r17, Y+3	; 0x03
    2b44:	aa 81       	ldd	r26, Y+2	; 0x02
    2b46:	b9 81       	ldd	r27, Y+1	; 0x01
    2b48:	ce 0f       	add	r28, r30
    2b4a:	d1 1d       	adc	r29, r1
    2b4c:	0f b6       	in	r0, 0x3f	; 63
    2b4e:	f8 94       	cli
    2b50:	de bf       	out	0x3e, r29	; 62
    2b52:	0f be       	out	0x3f, r0	; 63
    2b54:	cd bf       	out	0x3d, r28	; 61
    2b56:	ed 01       	movw	r28, r26
    2b58:	08 95       	ret

00002b5a <itoa>:
    2b5a:	fb 01       	movw	r30, r22
    2b5c:	9f 01       	movw	r18, r30
    2b5e:	e8 94       	clt
    2b60:	42 30       	cpi	r20, 0x02	; 2
    2b62:	c4 f0       	brlt	.+48     	; 0x2b94 <itoa+0x3a>
    2b64:	45 32       	cpi	r20, 0x25	; 37
    2b66:	b4 f4       	brge	.+44     	; 0x2b94 <itoa+0x3a>
    2b68:	4a 30       	cpi	r20, 0x0A	; 10
    2b6a:	29 f4       	brne	.+10     	; 0x2b76 <itoa+0x1c>
    2b6c:	97 fb       	bst	r25, 7
    2b6e:	1e f4       	brtc	.+6      	; 0x2b76 <itoa+0x1c>
    2b70:	90 95       	com	r25
    2b72:	81 95       	neg	r24
    2b74:	9f 4f       	sbci	r25, 0xFF	; 255
    2b76:	64 2f       	mov	r22, r20
    2b78:	77 27       	eor	r23, r23
    2b7a:	0e 94 de 15 	call	0x2bbc	; 0x2bbc <__udivmodhi4>
    2b7e:	80 5d       	subi	r24, 0xD0	; 208
    2b80:	8a 33       	cpi	r24, 0x3A	; 58
    2b82:	0c f0       	brlt	.+2      	; 0x2b86 <itoa+0x2c>
    2b84:	89 5d       	subi	r24, 0xD9	; 217
    2b86:	81 93       	st	Z+, r24
    2b88:	cb 01       	movw	r24, r22
    2b8a:	00 97       	sbiw	r24, 0x00	; 0
    2b8c:	a1 f7       	brne	.-24     	; 0x2b76 <itoa+0x1c>
    2b8e:	16 f4       	brtc	.+4      	; 0x2b94 <itoa+0x3a>
    2b90:	5d e2       	ldi	r21, 0x2D	; 45
    2b92:	51 93       	st	Z+, r21
    2b94:	10 82       	st	Z, r1
    2b96:	c9 01       	movw	r24, r18
    2b98:	0c 94 ce 15 	jmp	0x2b9c	; 0x2b9c <strrev>

00002b9c <strrev>:
    2b9c:	dc 01       	movw	r26, r24
    2b9e:	fc 01       	movw	r30, r24
    2ba0:	67 2f       	mov	r22, r23
    2ba2:	71 91       	ld	r23, Z+
    2ba4:	77 23       	and	r23, r23
    2ba6:	e1 f7       	brne	.-8      	; 0x2ba0 <strrev+0x4>
    2ba8:	32 97       	sbiw	r30, 0x02	; 2
    2baa:	04 c0       	rjmp	.+8      	; 0x2bb4 <strrev+0x18>
    2bac:	7c 91       	ld	r23, X
    2bae:	6d 93       	st	X+, r22
    2bb0:	70 83       	st	Z, r23
    2bb2:	62 91       	ld	r22, -Z
    2bb4:	ae 17       	cp	r26, r30
    2bb6:	bf 07       	cpc	r27, r31
    2bb8:	c8 f3       	brcs	.-14     	; 0x2bac <strrev+0x10>
    2bba:	08 95       	ret

00002bbc <__udivmodhi4>:
    2bbc:	aa 1b       	sub	r26, r26
    2bbe:	bb 1b       	sub	r27, r27
    2bc0:	51 e1       	ldi	r21, 0x11	; 17
    2bc2:	07 c0       	rjmp	.+14     	; 0x2bd2 <__udivmodhi4_ep>

00002bc4 <__udivmodhi4_loop>:
    2bc4:	aa 1f       	adc	r26, r26
    2bc6:	bb 1f       	adc	r27, r27
    2bc8:	a6 17       	cp	r26, r22
    2bca:	b7 07       	cpc	r27, r23
    2bcc:	10 f0       	brcs	.+4      	; 0x2bd2 <__udivmodhi4_ep>
    2bce:	a6 1b       	sub	r26, r22
    2bd0:	b7 0b       	sbc	r27, r23

00002bd2 <__udivmodhi4_ep>:
    2bd2:	88 1f       	adc	r24, r24
    2bd4:	99 1f       	adc	r25, r25
    2bd6:	5a 95       	dec	r21
    2bd8:	a9 f7       	brne	.-22     	; 0x2bc4 <__udivmodhi4_loop>
    2bda:	80 95       	com	r24
    2bdc:	90 95       	com	r25
    2bde:	bc 01       	movw	r22, r24
    2be0:	cd 01       	movw	r24, r26
    2be2:	08 95       	ret

00002be4 <_exit>:
    2be4:	f8 94       	cli

00002be6 <__stop_program>:
    2be6:	ff cf       	rjmp	.-2      	; 0x2be6 <__stop_program>
